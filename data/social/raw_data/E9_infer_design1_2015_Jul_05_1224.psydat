ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E9_infer_design1_2015_Jul_05_1224
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vleft
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'%\x10$\x95\xf2\x03N@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_05_1224
p67
sVparticipant
p68
VE9
p69
sVglasses
p70
Vy
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F2.1335542645095984
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F17.032997413029761
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P6\x00'
tbsg70
Vy
sa(dp96
g64
g65
sg20
F15.134
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F0.69999999999999929
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'%\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p103
sg21
F1.3999999999999999
sg70
Vy
sa(dp104
g64
g65
sg20
F5.4669999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F0.27999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x0e\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p110
sg21
F1.6000000000000001
sg70
Vy
sa(dp111
g64
g65
sg20
F3.8010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F1.0999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x1c\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p117
sg21
F1.3
sg70
Vy
sa(dp118
g64
g65
sg20
F4.6840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0.21999999999999914
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'\x16\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p124
sg21
F1.2
sg70
Vy
sa(dp125
g64
g65
sg20
F4.0679999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0.79999999999999916
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\x13\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p131
sg21
F1.8
sg70
Vy
sa(dp132
g64
g65
sg20
F3.7010000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0.23999999999999935
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x1d\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V40-sardines.png
p138
sg21
F1.1000000000000001
sg70
Vy
sa(dp139
g64
g65
sg20
F6.7510000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F1.4999999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x1f\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p145
sg21
F1.7
sg70
Vy
sa(dp146
g64
g65
sg20
F6.9669999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F2.02
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'#\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p152
sg21
F1.7
sg70
Vy
sa(dp153
g64
g65
sg20
F5.2839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F0.79999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x05\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p159
sg21
F1.6000000000000001
sg70
Vy
sa(dp160
g64
g65
sg20
F2.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F0.099999999999998729
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S' \x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p166
sg21
F1.8
sg70
Vy
sa(dp167
g64
g65
sg20
F4.4509999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F1.6999999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x1b\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p173
sg21
F1.8999999999999999
sg70
Vy
sa(dp174
g64
g65
sg20
F2.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0.7599999999999989
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x00\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p180
sg21
F1.8999999999999999
sg70
Vy
sa(dp181
g64
g65
sg20
F3.0339999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F1.1000000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x11\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p187
sg21
F1.1000000000000001
sg70
Vy
sa(dp188
g64
g65
sg20
F4.234
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0.8199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'!\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V44-crunch.png
p194
sg21
F1.6000000000000001
sg70
Vy
sa(dp195
g64
g65
sg20
F5.4509999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F1.0199999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'"\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p201
sg21
F1.3999999999999999
sg70
Vy
sa(dp202
g64
g65
sg20
F5.2169999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F1.0599999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\x18\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p208
sg21
F1.5
sg70
Vy
sa(dp209
g64
g65
sg20
F5.4509999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F1.7800000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x1e\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p215
sg21
F1.5
sg70
Vy
sa(dp216
g64
g65
sg20
F3.5840000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F1.4999999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\n\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p222
sg21
F1.8
sg70
Vy
sa(dp223
g64
g65
sg20
F3.5009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F1.9000000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\x19\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p229
sg21
F1.8
sg70
Vy
sa(dp230
g64
g65
sg20
F2.851
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F0.65999999999999948
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\r\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p236
sg21
F1.3
sg70
Vy
sa(dp237
g64
g65
sg20
F3.6179999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F0.29999999999999871
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x03\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V4-corn.png
p243
sg21
F1.7
sg70
Vy
sa(dp244
g64
g65
sg20
F4.9340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F2.2200000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\x0c\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V18-mms.png
p250
sg21
F1.8999999999999999
sg70
Vy
sa(dp251
g64
g65
sg20
F4.101
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F2.2000000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'\x17\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p257
sg21
F1.2
sg70
Vy
sa(dp258
g64
g65
sg20
F3.5339999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F0.87999999999999967
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S"'\x00\x00\x00"
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V51-mars.png
p264
sg21
F1.2
sg70
Vy
sa(dp265
g64
g65
sg20
F2.5510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F1.2400000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\t\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p271
sg21
F1.1000000000000001
sg70
Vy
sa(dp272
g64
g65
sg20
F4.5839999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F0.29999999999999916
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x15\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V29-beans.png
p278
sg21
F1.3
sg70
Vy
sa(dp279
g64
g65
sg20
F2.7010000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F0.95999999999999952
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\x12\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p285
sg21
F1.5
sg70
Vy
sa(dp286
g64
g65
sg20
F3.5840000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0.4599999999999993
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\x14\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p292
sg21
F1.3
sg70
Vy
sa(dp293
g64
g65
sg20
F2.7509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F1.5599999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x0b\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p299
sg21
F1.7
sg70
Vy
sa(dp300
g64
g65
sg20
F2.3340000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F0.63999999999999901
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'&\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V50-polo.png
p306
sg21
F1.8
sg70
Vy
sa(dp307
g64
g65
sg20
F3.5169999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F1.1599999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x08\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p313
sg21
F1.5
sg70
Vy
sa(dp314
g64
g65
sg20
F7.6669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F2.3800000000000008
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'\x06\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V7-olives.png
p320
sg21
F1.3
sg70
Vy
sa(dp321
g64
g65
sg20
F2.5840000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F0.95999999999999974
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'\x10\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V22-daim.png
p327
sg21
F1.2
sg70
Vy
sa(dp328
g64
g65
sg20
F2.4009999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F0.29999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\x04\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p334
sg21
F1.3999999999999999
sg70
Vy
sa(dp335
g64
g65
sg20
F1.5169999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F1
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'$\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V48-twix.png
p341
sg21
F1
sg70
Vy
sa(dp342
g64
g65
sg20
F2.5009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F0.37999999999999856
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x07\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p348
sg21
F1.8999999999999999
sg70
Vy
sa(dp349
g64
g65
sg20
F5.9340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F1.5800000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x0f\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p355
sg21
F1.1000000000000001
sg70
Vy
sa(dp356
g64
g65
sg20
F2.2669999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0.23999999999999891
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x02\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p362
sg21
F1.3999999999999999
sg70
Vy
sa(dp363
g64
g65
sg20
F2.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0.35999999999999854
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'\x01\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p369
sg21
F1.8999999999999999
sg70
Vy
sa(dp370
g64
g65
sg20
F5.2169999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F2.0200000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x1a\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V35-raisins.png
p376
sg21
F1.1000000000000001
sg70
Vy
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F5.6834602110059222
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vy
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'44-crunch.png'
p381
sg26
F4.7000000000000011
sg28
F4
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'right'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F2.5000079827163972
sg27
F6.367
sg70
Vy
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p390
sg26
F1.9999999999999991
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'right'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F1.9500139412436965
sg27
F3.0510000000000002
sg70
Vy
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p399
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'left'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F1.6167056014151058
sg27
F2.9510000000000001
sg70
Vy
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p408
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'right'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F2.4334905738376165
sg27
F1.2669999999999999
sg70
Vy
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p417
sg26
F5.1000000000000014
sg28
F3
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'left'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F1.3334272252820938
sg27
F1.7509999999999999
sg70
Vy
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'25-kitkat.png'
p426
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'right'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F1.2667330562569532
sg27
F1.0669999999999999
sg70
Vy
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p435
sg26
F2.3999999999999981
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'right'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F5.3332963657542223
sg27
F2.7839999999999998
sg70
Vy
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p444
sg26
F4.2000000000000011
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'right'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F1.6668344937731945
sg27
F2.3340000000000001
sg70
Vy
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p453
sg26
F2.399999999999999
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'left'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F3.2168088635521599
sg27
F2.117
sg70
Vy
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p462
sg26
F4.6000000000000014
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'right'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F1.06686893349206
sg27
F1.601
sg70
Vy
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p471
sg26
F4.5
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'right'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F2.033230052189765
sg27
F1.3009999999999999
sg70
Vy
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'48-twix.png'
p480
sg26
F5.2000000000000011
sg28
F3
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'left'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F1.2835284062107348
sg27
F1.5840000000000001
sg70
Vy
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p489
sg26
F3.6000000000000005
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'right'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F4.0500778599935074
sg27
F1.5669999999999999
sg70
Vy
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p498
sg26
F4.9000000000000021
sg28
F3
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'right'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F1.1000975601966729
sg27
F1.234
sg70
Vy
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'40-sardines.png'
p507
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'right'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F1.5338709502682377
sg27
F1.1839999999999999
sg70
Vy
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'7-olives.png'
p516
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'left'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F1.150036292849336
sg27
F1.3009999999999999
sg70
Vy
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'4-corn.png'
p525
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'right'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F1.4335242152847059
sg27
F1.0840000000000001
sg70
Vy
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p534
sg26
F3.5999999999999996
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'left'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F2.2833698922731855
sg27
F2.3839999999999999
sg70
Vy
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'31-hobnobs.png'
p543
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'left'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F1.8835016641112361
sg27
F1.8839999999999999
sg70
Vy
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p552
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F1.2835170023304272
sg27
F1.9510000000000001
sg70
Vy
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'46-pistachios.png'
p561
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'left'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F1.1332794309919336
sg27
F1.167
sg70
Vy
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p570
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'right'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F2.6168090916296478
sg27
F2.101
sg70
Vy
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p579
sg26
F1.9999999999999991
sg28
F3
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'right'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F3.6832526603827773
sg27
F2.0670000000000002
sg70
Vy
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p588
sg26
F2.4999999999999991
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'left'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F4.783334825340944
sg27
F1.3340000000000001
sg70
Vy
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p597
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'left'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F1.3668229188347141
sg27
F1.2669999999999999
sg70
Vy
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p606
sg26
F3.2000000000000002
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'left'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F1.6667062001185968
sg27
F1.667
sg70
Vy
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p615
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'left'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F0.9832642353214851
sg27
F2.0339999999999998
sg70
Vy
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p624
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'right'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F2.8000423654154929
sg27
F1.3839999999999999
sg70
Vy
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'51-mars.png'
p633
sg26
F4.9000000000000021
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'left'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F1.8000882660344359
sg27
F0.91700000000000004
sg70
Vy
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p642
sg26
F2.7999999999999994
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'left'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F1.6836064657720726
sg27
F2.1339999999999999
sg70
Vy
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'29-beans.png'
p651
sg26
F5.9999999999999982
sg28
F3
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'right'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F0.86686853435617195
sg27
F1.151
sg70
Vy
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'18-mms.png'
p660
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'left'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F1.0334059570450336
sg27
F2.0840000000000001
sg70
Vy
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p669
sg26
F3.7000000000000006
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'left'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F1.9165777639157113
sg27
F3.617
sg70
Vy
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p678
sg26
F3.1000000000000001
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'right'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F2.2001423774468094
sg27
F1.784
sg70
Vy
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'22-daim.png'
p687
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'right'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F0.95019953939731749
sg27
F1.117
sg70
Vy
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'49-yorkie.png'
p696
sg26
F5.0000000000000009
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'right'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F2.0167520152081124
sg27
F2.0169999999999999
sg70
Vy
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'50-polo.png'
p705
sg26
F5.0000000000000009
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'right'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F0.98351569088413271
sg27
F1.0169999999999999
sg70
Vy
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'35-raisins.png'
p714
sg26
F5.1000000000000014
sg28
F3
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'left'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F1.0167135271119605
sg27
F2.5670000000000002
sg70
Vy
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'38-maltesers.png'
p723
sg26
F4.2000000000000002
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'left'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F1.3997635975592857
sg27
F0.751
sg70
Vy
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'5-pineapple.png'
p732
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'left'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F0.96686574040541018
sg27
F1.1339999999999999
sg70
Vy
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F314.99075972081005
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F7.633378644751474
sg66
g67
sg68
g69
sg70
Vy
sa(dp743
g64
g65
sg82
S'11-snickers.png'
p744
sg83
S'11-snickers.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'54-frubes_yogurt.png'
p749
sg33
g749
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\x05\x0c&\x0f\x07\xfe\xe0'
tRp754
sa(dp755
g64
g65
sg82
S'52-aero_mousse.png'
p756
sg83
S'14-discos_salt_vinegar.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'14-discos_salt_vinegar.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\x05\x0c&\x1d\n\xfc\x80'
tRp765
sa(dp766
g64
g65
sg82
S'15-walnut_whip.png'
p767
sg83
S'28-maple_pecan.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'28-maple_pecan.png'
p772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\x05\x0c&$\x06I`'
tRp776
sa(dp777
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p778
sg83
S'37-nakd_cashew_cookie.png'
p779
sg56
g57
sS'practice_loop.thisN'
p780
I3
sS'practice_loop.thisTrialN'
p781
I3
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p782
I0
sg84
S'9-yu_mango_pieces.png'
p783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p784
sS'practice_loop.thisIndex'
p785
g60
(g99
S'\x03\x00\x00\x00'
tRp786
sg34
g753
(S'\x07\xdf\x07\x05\x0c&,\x0ekh'
tRp787
sa(dp788
g64
g65
sg82
S'12-topic.png'
p789
sg83
S'39-mackerel.png'
p790
sg56
g57
sS'practice_loop.thisN'
p791
I4
sS'practice_loop.thisTrialN'
p792
I4
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p793
I0
sg84
S'39-mackerel.png'
p794
sg33
g789
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p795
sS'practice_loop.thisIndex'
p796
g60
(g99
S'\x04\x00\x00\x00'
tRp797
sg34
g753
(S'\x07\xdf\x07\x05\x0c&5\x0es8'
tRp798
sa(dp799
g64
g65
sg82
S'53-cheestrings.png'
p800
sg83
S'47-picnic.png'
p801
sg56
g57
sS'practice_loop.thisN'
p802
I5
sS'practice_loop.thisTrialN'
p803
I5
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p804
I0
sg84
S'47-picnic.png'
p805
sg33
g800
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p806
sS'practice_loop.thisIndex'
p807
g60
(g99
S'\x05\x00\x00\x00'
tRp808
sg34
g753
(S"\x07\xdf\x07\x05\x0c'\x00\x08\x16P"
tRp809
sa(dp810
g64
g65
sg82
g744
sg83
S'54-frubes_yogurt.png'
p811
sg56
g57
sS'practice_loop.thisN'
p812
I6
sS'practice_loop.thisTrialN'
p813
I6
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p814
I0
sg84
g749
sg33
g749
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p815
sS'practice_loop.thisIndex'
p816
g60
(g99
S'\x06\x00\x00\x00'
tRp817
sg34
g753
(S"\x07\xdf\x07\x05\x0c'\x06\x0c8\xe8"
tRp818
sa(dp819
g64
g65
sg82
S'32-hovis_crackers.png'
p820
sg83
S'24-food_doctor_apple_walnut_bar.png'
p821
sg56
g57
sS'practice_loop.thisN'
p822
I7
sS'practice_loop.thisTrialN'
p823
I7
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p824
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p825
sg33
g825
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p826
sS'practice_loop.thisIndex'
p827
g60
(g99
S'\x07\x00\x00\x00'
tRp828
sg34
g753
(S"\x07\xdf\x07\x05\x0c'\r\x01\x19@"
tRp829
sa(dp830
g64
g65
sg82
g778
sg83
S'9-yu_mango_pieces.png'
p831
sg56
g57
sS'practice_loop.thisN'
p832
I8
sS'practice_loop.thisTrialN'
p833
I8
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p834
I0
sg84
g783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p835
sS'practice_loop.thisIndex'
p836
g60
(g99
S'\x08\x00\x00\x00'
tRp837
sg34
g753
(S"\x07\xdf\x07\x05\x0c'\x15\t\xb8H"
tRp838
sa(dp839
g64
g65
sg82
g820
sg83
S'32-hovis_crackers.png'
p840
sg56
g57
sS'practice_loop.thisN'
p841
I9
sS'practice_loop.thisTrialN'
p842
I9
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p843
I0
sg84
g825
sg33
g820
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S"\x07\xdf\x07\x05\x0c'\x1d\x00\xf20"
tRp847
sa(dp848
g64
g65
sg82
g800
sg83
S'53-cheestrings.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g805
sg33
g800
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S"\x07\xdf\x07\x05\x0c'#\x07z\x10"
tRp856
sa(dp857
g64
g65
sg82
g767
sg83
S'15-walnut_whip.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g772
sg33
g772
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S"\x07\xdf\x07\x05\x0c')\x08\x83\xb0"
tRp865
sa(dp866
g64
g65
sg82
g756
sg83
S'52-aero_mousse.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S"\x07\xdf\x07\x05\x0c'/\n\x83h"
tRp874
sa(dp875
g64
g65
sg82
g789
sg83
S'12-topic.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g794
sg33
g789
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S"\x07\xdf\x07\x05\x0c'7\x04\x9b\xb0"
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F254.14255506221093
sg66
g67
sg68
g69
sg70
Vy
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vy
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'23-crunchie_redo.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'left'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'23-crunchie_redo.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'33-ambrosia_rice.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'33-ambrosia_rice.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vy
sS'block_loop.thisTrialN'
p912
I0
sg39
F4.3664716793182379
sg34
g753
(S"\x07\xdf\x07\x05\x0c0'\x05b\xe8"
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'35-raisins.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'left'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'35-raisins.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'49-yorkie.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg909
S'49-yorkie.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vy
sS'block_loop.thisTrialN'
p929
I0
sg39
F2.1833051182325107
sg34
g753
(S'\x07\xdf\x07\x05\x0c00\x0b\x1f\xa8'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'13-mccoys_steak_crisps.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'left'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'13-mccoys_steak_crisps.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'3-ellas_strawberries_apples.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
S'3-ellas_strawberries_apples.png'
p943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p944
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vy
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.4332895804454893
sg34
g753
(S'\x07\xdf\x07\x05\x0c07\x0e\x86\xc0'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'8-liquorice_catherine_wheels.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'right'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'17-jacobs_mini_cheddars_redo.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p960
I0
sg909
S'8-liquorice_catherine_wheels.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vy
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.0998070463438125
sg34
g753
(S'\x07\xdf\x07\x05\x0c1\x02\x06\x80\x10'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'26-walkers_smoky_bacon.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'left'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'26-walkers_smoky_bacon.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'44-crunch.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p977
I0
sg909
S'44-crunch.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vy
sS'block_loop.thisTrialN'
p980
I0
sg39
F1.3336590091512335
sg34
g753
(S'\x07\xdf\x07\x05\x0c1\x08\x08\x7f\xc8'
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
S'36-fig_rolls.png'
p984
sS'block_loop.thisIndex'
p985
g889
sg38
S'left'
p986
sg59
g63
sS'trial_loop.thisN'
p987
I5
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p988
sg64
g65
sS'trial_loop.thisIndex'
p989
g60
(g99
S'\x05\x00\x00\x00'
tRp990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p991
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p992
sS'block_loop.thisRepN'
p993
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p994
I0
sg909
S'36-fig_rolls.png'
p995
sg55
g11
sS'block_loop.thisTrial'
p996
Nsg70
Vy
sS'block_loop.thisTrialN'
p997
I0
sg39
F2.1666041353892069
sg34
g753
(S'\x07\xdf\x07\x05\x0c1\x0e\x0e\r\xa8'
tRp998
sa(dp999
S'trial_loop.thisTrialN'
p1000
I6
sg895
S'5-pineapple.png'
p1001
sS'block_loop.thisIndex'
p1002
g889
sg38
S'left'
p1003
sg59
g63
sS'trial_loop.thisN'
p1004
I6
sg33
S'40-sardines.png'
p1005
sg64
g65
sS'trial_loop.thisIndex'
p1006
g60
(g99
S'\x06\x00\x00\x00'
tRp1007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1008
I0
sg904
S'40-sardines.png'
p1009
sS'block_loop.thisRepN'
p1010
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1011
I0
sg909
S'5-pineapple.png'
p1012
sg55
g11
sS'block_loop.thisTrial'
p1013
Nsg70
Vy
sS'block_loop.thisTrialN'
p1014
I0
sg39
F1.2000229217997003
sg34
g753
(S'\x07\xdf\x07\x05\x0c1\x16\x01\xb9h'
tRp1015
sa(dp1016
S'trial_loop.thisTrialN'
p1017
I7
sg895
S'1-treacle_cookies.png'
p1018
sS'block_loop.thisIndex'
p1019
g889
sg38
S'right'
p1020
sg59
g63
sS'trial_loop.thisN'
p1021
I7
sg33
S'1-treacle_cookies.png'
p1022
sg64
g65
sS'trial_loop.thisIndex'
p1023
g60
(g99
S'\x07\x00\x00\x00'
tRp1024
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1025
I0
sg904
S'21-nakd_banana_crunch.png'
p1026
sS'block_loop.thisRepN'
p1027
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1028
I0
sg909
S'21-nakd_banana_crunch.png'
p1029
sg55
g11
sS'block_loop.thisTrial'
p1030
Nsg70
Vy
sS'block_loop.thisTrialN'
p1031
I0
sg39
F1.2999836354315448
sg34
g753
(S'\x07\xdf\x07\x05\x0c1\x1c\x05b\xe8'
tRp1032
sa(dp1033
S'trial_loop.thisTrialN'
p1034
I8
sg895
S'46-pistachios.png'
p1035
sS'block_loop.thisIndex'
p1036
g889
sg38
S'left'
p1037
sg59
g63
sS'trial_loop.thisN'
p1038
I8
sg33
S'46-pistachios.png'
p1039
sg64
g65
sS'trial_loop.thisIndex'
p1040
g60
(g99
S'\x08\x00\x00\x00'
tRp1041
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1042
I0
sg904
S'29-beans.png'
p1043
sS'block_loop.thisRepN'
p1044
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1045
I0
sg909
S'29-beans.png'
p1046
sg55
g11
sS'block_loop.thisTrial'
p1047
Nsg70
Vy
sS'block_loop.thisTrialN'
p1048
I0
sg39
F1.3165625967544656
sg34
g753
(S'\x07\xdf\x07\x05\x0c1"\n{\x98'
tRp1049
sa(dp1050
S'trial_loop.thisTrialN'
p1051
I9
sg895
S'38-maltesers.png'
p1052
sS'block_loop.thisIndex'
p1053
g889
sg38
S'left'
p1054
sg59
g63
sS'trial_loop.thisN'
p1055
I9
sg33
S'38-maltesers.png'
p1056
sg64
g65
sS'trial_loop.thisIndex'
p1057
g60
(g99
S'\t\x00\x00\x00'
tRp1058
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1059
I0
sg904
S'6-sour_patch_kids.png'
p1060
sS'block_loop.thisRepN'
p1061
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1062
I0
sg909
S'6-sour_patch_kids.png'
p1063
sg55
g11
sS'block_loop.thisTrial'
p1064
Nsg70
Vy
sS'block_loop.thisTrialN'
p1065
I0
sg39
F1.4664035981522829
sg34
g753
(S'\x07\xdf\x07\x05\x0c1)\x00\x8c\xa0'
tRp1066
sa(dp1067
S'trial_loop.thisTrialN'
p1068
I10
sg895
S'20-fruit_pastilles.png'
p1069
sS'block_loop.thisIndex'
p1070
g889
sg38
S'right'
p1071
sg59
g63
sS'trial_loop.thisN'
p1072
I10
sg33
S'20-fruit_pastilles.png'
p1073
sg64
g65
sS'trial_loop.thisIndex'
p1074
g60
(g99
S'\n\x00\x00\x00'
tRp1075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1076
I0
sg904
S'2-steamed_puddings.png'
p1077
sS'block_loop.thisRepN'
p1078
I0
sg907
S'2-steamed_puddings.png'
p1079
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1080
I0
sg909
g1073
sg55
g11
sS'block_loop.thisTrial'
p1081
Nsg70
Vy
sS'block_loop.thisTrialN'
p1082
I0
sg39
F1.3165831237392922
sg34
g753
(S'\x07\xdf\x07\x05\x0c1/\x08AH'
tRp1083
sa(dp1084
S'trial_loop.thisTrialN'
p1085
I11
sg895
S'43-mrporky_pork_crackles_redo.png'
p1086
sS'block_loop.thisIndex'
p1087
g889
sg38
S'right'
p1088
sg59
g63
sS'trial_loop.thisN'
p1089
I11
sg33
S'43-mrporky_pork_crackles_redo.png'
p1090
sg64
g65
sS'trial_loop.thisIndex'
p1091
g60
(g99
S'\x0b\x00\x00\x00'
tRp1092
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1093
I0
sg904
S'18-mms.png'
p1094
sS'block_loop.thisRepN'
p1095
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1096
I0
sg909
S'18-mms.png'
p1097
sg55
g11
sS'block_loop.thisTrial'
p1098
Nsg70
Vy
sS'block_loop.thisTrialN'
p1099
I0
sg39
F2.9332257187152209
sg34
g753
(S'\x07\xdf\x07\x05\x0c15\r\x94\x90'
tRp1100
sa(dp1101
S'trial_loop.thisTrialN'
p1102
I12
sg895
S'40-sardines.png'
p1103
sS'block_loop.thisIndex'
p1104
g889
sg38
S'left'
p1105
sg59
g63
sS'trial_loop.thisN'
p1106
I12
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1107
g60
(g99
S'\x0c\x00\x00\x00'
tRp1108
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1109
I0
sg904
S'5-pineapple.png'
p1110
sS'block_loop.thisRepN'
p1111
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1112
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1113
Nsg70
Vy
sS'block_loop.thisTrialN'
p1114
I0
sg39
F1.3332510353297948
sg34
g753
(S'\x07\xdf\x07\x05\x0c2\x01\x0c\xe8\xb0'
tRp1115
sa(dp1116
S'trial_loop.thisTrialN'
p1117
I13
sg895
S'50-polo.png'
p1118
sS'block_loop.thisIndex'
p1119
g889
sg38
S'right'
p1120
sg59
g63
sS'trial_loop.thisN'
p1121
I13
sg33
S'48-twix.png'
p1122
sg64
g65
sS'trial_loop.thisIndex'
p1123
g60
(g99
S'\r\x00\x00\x00'
tRp1124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1125
I0
sg904
S'48-twix.png'
p1126
sS'block_loop.thisRepN'
p1127
I0
sg907
g1122
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1128
I0
sg909
S'50-polo.png'
p1129
sg55
g11
sS'block_loop.thisTrial'
p1130
Nsg70
Vy
sS'block_loop.thisTrialN'
p1131
I0
sg39
F1.8332889532321133
sg34
g753
(S'\x07\xdf\x07\x05\x0c2\x08\x03v\xb8'
tRp1132
sa(dp1133
S'trial_loop.thisTrialN'
p1134
I14
sg895
S'21-nakd_banana_crunch.png'
p1135
sS'block_loop.thisIndex'
p1136
g889
sg38
S'right'
p1137
sg59
g63
sS'trial_loop.thisN'
p1138
I14
sg33
g1029
sg64
g65
sS'trial_loop.thisIndex'
p1139
g60
(g99
S'\x0e\x00\x00\x00'
tRp1140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1141
I0
sg904
S'1-treacle_cookies.png'
p1142
sS'block_loop.thisRepN'
p1143
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1144
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1145
Nsg70
Vy
sS'block_loop.thisTrialN'
p1146
I0
sg39
F1.0170103130990356
sg34
g753
(S'\x07\xdf\x07\x05\x0c2\x0f\x01cx'
tRp1147
sa(dp1148
S'trial_loop.thisTrialN'
p1149
I15
sg895
S'10-bounty_redo.png'
p1150
sS'block_loop.thisIndex'
p1151
g889
sg38
S'left'
p1152
sg59
g63
sS'trial_loop.thisN'
p1153
I15
sg33
S'4-corn.png'
p1154
sg64
g65
sS'trial_loop.thisIndex'
p1155
g60
(g99
S'\x0f\x00\x00\x00'
tRp1156
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1157
I0
sg904
S'4-corn.png'
p1158
sS'block_loop.thisRepN'
p1159
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1160
I0
sg909
S'10-bounty_redo.png'
p1161
sg55
g11
sS'block_loop.thisTrial'
p1162
Nsg70
Vy
sS'block_loop.thisTrialN'
p1163
I0
sg39
F1.9998856760989838
sg34
g753
(S'\x07\xdf\x07\x05\x0c2\x15\x01\xf4\x00'
tRp1164
sa(dp1165
S'trial_loop.thisTrialN'
p1166
I16
sg895
S'27-hartleys_raspberries_jelly.png'
p1167
sS'block_loop.thisIndex'
p1168
g889
sg38
S'right'
p1169
sg59
g63
sS'trial_loop.thisN'
p1170
I16
sg33
S'27-hartleys_raspberries_jelly.png'
p1171
sg64
g65
sS'trial_loop.thisIndex'
p1172
g60
(g99
S'\x10\x00\x00\x00'
tRp1173
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1174
I0
sg904
S'51-mars.png'
p1175
sS'block_loop.thisRepN'
p1176
I0
sg907
g1171
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1177
I0
sg909
S'51-mars.png'
p1178
sg55
g11
sS'block_loop.thisTrial'
p1179
Nsg70
Vy
sS'block_loop.thisTrialN'
p1180
I0
sg39
F1.3831316081923433
sg34
g753
(S'\x07\xdf\x07\x05\x0c2\x1c\x02|\xb8'
tRp1181
sa(dp1182
S'trial_loop.thisTrialN'
p1183
I17
sg895
S'25-kitkat.png'
p1184
sS'block_loop.thisIndex'
p1185
g889
sg38
S'right'
p1186
sg59
g63
sS'trial_loop.thisN'
p1187
I17
sg33
S'25-kitkat.png'
p1188
sg64
g65
sS'trial_loop.thisIndex'
p1189
g60
(g99
S'\x11\x00\x00\x00'
tRp1190
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1191
I0
sg904
S'31-hobnobs.png'
p1192
sS'block_loop.thisRepN'
p1193
I0
sg907
S'31-hobnobs.png'
p1194
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1195
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p1196
Nsg70
Vy
sS'block_loop.thisTrialN'
p1197
I0
sg39
F1.3332310785390291
sg34
g753
(S'\x07\xdf\x07\x05\x0c2"\t\x04\x98'
tRp1198
sa(dp1199
S'trial_loop.thisTrialN'
p1200
I18
sg895
g1150
sS'block_loop.thisIndex'
p1201
g889
sg38
S'right'
p1202
sg59
g63
sS'trial_loop.thisN'
p1203
I18
sg33
g1154
sg64
g65
sS'trial_loop.thisIndex'
p1204
g60
(g99
S'\x12\x00\x00\x00'
tRp1205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1206
I0
sg904
g1158
sS'block_loop.thisRepN'
p1207
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1208
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p1209
Nsg70
Vy
sS'block_loop.thisTrialN'
p1210
I0
sg39
F1.2165864878843422
sg34
g753
(S'\x07\xdf\x07\x05\x0c2(\x0e\x96`'
tRp1211
sa(dp1212
S'trial_loop.thisTrialN'
p1213
I19
sg895
S'2-steamed_puddings.png'
p1214
sS'block_loop.thisIndex'
p1215
g889
sg38
S'right'
p1216
sg59
g63
sS'trial_loop.thisN'
p1217
I19
sg33
g1073
sg64
g65
sS'trial_loop.thisIndex'
p1218
g60
(g99
S'\x13\x00\x00\x00'
tRp1219
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1220
I0
sg904
S'20-fruit_pastilles.png'
p1221
sS'block_loop.thisRepN'
p1222
I0
sg907
g1079
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1223
I0
sg909
g1073
sg55
g11
sS'block_loop.thisTrial'
p1224
Nsg70
Vy
sS'block_loop.thisTrialN'
p1225
I0
sg39
F1.7832567087602911
sg34
g753
(S'\x07\xdf\x07\x05\x0c2/\x02\xfd\xa0'
tRp1226
sa(dp1227
S'trial_loop.thisTrialN'
p1228
I20
sg895
S'3-ellas_strawberries_apples.png'
p1229
sS'block_loop.thisIndex'
p1230
g889
sg38
S'right'
p1231
sg59
g63
sS'trial_loop.thisN'
p1232
I20
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p1233
g60
(g99
S'\x14\x00\x00\x00'
tRp1234
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1235
I0
sg904
S'13-mccoys_steak_crisps.png'
p1236
sS'block_loop.thisRepN'
p1237
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1238
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p1239
Nsg70
Vy
sS'block_loop.thisTrialN'
p1240
I0
sg39
F2.9833397860293189
sg34
g753
(S'\x07\xdf\x07\x05\x0c26\x002\xc8'
tRp1241
sa(dp1242
S'trial_loop.thisTrialN'
p1243
I21
sg895
g1035
sS'block_loop.thisIndex'
p1244
g889
sg38
S'left'
p1245
sg59
g63
sS'trial_loop.thisN'
p1246
I21
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p1247
g60
(g99
S'\x15\x00\x00\x00'
tRp1248
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1249
I0
sg904
g1043
sS'block_loop.thisRepN'
p1250
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1251
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p1252
Nsg70
Vy
sS'block_loop.thisTrialN'
p1253
I0
sg39
F4.3998653771918725
sg34
g753
(S'\x07\xdf\x07\x05\x0c3\x02\x00y\x18'
tRp1254
sa(dp1255
S'trial_loop.thisTrialN'
p1256
I22
sg895
S'7-olives.png'
p1257
sS'block_loop.thisIndex'
p1258
g889
sg38
S'left'
p1259
sg59
g63
sS'trial_loop.thisN'
p1260
I22
sg33
S'7-olives.png'
p1261
sg64
g65
sS'trial_loop.thisIndex'
p1262
g60
(g99
S'\x16\x00\x00\x00'
tRp1263
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1264
I0
sg904
S'22-daim.png'
p1265
sS'block_loop.thisRepN'
p1266
I0
sg907
g1261
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1267
I0
sg909
S'22-daim.png'
p1268
sg55
g11
sS'block_loop.thisTrial'
p1269
Nsg70
Vy
sS'block_loop.thisTrialN'
p1270
I0
sg39
F1.3332995018213296
sg34
g753
(S'\x07\xdf\x07\x05\x0c3\x0b\x07(\x08'
tRp1271
sa(dp1272
S'trial_loop.thisTrialN'
p1273
I23
sg895
g1167
sS'block_loop.thisIndex'
p1274
g889
sg38
S'left'
p1275
sg59
g63
sS'trial_loop.thisN'
p1276
I23
sg33
g1171
sg64
g65
sS'trial_loop.thisIndex'
p1277
g60
(g99
S'\x17\x00\x00\x00'
tRp1278
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1279
I0
sg904
g1175
sS'block_loop.thisRepN'
p1280
I0
sg907
g1171
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1281
I0
sg909
g1178
sg55
g11
sS'block_loop.thisTrial'
p1282
Nsg70
Vy
sS'block_loop.thisTrialN'
p1283
I0
sg39
F2.3002598944344754
sg34
g753
(S'\x07\xdf\x07\x05\x0c3\x11\x0c\xb9\xd0'
tRp1284
sa(dp1285
S'trial_loop.thisTrialN'
p1286
I24
sg895
g1018
sS'block_loop.thisIndex'
p1287
g889
sg38
S'left'
p1288
sg59
g63
sS'trial_loop.thisN'
p1289
I24
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1290
g60
(g99
S'\x18\x00\x00\x00'
tRp1291
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1292
I0
sg904
g1026
sS'block_loop.thisRepN'
p1293
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1294
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1295
Nsg70
Vy
sS'block_loop.thisTrialN'
p1296
I0
sg39
F1.4831958120389572
sg34
g753
(S'\x07\xdf\x07\x05\x0c3\x19\x02\x88p'
tRp1297
sa(dp1298
S'trial_loop.thisTrialN'
p1299
I25
sg895
S'33-ambrosia_rice.png'
p1300
sS'block_loop.thisIndex'
p1301
g889
sg38
S'right'
p1302
sg59
g63
sS'trial_loop.thisN'
p1303
I25
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1304
g60
(g99
S'\x19\x00\x00\x00'
tRp1305
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1306
I0
sg904
S'23-crunchie_redo.png'
p1307
sS'block_loop.thisRepN'
p1308
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1309
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1310
Nsg70
Vy
sS'block_loop.thisTrialN'
p1311
I0
sg39
F1.5998626402606533
sg34
g753
(S'\x07\xdf\x07\x05\x0c3\x1f\n{\x98'
tRp1312
sa(dp1313
S'trial_loop.thisTrialN'
p1314
I26
sg895
g916
sS'block_loop.thisIndex'
p1315
g889
sg38
S'left'
p1316
sg59
g63
sS'trial_loop.thisN'
p1317
I26
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1318
g60
(g99
S'\x1a\x00\x00\x00'
tRp1319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1320
I0
sg904
g924
sS'block_loop.thisRepN'
p1321
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1322
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1323
Nsg70
Vy
sS'block_loop.thisTrialN'
p1324
I0
sg39
F2.433329494026566
sg34
g753
(S'\x07\xdf\x07\x05\x0c3&\x04\xd6H'
tRp1325
sa(dp1326
S'trial_loop.thisTrialN'
p1327
I27
sg895
g1118
sS'block_loop.thisIndex'
p1328
g889
sg38
S'right'
p1329
sg59
g63
sS'trial_loop.thisN'
p1330
I27
sg33
g1122
sg64
g65
sS'trial_loop.thisIndex'
p1331
g60
(g99
S'\x1b\x00\x00\x00'
tRp1332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1333
I0
sg904
g1126
sS'block_loop.thisRepN'
p1334
I0
sg907
g1122
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1335
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p1336
Nsg70
Vy
sS'block_loop.thisTrialN'
p1337
I0
sg39
F1.0665570373630544
sg34
g753
(S'\x07\xdf\x07\x05\x0c3-\x0c\n\x08'
tRp1338
sa(dp1339
S'trial_loop.thisTrialN'
p1340
I28
sg895
S'19-caramello_redo.png'
p1341
sS'block_loop.thisIndex'
p1342
g889
sg38
S'left'
p1343
sg59
g63
sS'trial_loop.thisN'
p1344
I28
sg33
S'30-spaghetti_hoops.png'
p1345
sg64
g65
sS'trial_loop.thisIndex'
p1346
g60
(g99
S'\x1c\x00\x00\x00'
tRp1347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1348
I0
sg904
S'30-spaghetti_hoops.png'
p1349
sS'block_loop.thisRepN'
p1350
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1351
I0
sg909
S'19-caramello_redo.png'
p1352
sg55
g11
sS'block_loop.thisTrial'
p1353
Nsg70
Vy
sS'block_loop.thisTrialN'
p1354
I0
sg39
F1.3004072895882928
sg34
g753
(S'\x07\xdf\x07\x05\x0c33\r\x90\xa8'
tRp1355
sa(dp1356
S'trial_loop.thisTrialN'
p1357
I29
sg895
S'29-beans.png'
p1358
sS'block_loop.thisIndex'
p1359
g889
sg38
S'right'
p1360
sg59
g63
sS'trial_loop.thisN'
p1361
I29
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p1362
g60
(g99
S'\x1d\x00\x00\x00'
tRp1363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1364
I0
sg904
S'46-pistachios.png'
p1365
sS'block_loop.thisRepN'
p1366
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1367
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p1368
Nsg70
Vy
sS'block_loop.thisTrialN'
p1369
I0
sg39
F0.89976530814101352
sg34
g753
(S'\x07\xdf\x07\x05\x0c3:\x03c0'
tRp1370
sa(dp1371
S'trial_loop.thisTrialN'
p1372
I30
sg895
g1086
sS'block_loop.thisIndex'
p1373
g889
sg38
S'right'
p1374
sg59
g63
sS'trial_loop.thisN'
p1375
I30
sg33
g1090
sg64
g65
sS'trial_loop.thisIndex'
p1376
g60
(g99
S'\x1e\x00\x00\x00'
tRp1377
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1378
I0
sg904
g1094
sS'block_loop.thisRepN'
p1379
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1380
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p1381
Nsg70
Vy
sS'block_loop.thisTrialN'
p1382
I0
sg39
F1.1166023962973668
sg34
g753
(S'\x07\xdf\x07\x05\x0c4\x04\x02I\xf0'
tRp1383
sa(dp1384
S'trial_loop.thisTrialN'
p1385
I31
sg895
g1118
sS'block_loop.thisIndex'
p1386
g889
sg38
S'right'
p1387
sg59
g63
sS'trial_loop.thisN'
p1388
I31
sg33
g1122
sg64
g65
sS'trial_loop.thisIndex'
p1389
g60
(g99
S'\x1f\x00\x00\x00'
tRp1390
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1391
I0
sg904
g1126
sS'block_loop.thisRepN'
p1392
I0
sg907
g1122
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1393
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p1394
Nsg70
Vy
sS'block_loop.thisTrialN'
p1395
I0
sg39
F0.99995638015752775
sg34
g753
(S'\x07\xdf\x07\x05\x0c4\n\x04\x88('
tRp1396
sa(dp1397
S'trial_loop.thisTrialN'
p1398
I32
sg895
S'49-yorkie.png'
p1399
sS'block_loop.thisIndex'
p1400
g889
sg38
S'right'
p1401
sg59
g63
sS'trial_loop.thisN'
p1402
I32
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1403
g60
(g99
S' \x00\x00\x00'
tRp1404
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1405
I0
sg904
S'35-raisins.png'
p1406
sS'block_loop.thisRepN'
p1407
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1408
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1409
Nsg70
Vy
sS'block_loop.thisTrialN'
p1410
I0
sg39
F1.4832756392020201
sg34
g753
(S'\x07\xdf\x07\x05\x0c4\x10\x05\x18\xb0'
tRp1411
sa(dp1412
S'trial_loop.thisTrialN'
p1413
I33
sg895
g1214
sS'block_loop.thisIndex'
p1414
g889
sg38
S'right'
p1415
sg59
g63
sS'trial_loop.thisN'
p1416
I33
sg33
g1079
sg64
g65
sS'trial_loop.thisIndex'
p1417
g60
(g99
S'!\x00\x00\x00'
tRp1418
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1419
I0
sg904
g1221
sS'block_loop.thisRepN'
p1420
I0
sg907
g1079
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1421
I0
sg909
g1073
sg55
g11
sS'block_loop.thisTrial'
p1422
Nsg70
Vy
sS'block_loop.thisTrialN'
p1423
I0
sg39
F1.8502160180046303
sg34
g753
(S'\x07\xdf\x07\x05\x0c4\x16\r\x0b\xd8'
tRp1424
sa(dp1425
S'trial_loop.thisTrialN'
p1426
I34
sg895
g967
sS'block_loop.thisIndex'
p1427
g889
sg38
S'left'
p1428
sg59
g63
sS'trial_loop.thisN'
p1429
I34
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1430
g60
(g99
S'"\x00\x00\x00'
tRp1431
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1432
I0
sg904
g975
sS'block_loop.thisRepN'
p1433
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1434
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1435
Nsg70
Vy
sS'block_loop.thisTrialN'
p1436
I0
sg39
F1.0499478557567272
sg34
g753
(S'\x07\xdf\x07\x05\x0c4\x1d\x0b7\x18'
tRp1437
sa(dp1438
S'trial_loop.thisTrialN'
p1439
I35
sg895
S'41-peanuts_redo.png'
p1440
sS'block_loop.thisIndex'
p1441
g889
sg38
S'left'
p1442
sg59
g63
sS'trial_loop.thisN'
p1443
I35
sg33
S'45-chewy_nougat_redo.png'
p1444
sg64
g65
sS'trial_loop.thisIndex'
p1445
g60
(g99
S'#\x00\x00\x00'
tRp1446
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1447
I0
sg904
S'45-chewy_nougat_redo.png'
p1448
sS'block_loop.thisRepN'
p1449
I0
sg907
S'41-peanuts_redo.png'
p1450
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1451
I0
sg909
g1444
sg55
g11
sS'block_loop.thisTrial'
p1452
Nsg70
Vy
sS'block_loop.thisTrialN'
p1453
I0
sg39
F1.0666294520037809
sg34
g753
(S'\x07\xdf\x07\x05\x0c4#\x0c\x7f8'
tRp1454
sa(dp1455
S'trial_loop.thisTrialN'
p1456
I36
sg895
g1018
sS'block_loop.thisIndex'
p1457
g889
sg38
S'left'
p1458
sg59
g63
sS'trial_loop.thisN'
p1459
I36
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1460
g60
(g99
S'$\x00\x00\x00'
tRp1461
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1462
I0
sg904
g1026
sS'block_loop.thisRepN'
p1463
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1464
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1465
Nsg70
Vy
sS'block_loop.thisTrialN'
p1466
I0
sg39
F0.71652262615407381
sg34
g753
(S'\x07\xdf\x07\x05\x0c4)\x0e\x01\xf0'
tRp1467
sa(dp1468
S'trial_loop.thisTrialN'
p1469
I37
sg895
S'17-jacobs_mini_cheddars_redo.png'
p1470
sS'block_loop.thisIndex'
p1471
g889
sg38
S'left'
p1472
sg59
g63
sS'trial_loop.thisN'
p1473
I37
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1474
g60
(g99
S'%\x00\x00\x00'
tRp1475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1476
I0
sg904
S'8-liquorice_catherine_wheels.png'
p1477
sS'block_loop.thisRepN'
p1478
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1479
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1480
Nsg70
Vy
sS'block_loop.thisTrialN'
p1481
I0
sg39
F0.849961426374648
sg34
g753
(S'\x07\xdf\x07\x05\x0c4/\nL\xb8'
tRp1482
sa(dp1483
S'trial_loop.thisTrialN'
p1484
I38
sg895
g1035
sS'block_loop.thisIndex'
p1485
g889
sg38
S'left'
p1486
sg59
g63
sS'trial_loop.thisN'
p1487
I38
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p1488
g60
(g99
S'&\x00\x00\x00'
tRp1489
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1490
I0
sg904
g1043
sS'block_loop.thisRepN'
p1491
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1492
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p1493
Nsg70
Vy
sS'block_loop.thisTrialN'
p1494
I0
sg39
F0.74993941688535415
sg34
g753
(S'\x07\xdf\x07\x05\x0c45\x08{\xe0'
tRp1495
sa(dp1496
S'trial_loop.thisTrialN'
p1497
I39
sg895
g916
sS'block_loop.thisIndex'
p1498
g889
sg38
S'left'
p1499
sg59
g63
sS'trial_loop.thisN'
p1500
I39
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1501
g60
(g99
S"'\x00\x00\x00"
tRp1502
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1503
I0
sg904
g924
sS'block_loop.thisRepN'
p1504
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1505
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1506
Nsg70
Vy
sS'block_loop.thisTrialN'
p1507
I0
sg39
F0.76667888782503724
sg34
g753
(S'\x07\xdf\x07\x05\x0c4;\x05\x01@'
tRp1508
sa(dp1509
S'trial_loop.thisTrialN'
p1510
I40
sg895
g1118
sS'block_loop.thisIndex'
p1511
g889
sg38
S'right'
p1512
sg59
g63
sS'trial_loop.thisN'
p1513
I40
sg33
g1122
sg64
g65
sS'trial_loop.thisIndex'
p1514
g60
(g99
S'(\x00\x00\x00'
tRp1515
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1516
I0
sg904
g1126
sS'block_loop.thisRepN'
p1517
I0
sg907
g1122
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1518
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p1519
Nsg70
Vy
sS'block_loop.thisTrialN'
p1520
I0
sg39
F0.76666634355706265
sg34
g753
(S'\x07\xdf\x07\x05\x0c5\x05\x01\xff\xb8'
tRp1521
sa(dp1522
S'trial_loop.thisTrialN'
p1523
I41
sg895
g1001
sS'block_loop.thisIndex'
p1524
g889
sg38
S'right'
p1525
sg59
g63
sS'trial_loop.thisN'
p1526
I41
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1527
g60
(g99
S')\x00\x00\x00'
tRp1528
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1529
I0
sg904
g1009
sS'block_loop.thisRepN'
p1530
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1531
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1532
Nsg70
Vy
sS'block_loop.thisTrialN'
p1533
I0
sg39
F1.2666600714223932
sg34
g753
(S'\x07\xdf\x07\x05\x0c5\n\x0e@p'
tRp1534
sa(dp1535
S'trial_loop.thisTrialN'
p1536
I42
sg895
S'16-skips_prawn.png'
p1537
sS'block_loop.thisIndex'
p1538
g889
sg38
S'right'
p1539
sg59
g63
sS'trial_loop.thisN'
p1540
I42
sg33
S'16-skips_prawn.png'
p1541
sg64
g65
sS'trial_loop.thisIndex'
p1542
g60
(g99
S'*\x00\x00\x00'
tRp1543
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1544
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1545
sS'block_loop.thisRepN'
p1546
I0
sg907
g1541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1547
I0
sg909
S'42-mrkipling_lemon_slices.png'
p1548
sg55
g11
sS'block_loop.thisTrial'
p1549
Nsg70
Vy
sS'block_loop.thisTrialN'
p1550
I0
sg39
F2.8498391197572346
sg34
g753
(S'\x07\xdf\x07\x05\x0c5\x11\x03\x9d\xc8'
tRp1551
sa(dp1552
S'trial_loop.thisTrialN'
p1553
I43
sg895
g1214
sS'block_loop.thisIndex'
p1554
g889
sg38
S'right'
p1555
sg59
g63
sS'trial_loop.thisN'
p1556
I43
sg33
g1079
sg64
g65
sS'trial_loop.thisIndex'
p1557
g60
(g99
S'+\x00\x00\x00'
tRp1558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1559
I0
sg904
g1221
sS'block_loop.thisRepN'
p1560
I0
sg907
g1079
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1561
I0
sg909
g1073
sg55
g11
sS'block_loop.thisTrial'
p1562
Nsg70
Vy
sS'block_loop.thisTrialN'
p1563
I0
sg39
F0.86658201186128281
sg34
g753
(S'\x07\xdf\x07\x05\x0c5\x19\x01\xc18'
tRp1564
sa(dp1565
S'trial_loop.thisTrialN'
p1566
I44
sg895
g1001
sS'block_loop.thisIndex'
p1567
g889
sg38
S'right'
p1568
sg59
g63
sS'trial_loop.thisN'
p1569
I44
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1570
g60
(g99
S',\x00\x00\x00'
tRp1571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1572
I0
sg904
g1009
sS'block_loop.thisRepN'
p1573
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1574
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1575
Nsg70
Vy
sS'block_loop.thisTrialN'
p1576
I0
sg39
F1.1670109688225239
sg34
g753
(S'\x07\xdf\x07\x05\x0c5\x1f\x00*\xf8'
tRp1577
sa(dp1578
S'trial_loop.thisTrialN'
p1579
I45
sg895
S'18-mms.png'
p1580
sS'block_loop.thisIndex'
p1581
g889
sg38
S'right'
p1582
sg59
g63
sS'trial_loop.thisN'
p1583
I45
sg33
g1090
sg64
g65
sS'trial_loop.thisIndex'
p1584
g60
(g99
S'-\x00\x00\x00'
tRp1585
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1586
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1587
sS'block_loop.thisRepN'
p1588
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1589
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p1590
Nsg70
Vy
sS'block_loop.thisTrialN'
p1591
I0
sg39
F1.2833279830128959
sg34
g753
(S'\x07\xdf\x07\x05\x0c5%\x03[`'
tRp1592
sa(dp1593
S'trial_loop.thisTrialN'
p1594
I46
sg895
g1257
sS'block_loop.thisIndex'
p1595
g889
sg38
S'left'
p1596
sg59
g63
sS'trial_loop.thisN'
p1597
I46
sg33
g1261
sg64
g65
sS'trial_loop.thisIndex'
p1598
g60
(g99
S'.\x00\x00\x00'
tRp1599
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1600
I0
sg904
g1265
sS'block_loop.thisRepN'
p1601
I0
sg907
g1261
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1602
I0
sg909
g1268
sg55
g11
sS'block_loop.thisTrial'
p1603
Nsg70
Vy
sS'block_loop.thisTrialN'
p1604
I0
sg39
F0.89995803372039518
sg34
g753
(S'\x07\xdf\x07\x05\x0c5+\x085\x90'
tRp1605
sa(dp1606
S'trial_loop.thisTrialN'
p1607
I47
sg895
S'6-sour_patch_kids.png'
p1608
sS'block_loop.thisIndex'
p1609
g889
sg38
S'right'
p1610
sg59
g63
sS'trial_loop.thisN'
p1611
I47
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p1612
g60
(g99
S'/\x00\x00\x00'
tRp1613
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1614
I0
sg904
S'38-maltesers.png'
p1615
sS'block_loop.thisRepN'
p1616
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1617
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p1618
Nsg70
Vy
sS'block_loop.thisTrialN'
p1619
I0
sg39
F1.0996562300251753
sg34
g753
(S'\x07\xdf\x07\x05\x0c51\x07\x1cP'
tRp1620
sa(dp1621
S'trial_loop.thisTrialN'
p1622
I48
sg895
S'31-hobnobs.png'
p1623
sS'block_loop.thisIndex'
p1624
g889
sg38
S'right'
p1625
sg59
g63
sS'trial_loop.thisN'
p1626
I48
sg33
g1194
sg64
g65
sS'trial_loop.thisIndex'
p1627
g60
(g99
S'0\x00\x00\x00'
tRp1628
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1629
I0
sg904
S'25-kitkat.png'
p1630
sS'block_loop.thisRepN'
p1631
I0
sg907
g1194
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1632
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p1633
Nsg70
Vy
sS'block_loop.thisTrialN'
p1634
I0
sg39
F1.3665717483690969
sg34
g753
(S'\x07\xdf\x07\x05\x0c57\t\x1c\x08'
tRp1635
sa(dp1636
S'trial_loop.thisTrialN'
p1637
I49
sg895
g1150
sS'block_loop.thisIndex'
p1638
g889
sg38
S'right'
p1639
sg59
g63
sS'trial_loop.thisN'
p1640
I49
sg33
g1154
sg64
g65
sS'trial_loop.thisIndex'
p1641
g60
(g99
S'1\x00\x00\x00'
tRp1642
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1643
I0
sg904
g1158
sS'block_loop.thisRepN'
p1644
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1645
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p1646
Nsg70
Vy
sS'block_loop.thisTrialN'
p1647
I0
sg39
F1.4000016535624127
sg34
g753
(S'\x07\xdf\x07\x05\x0c6\x01\x0f&\xe8'
tRp1648
sa(dp1649
S'trial_loop.thisTrialN'
p1650
I50
sg895
g1001
sS'block_loop.thisIndex'
p1651
g889
sg38
S'right'
p1652
sg59
g63
sS'trial_loop.thisN'
p1653
I50
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p1654
g60
(g99
S'2\x00\x00\x00'
tRp1655
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1656
I0
sg904
g1009
sS'block_loop.thisRepN'
p1657
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1658
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1659
Nsg70
Vy
sS'block_loop.thisTrialN'
p1660
I0
sg39
F1.0332773782934055
sg34
g753
(S'\x07\xdf\x07\x05\x0c6\x08\x06\xa7 '
tRp1661
sa(dp1662
S'trial_loop.thisTrialN'
p1663
I51
sg895
g1358
sS'block_loop.thisIndex'
p1664
g889
sg38
S'right'
p1665
sg59
g63
sS'trial_loop.thisN'
p1666
I51
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p1667
g60
(g99
S'3\x00\x00\x00'
tRp1668
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1669
I0
sg904
g1365
sS'block_loop.thisRepN'
p1670
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1671
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p1672
Nsg70
Vy
sS'block_loop.thisTrialN'
p1673
I0
sg39
F1.4333257877656251
sg34
g753
(S'\x07\xdf\x07\x05\x0c6\x0e\x07\xb0\xc0'
tRp1674
sa(dp1675
S'trial_loop.thisTrialN'
p1676
I52
sg895
g1086
sS'block_loop.thisIndex'
p1677
g889
sg38
S'left'
p1678
sg59
g63
sS'trial_loop.thisN'
p1679
I52
sg33
g1090
sg64
g65
sS'trial_loop.thisIndex'
p1680
g60
(g99
S'4\x00\x00\x00'
tRp1681
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1682
I0
sg904
g1094
sS'block_loop.thisRepN'
p1683
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1684
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p1685
Nsg70
Vy
sS'block_loop.thisTrialN'
p1686
I0
sg39
F0.79997023587247895
sg34
g753
(S'\x07\xdf\x07\x05\x0c6\x14\x0e\xb1\xb8'
tRp1687
sa(dp1688
S'trial_loop.thisTrialN'
p1689
I53
sg895
g933
sS'block_loop.thisIndex'
p1690
g889
sg38
S'left'
p1691
sg59
g63
sS'trial_loop.thisN'
p1692
I53
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1693
g60
(g99
S'5\x00\x00\x00'
tRp1694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1695
I0
sg904
g941
sS'block_loop.thisRepN'
p1696
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1697
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p1698
Nsg70
Vy
sS'block_loop.thisTrialN'
p1699
I0
sg39
F2.0332548556298207
sg34
g753
(S'\x07\xdf\x07\x05\x0c6\x1a\x0c)H'
tRp1700
sa(dp1701
S'trial_loop.thisTrialN'
p1702
I54
sg895
g1608
sS'block_loop.thisIndex'
p1703
g889
sg38
S'right'
p1704
sg59
g63
sS'trial_loop.thisN'
p1705
I54
sg33
g1063
sg64
g65
sS'trial_loop.thisIndex'
p1706
g60
(g99
S'6\x00\x00\x00'
tRp1707
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1708
I0
sg904
g1615
sS'block_loop.thisRepN'
p1709
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1710
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p1711
Nsg70
Vy
sS'block_loop.thisTrialN'
p1712
I0
sg39
F1.2497247388369033
sg34
g753
(S'\x07\xdf\x07\x05\x0c6!\r/\x00'
tRp1713
sa(dp1714
S'trial_loop.thisTrialN'
p1715
I55
sg895
S'48-twix.png'
p1716
sS'block_loop.thisIndex'
p1717
g889
sg38
S'left'
p1718
sg59
g63
sS'trial_loop.thisN'
p1719
I55
sg33
g1122
sg64
g65
sS'trial_loop.thisIndex'
p1720
g60
(g99
S'7\x00\x00\x00'
tRp1721
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1722
I0
sg904
S'50-polo.png'
p1723
sS'block_loop.thisRepN'
p1724
I0
sg907
g1122
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1725
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p1726
Nsg70
Vy
sS'block_loop.thisTrialN'
p1727
I0
sg39
F0.89994548945151109
sg34
g753
(S'\x07\xdf\x07\x05\x0c6(\x02M\xd8'
tRp1728
sa(dp1729
S'trial_loop.thisTrialN'
p1730
I56
sg895
g1069
sS'block_loop.thisIndex'
p1731
g889
sg38
S'left'
p1732
sg59
g63
sS'trial_loop.thisN'
p1733
I56
sg33
g1079
sg64
g65
sS'trial_loop.thisIndex'
p1734
g60
(g99
S'8\x00\x00\x00'
tRp1735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1736
I0
sg904
g1077
sS'block_loop.thisRepN'
p1737
I0
sg907
g1079
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1738
I0
sg909
g1073
sg55
g11
sS'block_loop.thisTrial'
p1739
Nsg70
Vy
sS'block_loop.thisTrialN'
p1740
I0
sg39
F0.9499763084386359
sg34
g753
(S'\x07\xdf\x07\x05\x0c6.\x014\x98'
tRp1741
sa(dp1742
S'trial_loop.thisTrialN'
p1743
I57
sg895
S'30-spaghetti_hoops.png'
p1744
sS'block_loop.thisIndex'
p1745
g889
sg38
S'right'
p1746
sg59
g63
sS'trial_loop.thisN'
p1747
I57
sg33
g1345
sg64
g65
sS'trial_loop.thisIndex'
p1748
g60
(g99
S'9\x00\x00\x00'
tRp1749
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1750
I0
sg904
S'19-caramello_redo.png'
p1751
sS'block_loop.thisRepN'
p1752
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1753
I0
sg909
g1352
sg55
g11
sS'block_loop.thisTrial'
p1754
Nsg70
Vy
sS'block_loop.thisTrialN'
p1755
I0
sg39
F1.4499765935356663
sg34
g753
(S'\x07\xdf\x07\x05\x0c64\x01\r\x88'
tRp1756
sa(dp1757
S'trial_loop.thisTrialN'
p1758
I58
sg895
S'45-chewy_nougat_redo.png'
p1759
sS'block_loop.thisIndex'
p1760
g889
sg38
S'left'
p1761
sg59
g63
sS'trial_loop.thisN'
p1762
I58
sg33
g1450
sg64
g65
sS'trial_loop.thisIndex'
p1763
g60
(g99
S':\x00\x00\x00'
tRp1764
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1765
I0
sg904
S'41-peanuts_redo.png'
p1766
sS'block_loop.thisRepN'
p1767
I0
sg907
g1450
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1768
I0
sg909
g1444
sg55
g11
sS'block_loop.thisTrial'
p1769
Nsg70
Vy
sS'block_loop.thisTrialN'
p1770
I0
sg39
F1.1165884265437853
sg34
g753
(S'\x07\xdf\x07\x05\x0c6:\x08I\x18'
tRp1771
sa(dp1772
S'trial_loop.thisTrialN'
p1773
I59
sg895
g950
sS'block_loop.thisIndex'
p1774
g889
sg38
S'right'
p1775
sg59
g63
sS'trial_loop.thisN'
p1776
I59
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1777
g60
(g99
S';\x00\x00\x00'
tRp1778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1779
I0
sg904
g958
sS'block_loop.thisRepN'
p1780
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1781
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1782
Nsg70
Vy
sS'block_loop.thisTrialN'
p1783
I0
sg39
F1.6832854465387754
sg34
g753
(S'\x07\xdf\x07\x05\x0c7\x04\n\xc1\xe8'
tRp1784
sa(dp1785
S'trial_loop.thisTrialN'
p1786
I60
sg895
S'22-daim.png'
p1787
sS'block_loop.thisIndex'
p1788
g889
sg38
S'right'
p1789
sg59
g63
sS'trial_loop.thisN'
p1790
I60
sg33
g1268
sg64
g65
sS'trial_loop.thisIndex'
p1791
g60
(g99
S'<\x00\x00\x00'
tRp1792
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1793
I0
sg904
S'7-olives.png'
p1794
sS'block_loop.thisRepN'
p1795
I0
sg907
g1261
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1796
I0
sg909
g1268
sg55
g11
sS'block_loop.thisTrial'
p1797
Nsg70
Vy
sS'block_loop.thisTrialN'
p1798
I0
sg39
F1.4498833668130828
sg34
g753
(S'\x07\xdf\x07\x05\x0c7\x0b\x06MH'
tRp1799
sa(dp1800
S'trial_loop.thisTrialN'
p1801
I61
sg895
g1623
sS'block_loop.thisIndex'
p1802
g889
sg38
S'left'
p1803
sg59
g63
sS'trial_loop.thisN'
p1804
I61
sg33
g1194
sg64
g65
sS'trial_loop.thisIndex'
p1805
g60
(g99
S'=\x00\x00\x00'
tRp1806
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1807
I0
sg904
g1630
sS'block_loop.thisRepN'
p1808
I0
sg907
g1194
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1809
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p1810
Nsg70
Vy
sS'block_loop.thisTrialN'
p1811
I0
sg39
F0.93332664305671642
sg34
g753
(S'\x07\xdf\x07\x05\x0c7\x11\r\xc7X'
tRp1812
sa(dp1813
S'trial_loop.thisTrialN'
p1814
I62
sg895
S'42-mrkipling_lemon_slices.png'
p1815
sS'block_loop.thisIndex'
p1816
g889
sg38
S'left'
p1817
sg59
g63
sS'trial_loop.thisN'
p1818
I62
sg33
g1541
sg64
g65
sS'trial_loop.thisIndex'
p1819
g60
(g99
S'>\x00\x00\x00'
tRp1820
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1821
I0
sg904
S'16-skips_prawn.png'
p1822
sS'block_loop.thisRepN'
p1823
I0
sg907
g1541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1824
I0
sg909
g1548
sg55
g11
sS'block_loop.thisTrial'
p1825
Nsg70
Vy
sS'block_loop.thisTrialN'
p1826
I0
sg39
F1.233284334660766
sg34
g753
(S"\x07\xdf\x07\x05\x0c7\x17\r'0"
tRp1827
sa(dp1828
S'trial_loop.thisTrialN'
p1829
I63
sg895
g1300
sS'block_loop.thisIndex'
p1830
g889
sg38
S'right'
p1831
sg59
g63
sS'trial_loop.thisN'
p1832
I63
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1833
g60
(g99
S'?\x00\x00\x00'
tRp1834
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1835
I0
sg904
g1307
sS'block_loop.thisRepN'
p1836
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1837
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1838
Nsg70
Vy
sS'block_loop.thisTrialN'
p1839
I0
sg39
F1.1999647620095857
sg34
g753
(S'\x07\xdf\x07\x05\x0c7\x1e\x02\x07\x88'
tRp1840
sa(dp1841
S'trial_loop.thisTrialN'
p1842
I64
sg895
g1257
sS'block_loop.thisIndex'
p1843
g889
sg38
S'left'
p1844
sg59
g63
sS'trial_loop.thisN'
p1845
I64
sg33
g1261
sg64
g65
sS'trial_loop.thisIndex'
p1846
g60
(g99
S'@\x00\x00\x00'
tRp1847
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1848
I0
sg904
g1265
sS'block_loop.thisRepN'
p1849
I0
sg907
g1261
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1850
I0
sg909
g1268
sg55
g11
sS'block_loop.thisTrial'
p1851
Nsg70
Vy
sS'block_loop.thisTrialN'
p1852
I0
sg39
F0.85045122303745302
sg34
g753
(S'\x07\xdf\x07\x05\x0c7$\x05\xb1\x08'
tRp1853
sa(dp1854
S'trial_loop.thisTrialN'
p1855
I65
sg895
g1052
sS'block_loop.thisIndex'
p1856
g889
sg38
S'left'
p1857
sg59
g63
sS'trial_loop.thisN'
p1858
I65
sg33
g1063
sg64
g65
sS'trial_loop.thisIndex'
p1859
g60
(g99
S'A\x00\x00\x00'
tRp1860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1861
I0
sg904
g1060
sS'block_loop.thisRepN'
p1862
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1863
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p1864
Nsg70
Vy
sS'block_loop.thisTrialN'
p1865
I0
sg39
F0.84963327971581748
sg34
g753
(S'\x07\xdf\x07\x05\x0c7*\x03\xe00'
tRp1866
sa(dp1867
S'trial_loop.thisTrialN'
p1868
I66
sg895
g1035
sS'block_loop.thisIndex'
p1869
g889
sg38
S'left'
p1870
sg59
g63
sS'trial_loop.thisN'
p1871
I66
sg33
g1046
sg64
g65
sS'trial_loop.thisIndex'
p1872
g60
(g99
S'B\x00\x00\x00'
tRp1873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1874
I0
sg904
g1043
sS'block_loop.thisRepN'
p1875
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1876
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p1877
Nsg70
Vy
sS'block_loop.thisTrialN'
p1878
I0
sg39
F0.88338933588920554
sg34
g753
(S'\x07\xdf\x07\x05\x0c70\x02\x13@'
tRp1879
sa(dp1880
S'trial_loop.thisTrialN'
p1881
I67
sg895
g1167
sS'block_loop.thisIndex'
p1882
g889
sg38
S'right'
p1883
sg59
g63
sS'trial_loop.thisN'
p1884
I67
sg33
g1171
sg64
g65
sS'trial_loop.thisIndex'
p1885
g60
(g99
S'C\x00\x00\x00'
tRp1886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1887
I0
sg904
g1175
sS'block_loop.thisRepN'
p1888
I0
sg907
g1171
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1889
I0
sg909
g1178
sg55
g11
sS'block_loop.thisTrial'
p1890
Nsg70
Vy
sS'block_loop.thisTrialN'
p1891
I0
sg39
F1.4665638226720148
sg34
g753
(S'\x07\xdf\x07\x05\x0c76\x00\xbb\x80'
tRp1892
sa(dp1893
S'trial_loop.thisTrialN'
p1894
I68
sg895
S'44-crunch.png'
p1895
sS'block_loop.thisIndex'
p1896
g889
sg38
S'right'
p1897
sg59
g63
sS'trial_loop.thisN'
p1898
I68
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p1899
g60
(g99
S'D\x00\x00\x00'
tRp1900
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1901
I0
sg904
S'26-walkers_smoky_bacon.png'
p1902
sS'block_loop.thisRepN'
p1903
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1904
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1905
Nsg70
Vy
sS'block_loop.thisTrialN'
p1906
I0
sg39
F1.0165438943909066
sg34
g753
(S'\x07\xdf\x07\x05\x0c8\x00\x08p('
tRp1907
sa(dp1908
S'trial_loop.thisTrialN'
p1909
I69
sg895
g1257
sS'block_loop.thisIndex'
p1910
g889
sg38
S'left'
p1911
sg59
g63
sS'trial_loop.thisN'
p1912
I69
sg33
g1261
sg64
g65
sS'trial_loop.thisIndex'
p1913
g60
(g99
S'E\x00\x00\x00'
tRp1914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1915
I0
sg904
g1265
sS'block_loop.thisRepN'
p1916
I0
sg907
g1261
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1917
I0
sg909
g1268
sg55
g11
sS'block_loop.thisTrial'
p1918
Nsg70
Vy
sS'block_loop.thisTrialN'
p1919
I0
sg39
F0.98330985084294298
sg34
g753
(S'\x07\xdf\x07\x05\x0c8\x06\t?0'
tRp1920
sa(dp1921
S'trial_loop.thisTrialN'
p1922
I70
sg895
g1716
sS'block_loop.thisIndex'
p1923
g889
sg38
S'left'
p1924
sg59
g63
sS'trial_loop.thisN'
p1925
I70
sg33
g1122
sg64
g65
sS'trial_loop.thisIndex'
p1926
g60
(g99
S'F\x00\x00\x00'
tRp1927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1928
I0
sg904
g1723
sS'block_loop.thisRepN'
p1929
I0
sg907
g1122
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1930
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p1931
Nsg70
Vy
sS'block_loop.thisTrialN'
p1932
I0
sg39
F1.3832735865030372
sg34
g753
(S'\x07\xdf\x07\x05\x0c8\x0c\tV\xa0'
tRp1933
sa(dp1934
S'trial_loop.thisTrialN'
p1935
I71
sg895
g1167
sS'block_loop.thisIndex'
p1936
g889
sg38
S'left'
p1937
sg59
g63
sS'trial_loop.thisN'
p1938
I71
sg33
g1171
sg64
g65
sS'trial_loop.thisIndex'
p1939
g60
(g99
S'G\x00\x00\x00'
tRp1940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1941
I0
sg904
g1175
sS'block_loop.thisRepN'
p1942
I0
sg907
g1171
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1943
I0
sg909
g1178
sg55
g11
sS'block_loop.thisTrial'
p1944
Nsg70
Vy
sS'block_loop.thisTrialN'
p1945
I0
sg39
F0.81668917982733547
sg34
g753
(S'\x07\xdf\x07\x05\x0c8\x13\x00\x98X'
tRp1946
sa(dp1947
S'trial_loop.thisTrialN'
p1948
I72
sg895
g1895
sS'block_loop.thisIndex'
p1949
g889
sg38
S'right'
p1950
sg59
g63
sS'trial_loop.thisN'
p1951
I72
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1952
g60
(g99
S'H\x00\x00\x00'
tRp1953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1954
I0
sg904
g1902
sS'block_loop.thisRepN'
p1955
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1956
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1957
Nsg70
Vy
sS'block_loop.thisTrialN'
p1958
I0
sg39
F0.83320684529326172
sg34
g753
(S'\x07\xdf\x07\x05\x0c8\x18\r\x90\xa8'
tRp1959
sa(dp1960
S'trial_loop.thisTrialN'
p1961
I73
sg895
g1135
sS'block_loop.thisIndex'
p1962
g889
sg38
S'right'
p1963
sg59
g63
sS'trial_loop.thisN'
p1964
I73
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1965
g60
(g99
S'I\x00\x00\x00'
tRp1966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1967
I0
sg904
g1142
sS'block_loop.thisRepN'
p1968
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1969
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1970
Nsg70
Vy
sS'block_loop.thisTrialN'
p1971
I0
sg39
F1.0165992032111717
sg34
g753
(S'\x07\xdf\x07\x05\x0c8\x1e\x0b\x858'
tRp1972
sa(dp1973
S'trial_loop.thisTrialN'
p1974
I74
sg895
g1150
sS'block_loop.thisIndex'
p1975
g889
sg38
S'left'
p1976
sg59
g63
sS'trial_loop.thisN'
p1977
I74
sg33
g1154
sg64
g65
sS'trial_loop.thisIndex'
p1978
g60
(g99
S'J\x00\x00\x00'
tRp1979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1980
I0
sg904
g1158
sS'block_loop.thisRepN'
p1981
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1982
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p1983
Nsg70
Vy
sS'block_loop.thisTrialN'
p1984
I0
sg39
F0.78334708451211554
sg34
g753
(S'\x07\xdf\x07\x05\x0c8$\x0c\x15\xc0'
tRp1985
sa(dp1986
S'trial_loop.thisTrialN'
p1987
I75
sg895
g1744
sS'block_loop.thisIndex'
p1988
g889
sg38
S'right'
p1989
sg59
g63
sS'trial_loop.thisN'
p1990
I75
sg33
g1345
sg64
g65
sS'trial_loop.thisIndex'
p1991
g60
(g99
S'K\x00\x00\x00'
tRp1992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1993
I0
sg904
g1751
sS'block_loop.thisRepN'
p1994
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1995
I0
sg909
g1352
sg55
g11
sS'block_loop.thisTrial'
p1996
Nsg70
Vy
sS'block_loop.thisTrialN'
p1997
I0
sg39
F1.0166411124714614
sg34
g753
(S'\x07\xdf\x07\x05\x0c8*\tR\xb8'
tRp1998
sa(dp1999
S'trial_loop.thisTrialN'
p2000
I76
sg895
g1470
sS'block_loop.thisIndex'
p2001
g889
sg38
S'left'
p2002
sg59
g63
sS'trial_loop.thisN'
p2003
I76
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p2004
g60
(g99
S'L\x00\x00\x00'
tRp2005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2006
I0
sg904
g1477
sS'block_loop.thisRepN'
p2007
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2008
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2009
Nsg70
Vy
sS'block_loop.thisTrialN'
p2010
I0
sg39
F1.1499906773278781
sg34
g753
(S'\x07\xdf\x07\x05\x0c80\n!\xc0'
tRp2011
sa(dp2012
S'trial_loop.thisTrialN'
p2013
I77
sg895
S'51-mars.png'
p2014
sS'block_loop.thisIndex'
p2015
g889
sg38
S'right'
p2016
sg59
g63
sS'trial_loop.thisN'
p2017
I77
sg33
g1171
sg64
g65
sS'trial_loop.thisIndex'
p2018
g60
(g99
S'M\x00\x00\x00'
tRp2019
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2020
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p2021
sS'block_loop.thisRepN'
p2022
I0
sg907
g1171
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2023
I0
sg909
g1178
sg55
g11
sS'block_loop.thisTrial'
p2024
Nsg70
Vy
sS'block_loop.thisTrialN'
p2025
I0
sg39
F0.76656057256559507
sg34
g753
(S'\x07\xdf\x07\x05\x0c86\x0c\xd5('
tRp2026
sa(dp2027
S'trial_loop.thisTrialN'
p2028
I78
sg895
g1470
sS'block_loop.thisIndex'
p2029
g889
sg38
S'left'
p2030
sg59
g63
sS'trial_loop.thisN'
p2031
I78
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2032
g60
(g99
S'N\x00\x00\x00'
tRp2033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2034
I0
sg904
g1477
sS'block_loop.thisRepN'
p2035
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2036
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2037
Nsg70
Vy
sS'block_loop.thisTrialN'
p2038
I0
sg39
F0.83330178259757304
sg34
g753
(S'\x07\xdf\x07\x05\x0c9\x00\t\xd7\x88'
tRp2039
sa(dp2040
S'trial_loop.thisTrialN'
p2041
I79
sg895
g1716
sS'block_loop.thisIndex'
p2042
g889
sg38
S'left'
p2043
sg59
g63
sS'trial_loop.thisN'
p2044
I79
sg33
g1122
sg64
g65
sS'trial_loop.thisIndex'
p2045
g60
(g99
S'O\x00\x00\x00'
tRp2046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2047
I0
sg904
g1723
sS'block_loop.thisRepN'
p2048
I0
sg907
g1122
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2049
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p2050
Nsg70
Vy
sS'block_loop.thisTrialN'
p2051
I0
sg39
F1.1497631699139674
sg34
g753
(S'\x07\xdf\x07\x05\x0c9\x06\x07\xc80'
tRp2052
sa(dp2053
S'trial_loop.thisTrialN'
p2054
I80
sg895
g916
sS'block_loop.thisIndex'
p2055
g889
sg38
S'left'
p2056
sg59
g63
sS'trial_loop.thisN'
p2057
I80
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2058
g60
(g99
S'P\x00\x00\x00'
tRp2059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2060
I0
sg904
g924
sS'block_loop.thisRepN'
p2061
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2062
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2063
Nsg70
Vy
sS'block_loop.thisTrialN'
p2064
I0
sg39
F1.0833099078627129
sg34
g753
(S'\x07\xdf\x07\x05\x0c9\x0c\n\xba\x18'
tRp2065
sa(dp2066
S'trial_loop.thisTrialN'
p2067
I81
sg895
g896
sS'block_loop.thisIndex'
p2068
g889
sg38
S'left'
p2069
sg59
g63
sS'trial_loop.thisN'
p2070
I81
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p2071
g60
(g99
S'Q\x00\x00\x00'
tRp2072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2073
I0
sg904
g905
sS'block_loop.thisRepN'
p2074
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2075
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2076
Nsg70
Vy
sS'block_loop.thisTrialN'
p2077
I0
sg39
F0.91654184169237851
sg34
g753
(S'\x07\xdf\x07\x05\x0c9\x12\x0c\x7f8'
tRp2078
sa(dp2079
S'trial_loop.thisTrialN'
p2080
I82
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p2081
sS'block_loop.thisIndex'
p2082
g889
sg38
S'left'
p2083
sg59
g63
sS'trial_loop.thisN'
p2084
I82
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p2085
g60
(g99
S'R\x00\x00\x00'
tRp2086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2087
I0
sg904
S'36-fig_rolls.png'
p2088
sS'block_loop.thisRepN'
p2089
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2090
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2091
Nsg70
Vy
sS'block_loop.thisTrialN'
p2092
I0
sg39
F2.1332951113276977
sg34
g753
(S'\x07\xdf\x07\x05\x0c9\x18\x0b\xa0\x90'
tRp2093
sa(dp2094
S'trial_loop.thisTrialN'
p2095
I83
sg895
g1086
sS'block_loop.thisIndex'
p2096
g889
sg38
S'left'
p2097
sg59
g63
sS'trial_loop.thisN'
p2098
I83
sg33
g1090
sg64
g65
sS'trial_loop.thisIndex'
p2099
g60
(g99
S'S\x00\x00\x00'
tRp2100
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2101
I0
sg904
g1094
sS'block_loop.thisRepN'
p2102
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2103
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p2104
Nsg70
Vy
sS'block_loop.thisTrialN'
p2105
I0
sg39
F1.0000028509698495
sg34
g753
(S'\x07\xdf\x07\x05\x0c9\x1f\x0eP\x10'
tRp2106
sa(dp2107
S'trial_loop.thisTrialN'
p2108
I84
sg895
g1895
sS'block_loop.thisIndex'
p2109
g889
sg38
S'right'
p2110
sg59
g63
sS'trial_loop.thisN'
p2111
I84
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2112
g60
(g99
S'T\x00\x00\x00'
tRp2113
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2114
I0
sg904
g1902
sS'block_loop.thisRepN'
p2115
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2116
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2117
Nsg70
Vy
sS'block_loop.thisTrialN'
p2118
I0
sg39
F0.86658457773410191
sg34
g753
(S'\x07\xdf\x07\x05\x0c9%\x0e\xa6\x00'
tRp2119
sa(dp2120
S'trial_loop.thisTrialN'
p2121
I85
sg895
g1470
sS'block_loop.thisIndex'
p2122
g889
sg38
S'left'
p2123
sg59
g63
sS'trial_loop.thisN'
p2124
I85
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2125
g60
(g99
S'U\x00\x00\x00'
tRp2126
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2127
I0
sg904
g1477
sS'block_loop.thisRepN'
p2128
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2129
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2130
Nsg70
Vy
sS'block_loop.thisTrialN'
p2131
I0
sg39
F0.83323735067324378
sg34
g753
(S'\x07\xdf\x07\x05\x0c9+\rN@'
tRp2132
sa(dp2133
S'trial_loop.thisTrialN'
p2134
I86
sg895
g1815
sS'block_loop.thisIndex'
p2135
g889
sg38
S'right'
p2136
sg59
g63
sS'trial_loop.thisN'
p2137
I86
sg33
g1541
sg64
g65
sS'trial_loop.thisIndex'
p2138
g60
(g99
S'V\x00\x00\x00'
tRp2139
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2140
I0
sg904
g1822
sS'block_loop.thisRepN'
p2141
I0
sg907
g1541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2142
I0
sg909
g1548
sg55
g11
sS'block_loop.thisTrial'
p2143
Nsg70
Vy
sS'block_loop.thisTrialN'
p2144
I0
sg39
F1.7832110932390606
sg34
g753
(S'\x07\xdf\x07\x05\x0c91\x0bB\xd0'
tRp2145
sa(dp2146
S'trial_loop.thisTrialN'
p2147
I87
sg895
g1399
sS'block_loop.thisIndex'
p2148
g889
sg38
S'right'
p2149
sg59
g63
sS'trial_loop.thisN'
p2150
I87
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2151
g60
(g99
S'W\x00\x00\x00'
tRp2152
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2153
I0
sg904
g1406
sS'block_loop.thisRepN'
p2154
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2155
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2156
Nsg70
Vy
sS'block_loop.thisTrialN'
p2157
I0
sg39
F0.83320855587544429
sg34
g753
(S'\x07\xdf\x07\x05\x0c98\x08w\xf8'
tRp2158
sa(dp2159
S'trial_loop.thisTrialN'
p2160
I88
sg895
g1537
sS'block_loop.thisIndex'
p2161
g889
sg38
S'left'
p2162
sg59
g63
sS'trial_loop.thisN'
p2163
I88
sg33
g1548
sg64
g65
sS'trial_loop.thisIndex'
p2164
g60
(g99
S'X\x00\x00\x00'
tRp2165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2166
I0
sg904
g1545
sS'block_loop.thisRepN'
p2167
I0
sg907
g1541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2168
I0
sg909
g1548
sg55
g11
sS'block_loop.thisTrial'
p2169
Nsg70
Vy
sS'block_loop.thisTrialN'
p2170
I0
sg39
F0.94976106019612416
sg34
g753
(S'\x07\xdf\x07\x05\x0c:\x02\x06l\x88'
tRp2171
sa(dp2172
S'trial_loop.thisTrialN'
p2173
I89
sg895
g2081
sS'block_loop.thisIndex'
p2174
g889
sg38
S'right'
p2175
sg59
g63
sS'trial_loop.thisN'
p2176
I89
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p2177
g60
(g99
S'Y\x00\x00\x00'
tRp2178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2179
I0
sg904
g2088
sS'block_loop.thisRepN'
p2180
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2181
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2182
Nsg70
Vy
sS'block_loop.thisTrialN'
p2183
I0
sg39
F1.6666508912985591
sg34
g753
(S'\x07\xdf\x07\x05\x0c:\x08\x06\n\xe0'
tRp2184
sa(dp2185
S'trial_loop.thisTrialN'
p2186
I90
sg895
g1035
sS'block_loop.thisIndex'
p2187
g889
sg38
S'left'
p2188
sg59
g63
sS'trial_loop.thisN'
p2189
I90
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p2190
g60
(g99
S'Z\x00\x00\x00'
tRp2191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2192
I0
sg904
g1043
sS'block_loop.thisRepN'
p2193
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2194
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p2195
Nsg70
Vy
sS'block_loop.thisTrialN'
p2196
I0
sg39
F0.76660390731149164
sg34
g753
(S'\x07\xdf\x07\x05\x0c:\x0f\x01\x96@'
tRp2197
sa(dp2198
S'trial_loop.thisTrialN'
p2199
I91
sg895
g2081
sS'block_loop.thisIndex'
p2200
g889
sg38
S'right'
p2201
sg59
g63
sS'trial_loop.thisN'
p2202
I91
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p2203
g60
(g99
S'[\x00\x00\x00'
tRp2204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2205
I0
sg904
g2088
sS'block_loop.thisRepN'
p2206
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2207
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2208
Nsg70
Vy
sS'block_loop.thisTrialN'
p2209
I0
sg39
F2.8332875277469611
sg34
g753
(S'\x07\xdf\x07\x05\x0c:\x14\r\x98x'
tRp2210
sa(dp2211
S'trial_loop.thisTrialN'
p2212
I92
sg895
g1103
sS'block_loop.thisIndex'
p2213
g889
sg38
S'left'
p2214
sg59
g63
sS'trial_loop.thisN'
p2215
I92
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2216
g60
(g99
S'\\\x00\x00\x00'
tRp2217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2218
I0
sg904
g1110
sS'block_loop.thisRepN'
p2219
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2220
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2221
Nsg70
Vy
sS'block_loop.thisTrialN'
p2222
I0
sg39
F1.2166286822416623
sg34
g753
(S'\x07\xdf\x07\x05\x0c:\x1c\x0b\xbb\xe8'
tRp2223
sa(dp2224
S'trial_loop.thisTrialN'
p2225
I93
sg895
g1608
sS'block_loop.thisIndex'
p2226
g889
sg38
S'right'
p2227
sg59
g63
sS'trial_loop.thisN'
p2228
I93
sg33
g1063
sg64
g65
sS'trial_loop.thisIndex'
p2229
g60
(g99
S']\x00\x00\x00'
tRp2230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2231
I0
sg904
g1615
sS'block_loop.thisRepN'
p2232
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2233
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p2234
Nsg70
Vy
sS'block_loop.thisTrialN'
p2235
I0
sg39
F0.79967915182533034
sg34
g753
(S'\x07\xdf\x07\x05\x0c:#\x00#('
tRp2236
sa(dp2237
S'trial_loop.thisTrialN'
p2238
I94
sg895
S'4-corn.png'
p2239
sS'block_loop.thisIndex'
p2240
g889
sg38
S'left'
p2241
sg59
g63
sS'trial_loop.thisN'
p2242
I94
sg33
g1154
sg64
g65
sS'trial_loop.thisIndex'
p2243
g60
(g99
S'^\x00\x00\x00'
tRp2244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2245
I0
sg904
S'10-bounty_redo.png'
p2246
sS'block_loop.thisRepN'
p2247
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2248
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p2249
Nsg70
Vy
sS'block_loop.thisTrialN'
p2250
I0
sg39
F2.1836478048385288
sg34
g753
(S'\x07\xdf\x07\x05\x0c:(\x0c\xe0\xe0'
tRp2251
sa(dp2252
S'trial_loop.thisTrialN'
p2253
I95
sg895
g1052
sS'block_loop.thisIndex'
p2254
g889
sg38
S'left'
p2255
sg59
g63
sS'trial_loop.thisN'
p2256
I95
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p2257
g60
(g99
S'_\x00\x00\x00'
tRp2258
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2259
I0
sg904
g1060
sS'block_loop.thisRepN'
p2260
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2261
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p2262
Nsg70
Vy
sS'block_loop.thisTrialN'
p2263
I0
sg39
F2.3163872620939401
sg34
g753
(S'\x07\xdf\x07\x05\x0c:0\x01\x01\xd0'
tRp2264
sa(dp2265
S'trial_loop.thisTrialN'
p2266
I96
sg895
g1744
sS'block_loop.thisIndex'
p2267
g889
sg38
S'right'
p2268
sg59
g63
sS'trial_loop.thisN'
p2269
I96
sg33
g1345
sg64
g65
sS'trial_loop.thisIndex'
p2270
g60
(g99
S'`\x00\x00\x00'
tRp2271
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2272
I0
sg904
g1751
sS'block_loop.thisRepN'
p2273
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2274
I0
sg909
g1352
sg55
g11
sS'block_loop.thisTrial'
p2275
Nsg70
Vy
sS'block_loop.thisTrialN'
p2276
I0
sg39
F1.3165968083958433
sg34
g753
(S'\x07\xdf\x07\x05\x0c:7\x06Q0'
tRp2277
sa(dp2278
S'trial_loop.thisTrialN'
p2279
I97
sg895
g2239
sS'block_loop.thisIndex'
p2280
g889
sg38
S'left'
p2281
sg59
g63
sS'trial_loop.thisN'
p2282
I97
sg33
g1154
sg64
g65
sS'trial_loop.thisIndex'
p2283
g60
(g99
S'a\x00\x00\x00'
tRp2284
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2285
I0
sg904
g2246
sS'block_loop.thisRepN'
p2286
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2287
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p2288
Nsg70
Vy
sS'block_loop.thisTrialN'
p2289
I0
sg39
F0.76656028746901939
sg34
g753
(S'\x07\xdf\x07\x05\x0c;\x01\x0b\xa4x'
tRp2290
sa(dp2291
S'trial_loop.thisTrialN'
p2292
I98
sg895
g933
sS'block_loop.thisIndex'
p2293
g889
sg38
S'left'
p2294
sg59
g63
sS'trial_loop.thisN'
p2295
I98
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p2296
g60
(g99
S'b\x00\x00\x00'
tRp2297
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2298
I0
sg904
g941
sS'block_loop.thisRepN'
p2299
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2300
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p2301
Nsg70
Vy
sS'block_loop.thisTrialN'
p2302
I0
sg39
F1.0998478152159805
sg34
g753
(S'\x07\xdf\x07\x05\x0c;\x07\x08\xa2\xf0'
tRp2303
sa(dp2304
S'trial_loop.thisTrialN'
p2305
I99
sg895
g1623
sS'block_loop.thisIndex'
p2306
g889
sg38
S'right'
p2307
sg59
g63
sS'trial_loop.thisN'
p2308
I99
sg33
g1194
sg64
g65
sS'trial_loop.thisIndex'
p2309
g60
(g99
S'c\x00\x00\x00'
tRp2310
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2311
I0
sg904
g1630
sS'block_loop.thisRepN'
p2312
I0
sg907
g1194
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2313
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p2314
Nsg70
Vy
sS'block_loop.thisTrialN'
p2315
I0
sg39
F1.2999562661184427
sg34
g753
(S'\x07\xdf\x07\x05\x0c;\r\n\xa2\xa8'
tRp2316
sa(dp2317
S'trial_loop.thisTrialN'
p2318
I100
sg895
g1399
sS'block_loop.thisIndex'
p2319
g889
sg38
S'right'
p2320
sg59
g63
sS'trial_loop.thisN'
p2321
I100
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2322
g60
(g99
S'd\x00\x00\x00'
tRp2323
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2324
I0
sg904
g1406
sS'block_loop.thisRepN'
p2325
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2326
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2327
Nsg70
Vy
sS'block_loop.thisTrialN'
p2328
I0
sg39
F1.3500133140305479
sg34
g753
(S'\x07\xdf\x07\x05\x0c;\x14\x00y\x18'
tRp2329
sa(dp2330
S'trial_loop.thisTrialN'
p2331
I101
sg895
g1537
sS'block_loop.thisIndex'
p2332
g889
sg38
S'left'
p2333
sg59
g63
sS'trial_loop.thisN'
p2334
I101
sg33
g1541
sg64
g65
sS'trial_loop.thisIndex'
p2335
g60
(g99
S'e\x00\x00\x00'
tRp2336
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2337
I0
sg904
g1545
sS'block_loop.thisRepN'
p2338
I0
sg907
g1541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2339
I0
sg909
g1548
sg55
g11
sS'block_loop.thisTrial'
p2340
Nsg70
Vy
sS'block_loop.thisTrialN'
p2341
I0
sg39
F1.0163856655503878
sg34
g753
(S'\x07\xdf\x07\x05\x0c;\x1a\x06Ex'
tRp2342
sa(dp2343
S'trial_loop.thisTrialN'
p2344
I102
sg895
g1135
sS'block_loop.thisIndex'
p2345
g889
sg38
S'right'
p2346
sg59
g63
sS'trial_loop.thisN'
p2347
I102
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p2348
g60
(g99
S'f\x00\x00\x00'
tRp2349
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2350
I0
sg904
g1142
sS'block_loop.thisRepN'
p2351
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2352
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2353
Nsg70
Vy
sS'block_loop.thisTrialN'
p2354
I0
sg39
F0.93328901025142841
sg34
g753
(S'\x07\xdf\x07\x05\x0c; \x07\x14\x80'
tRp2355
sa(dp2356
S'trial_loop.thisTrialN'
p2357
I103
sg895
g1103
sS'block_loop.thisIndex'
p2358
g889
sg38
S'left'
p2359
sg59
g63
sS'trial_loop.thisN'
p2360
I103
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2361
g60
(g99
S'g\x00\x00\x00'
tRp2362
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2363
I0
sg904
g1110
sS'block_loop.thisRepN'
p2364
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2365
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2366
Nsg70
Vy
sS'block_loop.thisTrialN'
p2367
I0
sg39
F0.66666856731353619
sg34
g753
(S'\x07\xdf\x07\x05\x0c;&\x06tX'
tRp2368
sa(dp2369
S'trial_loop.thisTrialN'
p2370
I104
sg895
g1787
sS'block_loop.thisIndex'
p2371
g889
sg38
S'right'
p2372
sg59
g63
sS'trial_loop.thisN'
p2373
I104
sg33
g1261
sg64
g65
sS'trial_loop.thisIndex'
p2374
g60
(g99
S'h\x00\x00\x00'
tRp2375
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2376
I0
sg904
g1794
sS'block_loop.thisRepN'
p2377
I0
sg907
g1261
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2378
I0
sg909
g1268
sg55
g11
sS'block_loop.thisTrial'
p2379
Nsg70
Vy
sS'block_loop.thisTrialN'
p2380
I0
sg39
F0.84998651491150667
sg34
g753
(S'\x07\xdf\x07\x05\x0c;,\x02\x07\x88'
tRp2381
sa(dp2382
S'trial_loop.thisTrialN'
p2383
I105
sg895
g1341
sS'block_loop.thisIndex'
p2384
g889
sg38
S'left'
p2385
sg59
g63
sS'trial_loop.thisN'
p2386
I105
sg33
g1345
sg64
g65
sS'trial_loop.thisIndex'
p2387
g60
(g99
S'i\x00\x00\x00'
tRp2388
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2389
I0
sg904
g1349
sS'block_loop.thisRepN'
p2390
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2391
I0
sg909
g1352
sg55
g11
sS'block_loop.thisTrial'
p2392
Nsg70
Vy
sS'block_loop.thisTrialN'
p2393
I0
sg39
F0.73328490485482689
sg34
g753
(S'\x07\xdf\x07\x05\x0c;2\x006\xb0'
tRp2394
sa(dp2395
S'trial_loop.thisTrialN'
p2396
I106
sg895
g1580
sS'block_loop.thisIndex'
p2397
g889
sg38
S'right'
p2398
sg59
g63
sS'trial_loop.thisN'
p2399
I106
sg33
g1090
sg64
g65
sS'trial_loop.thisIndex'
p2400
g60
(g99
S'j\x00\x00\x00'
tRp2401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2402
I0
sg904
g1587
sS'block_loop.thisRepN'
p2403
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2404
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p2405
Nsg70
Vy
sS'block_loop.thisTrialN'
p2406
I0
sg39
F1.1499789883500853
sg34
g753
(S'\x07\xdf\x07\x05\x0c;7\x0b\xfeP'
tRp2407
sa(dp2408
S'trial_loop.thisTrialN'
p2409
I107
sg895
g1184
sS'block_loop.thisIndex'
p2410
g889
sg38
S'right'
p2411
sg59
g63
sS'trial_loop.thisN'
p2412
I107
sg33
g1194
sg64
g65
sS'trial_loop.thisIndex'
p2413
g60
(g99
S'k\x00\x00\x00'
tRp2414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2415
I0
sg904
g1192
sS'block_loop.thisRepN'
p2416
I0
sg907
g1194
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2417
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p2418
Nsg70
Vy
sS'block_loop.thisTrialN'
p2419
I0
sg39
F1.6833122456578167
sg34
g753
(S'\x07\xdf\x07\x05\r\x00\x01\x0e\xb5\xa0'
tRp2420
sa(dp2421
S'trial_loop.thisTrialN'
p2422
I108
sg895
g1103
sS'block_loop.thisIndex'
p2423
g889
sg38
S'right'
p2424
sg59
g63
sS'trial_loop.thisN'
p2425
I108
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2426
g60
(g99
S'l\x00\x00\x00'
tRp2427
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2428
I0
sg904
g1110
sS'block_loop.thisRepN'
p2429
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2430
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2431
Nsg70
Vy
sS'block_loop.thisTrialN'
p2432
I0
sg39
F1.4666202718799468
sg34
g753
(S'\x07\xdf\x07\x05\r\x00\x08\n{\x98'
tRp2433
sa(dp2434
S'trial_loop.thisTrialN'
p2435
I109
sg895
g1787
sS'block_loop.thisIndex'
p2436
g889
sg38
S'right'
p2437
sg59
g63
sS'trial_loop.thisN'
p2438
I109
sg33
g1261
sg64
g65
sS'trial_loop.thisIndex'
p2439
g60
(g99
S'm\x00\x00\x00'
tRp2440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2441
I0
sg904
g1794
sS'block_loop.thisRepN'
p2442
I0
sg907
g1261
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2443
I0
sg909
g1268
sg55
g11
sS'block_loop.thisTrial'
p2444
Nsg70
Vy
sS'block_loop.thisTrialN'
p2445
I0
sg39
F0.81689701554751082
sg34
g753
(S'\x07\xdf\x07\x05\r\x00\x0f\x02\xb3h'
tRp2446
sa(dp2447
S'trial_loop.thisTrialN'
p2448
I110
sg895
g2014
sS'block_loop.thisIndex'
p2449
g889
sg38
S'right'
p2450
sg59
g63
sS'trial_loop.thisN'
p2451
I110
sg33
g1171
sg64
g65
sS'trial_loop.thisIndex'
p2452
g60
(g99
S'n\x00\x00\x00'
tRp2453
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2454
I0
sg904
g2021
sS'block_loop.thisRepN'
p2455
I0
sg907
g1171
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2456
I0
sg909
g1178
sg55
g11
sS'block_loop.thisTrial'
p2457
Nsg70
Vy
sS'block_loop.thisTrialN'
p2458
I0
sg39
F2.8331769101073405
sg34
g753
(S'\x07\xdf\x07\x05\r\x00\x15\x00ix'
tRp2459
sa(dp2460
S'trial_loop.thisTrialN'
p2461
I111
sg895
g1214
sS'block_loop.thisIndex'
p2462
g889
sg38
S'right'
p2463
sg59
g63
sS'trial_loop.thisN'
p2464
I111
sg33
g1079
sg64
g65
sS'trial_loop.thisIndex'
p2465
g60
(g99
S'o\x00\x00\x00'
tRp2466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2467
I0
sg904
g1221
sS'block_loop.thisRepN'
p2468
I0
sg907
g1079
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2469
I0
sg909
g1073
sg55
g11
sS'block_loop.thisTrial'
p2470
Nsg70
Vy
sS'block_loop.thisTrialN'
p2471
I0
sg39
F1.0332733869354342
sg34
g753
(S'\x07\xdf\x07\x05\r\x00\x1c\r\xcf('
tRp2472
sa(dp2473
S'trial_loop.thisTrialN'
p2474
I112
sg895
g1759
sS'block_loop.thisIndex'
p2475
g889
sg38
S'right'
p2476
sg59
g63
sS'trial_loop.thisN'
p2477
I112
sg33
g1450
sg64
g65
sS'trial_loop.thisIndex'
p2478
g60
(g99
S'p\x00\x00\x00'
tRp2479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2480
I0
sg904
g1766
sS'block_loop.thisRepN'
p2481
I0
sg907
g1450
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2482
I0
sg909
g1444
sg55
g11
sS'block_loop.thisTrial'
p2483
Nsg70
Vy
sS'block_loop.thisTrialN'
p2484
I0
sg39
F0.98330101283545446
sg34
g753
(S'\x07\xdf\x07\x05\r\x00"\x0e\x9e0'
tRp2485
sa(dp2486
S'trial_loop.thisTrialN'
p2487
I113
sg895
g984
sS'block_loop.thisIndex'
p2488
g889
sg38
S'left'
p2489
sg59
g63
sS'trial_loop.thisN'
p2490
I113
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2491
g60
(g99
S'q\x00\x00\x00'
tRp2492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2493
I0
sg904
g992
sS'block_loop.thisRepN'
p2494
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2495
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2496
Nsg70
Vy
sS'block_loop.thisTrialN'
p2497
I0
sg39
F0.83327241760571269
sg34
g753
(S'\x07\xdf\x07\x05\r\x00(\x0e\xf08'
tRp2498
sa(dp2499
S'trial_loop.thisTrialN'
p2500
I114
sg895
g1184
sS'block_loop.thisIndex'
p2501
g889
sg38
S'right'
p2502
sg59
g63
sS'trial_loop.thisN'
p2503
I114
sg33
g1194
sg64
g65
sS'trial_loop.thisIndex'
p2504
g60
(g99
S'r\x00\x00\x00'
tRp2505
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2506
I0
sg904
g1192
sS'block_loop.thisRepN'
p2507
I0
sg907
g1194
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2508
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p2509
Nsg70
Vy
sS'block_loop.thisTrialN'
p2510
I0
sg39
F0.71668427615850305
sg34
g753
(S'\x07\xdf\x07\x05\r\x00.\x0c\xe4\xc8'
tRp2511
sa(dp2512
S'trial_loop.thisTrialN'
p2513
I115
sg895
g1608
sS'block_loop.thisIndex'
p2514
g889
sg38
S'right'
p2515
sg59
g63
sS'trial_loop.thisN'
p2516
I115
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p2517
g60
(g99
S's\x00\x00\x00'
tRp2518
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2519
I0
sg904
g1615
sS'block_loop.thisRepN'
p2520
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2521
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p2522
Nsg70
Vy
sS'block_loop.thisTrialN'
p2523
I0
sg39
F0.93302957197238356
sg34
g753
(S'\x07\xdf\x07\x05\r\x004\t+\xa8'
tRp2524
sa(dp2525
S'trial_loop.thisTrialN'
p2526
I116
sg895
g1744
sS'block_loop.thisIndex'
p2527
g889
sg38
S'right'
p2528
sg59
g63
sS'trial_loop.thisN'
p2529
I116
sg33
g1345
sg64
g65
sS'trial_loop.thisIndex'
p2530
g60
(g99
S't\x00\x00\x00'
tRp2531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2532
I0
sg904
g1751
sS'block_loop.thisRepN'
p2533
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2534
I0
sg909
g1352
sg55
g11
sS'block_loop.thisTrial'
p2535
Nsg70
Vy
sS'block_loop.thisTrialN'
p2536
I0
sg39
F1.0330923503338454
sg34
g753
(S'\x07\xdf\x07\x05\r\x00:\x08\x8fh'
tRp2537
sa(dp2538
S'trial_loop.thisTrialN'
p2539
I117
sg895
g2014
sS'block_loop.thisIndex'
p2540
g889
sg38
S'right'
p2541
sg59
g63
sS'trial_loop.thisN'
p2542
I117
sg33
g1171
sg64
g65
sS'trial_loop.thisIndex'
p2543
g60
(g99
S'u\x00\x00\x00'
tRp2544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2545
I0
sg904
g2021
sS'block_loop.thisRepN'
p2546
I0
sg907
g1171
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2547
I0
sg909
g1178
sg55
g11
sS'block_loop.thisTrial'
p2548
Nsg70
Vy
sS'block_loop.thisTrialN'
p2549
I0
sg39
F0.8332826810978986
sg34
g753
(S'\x07\xdf\x07\x05\r\x01\x04\t\x99\x08'
tRp2550
sa(dp2551
S'trial_loop.thisTrialN'
p2552
I118
sg895
g1341
sS'block_loop.thisIndex'
p2553
g889
sg38
S'left'
p2554
sg59
g63
sS'trial_loop.thisN'
p2555
I118
sg33
g1345
sg64
g65
sS'trial_loop.thisIndex'
p2556
g60
(g99
S'v\x00\x00\x00'
tRp2557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2558
I0
sg904
g1349
sS'block_loop.thisRepN'
p2559
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2560
I0
sg909
g1352
sg55
g11
sS'block_loop.thisTrial'
p2561
Nsg70
Vy
sS'block_loop.thisTrialN'
p2562
I0
sg39
F1.0999809555196407
sg34
g753
(S'\x07\xdf\x07\x05\r\x01\n\x07\x8d\x98'
tRp2563
sa(dp2564
S'trial_loop.thisTrialN'
p2565
I119
sg895
g1440
sS'block_loop.thisIndex'
p2566
g889
sg38
S'left'
p2567
sg59
g63
sS'trial_loop.thisN'
p2568
I119
sg33
g1450
sg64
g65
sS'trial_loop.thisIndex'
p2569
g60
(g99
S'w\x00\x00\x00'
tRp2570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2571
I0
sg904
g1448
sS'block_loop.thisRepN'
p2572
I0
sg907
g1450
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2573
I0
sg909
g1444
sg55
g11
sS'block_loop.thisTrial'
p2574
Nsg70
Vy
sS'block_loop.thisTrialN'
p2575
I0
sg39
F0.89986480699781168
sg34
g753
(S'\x07\xdf\x07\x05\r\x01\x10\t\x89h'
tRp2576
sa(dp2577
S'trial_loop.thisTrialN'
p2578
I120
sg895
g1214
sS'block_loop.thisIndex'
p2579
g889
sg38
S'right'
p2580
sg59
g63
sS'trial_loop.thisN'
p2581
I120
sg33
g1079
sg64
g65
sS'trial_loop.thisIndex'
p2582
g60
(g99
S'x\x00\x00\x00'
tRp2583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2584
I0
sg904
g1221
sS'block_loop.thisRepN'
p2585
I0
sg907
g1079
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2586
I0
sg909
g1073
sg55
g11
sS'block_loop.thisTrial'
p2587
Nsg70
Vy
sS'block_loop.thisTrialN'
p2588
I0
sg39
F2.2498704234089928
sg34
g753
(S'\x07\xdf\x07\x05\r\x01\x16\x08\xae\xa8'
tRp2589
sa(dp2590
S'trial_loop.thisTrialN'
p2591
I121
sg895
g1623
sS'block_loop.thisIndex'
p2592
g889
sg38
S'left'
p2593
sg59
g63
sS'trial_loop.thisN'
p2594
I121
sg33
g1188
sg64
g65
sS'trial_loop.thisIndex'
p2595
g60
(g99
S'y\x00\x00\x00'
tRp2596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2597
I0
sg904
g1630
sS'block_loop.thisRepN'
p2598
I0
sg907
g1194
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2599
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p2600
Nsg70
Vy
sS'block_loop.thisTrialN'
p2601
I0
sg39
F2.6998886411079184
sg34
g753
(S'\x07\xdf\x07\x05\r\x01\x1d\r\x07\xf0'
tRp2602
sa(dp2603
S'trial_loop.thisTrialN'
p2604
I122
sg895
g1759
sS'block_loop.thisIndex'
p2605
g889
sg38
S'right'
p2606
sg59
g63
sS'trial_loop.thisN'
p2607
I122
sg33
g1450
sg64
g65
sS'trial_loop.thisIndex'
p2608
g60
(g99
S'z\x00\x00\x00'
tRp2609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2610
I0
sg904
g1766
sS'block_loop.thisRepN'
p2611
I0
sg907
g1450
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2612
I0
sg909
g1444
sg55
g11
sS'block_loop.thisTrial'
p2613
Nsg70
Vy
sS'block_loop.thisTrialN'
p2614
I0
sg39
F0.89992467737010884
sg34
g753
(S'\x07\xdf\x07\x05\r\x01%\x08\xca\x00'
tRp2615
sa(dp2616
S'trial_loop.thisTrialN'
p2617
I123
sg895
g1815
sS'block_loop.thisIndex'
p2618
g889
sg38
S'right'
p2619
sg59
g63
sS'trial_loop.thisN'
p2620
I123
sg33
g1541
sg64
g65
sS'trial_loop.thisIndex'
p2621
g60
(g99
S'{\x00\x00\x00'
tRp2622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2623
I0
sg904
g1822
sS'block_loop.thisRepN'
p2624
I0
sg907
g1541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2625
I0
sg909
g1548
sg55
g11
sS'block_loop.thisTrial'
p2626
Nsg70
Vy
sS'block_loop.thisTrialN'
p2627
I0
sg39
F0.99988795687522725
sg34
g753
(S'\x07\xdf\x07\x05\r\x01+\x07\xef@'
tRp2628
sa(dp2629
S'trial_loop.thisTrialN'
p2630
I124
sg895
g1257
sS'block_loop.thisIndex'
p2631
g889
sg38
S'left'
p2632
sg59
g63
sS'trial_loop.thisN'
p2633
I124
sg33
g1268
sg64
g65
sS'trial_loop.thisIndex'
p2634
g60
(g99
S'|\x00\x00\x00'
tRp2635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2636
I0
sg904
g1265
sS'block_loop.thisRepN'
p2637
I0
sg907
g1261
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2638
I0
sg909
g1268
sg55
g11
sS'block_loop.thisTrial'
p2639
Nsg70
Vy
sS'block_loop.thisTrialN'
p2640
I0
sg39
F0.71662412068963022
sg34
g753
(S'\x07\xdf\x07\x05\r\x011\x08AH'
tRp2641
sa(dp2642
S'trial_loop.thisTrialN'
p2643
I125
sg895
g967
sS'block_loop.thisIndex'
p2644
g889
sg38
S'left'
p2645
sg59
g63
sS'trial_loop.thisN'
p2646
I125
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2647
g60
(g99
S'}\x00\x00\x00'
tRp2648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2649
I0
sg904
g975
sS'block_loop.thisRepN'
p2650
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2651
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vy
sS'block_loop.thisTrialN'
p2653
I0
sg39
F0.86659427103268172
sg34
g753
(S'\x07\xdf\x07\x05\r\x017\x04\x8c\x10'
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g1358
sS'block_loop.thisIndex'
p2657
g889
sg38
S'right'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g1365
sS'block_loop.thisRepN'
p2663
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2664
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vy
sS'block_loop.thisTrialN'
p2666
I0
sg39
F0.65000008552942745
sg34
g753
(S'\x07\xdf\x07\x05\r\x02\x01\x02\xf9\xb8'
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g1716
sS'block_loop.thisIndex'
p2670
g889
sg38
S'left'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g1129
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g1723
sS'block_loop.thisRepN'
p2676
I0
sg907
g1122
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2677
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vy
sS'block_loop.thisTrialN'
p2679
I0
sg39
F0.68331110527014971
sg34
g753
(S'\x07\xdf\x07\x05\r\x02\x06\rR('
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g1229
sS'block_loop.thisIndex'
p2683
g889
sg38
S'right'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g1236
sS'block_loop.thisRepN'
p2689
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2690
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vy
sS'block_loop.thisTrialN'
p2692
I0
sg39
F1.1666189604338797
sg34
g753
(S'\x07\xdf\x07\x05\r\x02\x0c\t\x1f\xf0'
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g1300
sS'block_loop.thisIndex'
p2696
g889
sg38
S'right'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g1307
sS'block_loop.thisRepN'
p2702
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2703
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vy
sS'block_loop.thisTrialN'
p2705
I0
sg39
F1.5001508163181825
sg34
g753
(S'\x07\xdf\x07\x05\r\x02\x12\x0c\x15\xc0'
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g1744
sS'block_loop.thisIndex'
p2709
g889
sg38
S'right'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g1345
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g1751
sS'block_loop.thisRepN'
p2715
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2716
I0
sg909
g1352
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vy
sS'block_loop.thisTrialN'
p2718
I0
sg39
F0.80000102634903669
sg34
g753
(S'\x07\xdf\x07\x05\r\x02\x19\x05\x01@'
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g1018
sS'block_loop.thisIndex'
p2722
g889
sg38
S'left'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g1029
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g1026
sS'block_loop.thisRepN'
p2728
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vy
sS'block_loop.thisTrialN'
p2731
I0
sg39
F0.76653434364106943
sg34
g753
(S'\x07\xdf\x07\x05\r\x02\x1f\x02x\xd0'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g1537
sS'block_loop.thisIndex'
p2735
g889
sg38
S'left'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g1541
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g1545
sS'block_loop.thisRepN'
p2741
I0
sg907
g1541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg909
g1548
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vy
sS'block_loop.thisTrialN'
p2744
I0
sg39
F2.3997960986184808
sg34
g753
(S'\x07\xdf\x07\x05\r\x02$\x0e\xbdp'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g950
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g958
sS'block_loop.thisRepN'
p2754
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vy
sS'block_loop.thisTrialN'
p2757
I0
sg39
F0.78335193116163282
sg34
g753
(S'\x07\xdf\x07\x05\r\x02,\x05\xf7X'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g1184
sS'block_loop.thisIndex'
p2761
g889
sg38
S'right'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1194
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g1192
sS'block_loop.thisRepN'
p2767
I0
sg907
g1194
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vy
sS'block_loop.thisTrialN'
p2770
I0
sg39
F0.71667771892725796
sg34
g753
(S'\x07\xdf\x07\x05\r\x022\x034P'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g1815
sS'block_loop.thisIndex'
p2774
g889
sg38
S'right'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g1541
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g1822
sS'block_loop.thisRepN'
p2780
I0
sg907
g1541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg909
g1548
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vy
sS'block_loop.thisTrialN'
p2783
I0
sg39
F0.84978922778054766
sg34
g753
(S'\x07\xdf\x07\x05\r\x027\x0e\xbdp'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g950
sS'block_loop.thisIndex'
p2787
g889
sg38
S'right'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g958
sS'block_loop.thisRepN'
p2793
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vy
sS'block_loop.thisTrialN'
p2796
I0
sg39
F1.516597207531504
sg34
g753
(S'\x07\xdf\x07\x05\r\x03\x01\x0c\xf0\x80'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g1150
sS'block_loop.thisIndex'
p2800
g889
sg38
S'right'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g1154
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g1158
sS'block_loop.thisRepN'
p2806
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vy
sS'block_loop.thisTrialN'
p2809
I0
sg39
F1.28326896793169
sg34
g753
(S'\x07\xdf\x07\x05\r\x03\x08\x06\x1a\x80'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g1135
sS'block_loop.thisIndex'
p2813
g889
sg38
S'right'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g1142
sS'block_loop.thisRepN'
p2819
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vy
sS'block_loop.thisTrialN'
p2822
I0
sg39
F0.84990811323405069
sg34
g753
(S'\x07\xdf\x07\x05\r\x03\x0e\n\xf4\xb0'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1184
sS'block_loop.thisIndex'
p2826
g889
sg38
S'left'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1194
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1192
sS'block_loop.thisRepN'
p2832
I0
sg907
g1194
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vy
sS'block_loop.thisTrialN'
p2835
I0
sg39
F1.0504182658232821
sg34
g753
(S'\x07\xdf\x07\x05\r\x03\x14\t#\xd8'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g1229
sS'block_loop.thisIndex'
p2839
g889
sg38
S'right'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g1236
sS'block_loop.thisRepN'
p2845
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vy
sS'block_loop.thisTrialN'
p2848
I0
sg39
F1.3165717198594393
sg34
g753
(S'\x07\xdf\x07\x05\r\x03\x1a\nk\xf8'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1341
sS'block_loop.thisIndex'
p2852
g889
sg38
S'left'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1345
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1349
sS'block_loop.thisRepN'
p2858
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g1352
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vy
sS'block_loop.thisTrialN'
p2861
I0
sg39
F3.3665600593913041
sg34
g753
(S'\x07\xdf\x07\x05\r\x03!\x00}\x00'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g1787
sS'block_loop.thisIndex'
p2865
g889
sg38
S'right'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g1261
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g1794
sS'block_loop.thisRepN'
p2871
I0
sg907
g1261
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g1268
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vy
sS'block_loop.thisTrialN'
p2874
I0
sg39
F0.96667301482693802
sg34
g753
(S'\x07\xdf\x07\x05\r\x03)\x06|('
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g2014
sS'block_loop.thisIndex'
p2878
g889
sg38
S'right'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1171
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g2021
sS'block_loop.thisRepN'
p2884
I0
sg907
g1171
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g1178
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vy
sS'block_loop.thisTrialN'
p2887
I0
sg39
F0.94987338841792734
sg34
g753
(S'\x07\xdf\x07\x05\r\x03/\x06\x93\x98'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1229
sS'block_loop.thisIndex'
p2891
g889
sg38
S'right'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1236
sS'block_loop.thisRepN'
p2897
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vy
sS'block_loop.thisTrialN'
p2900
I0
sg39
F0.98332980763325395
sg34
g753
(S'\x07\xdf\x07\x05\r\x035\x061\xf0'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g984
sS'block_loop.thisIndex'
p2904
g889
sg38
S'left'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g992
sS'block_loop.thisRepN'
p2910
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vy
sS'block_loop.thisTrialN'
p2913
I0
sg39
F2.7665494537827726
sg34
g753
(S'\x07\xdf\x07\x05\r\x03;\x06\x83\xf8'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g916
sS'block_loop.thisIndex'
p2917
g889
sg38
S'left'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g924
sS'block_loop.thisRepN'
p2923
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vy
sS'block_loop.thisTrialN'
p2926
I0
sg39
F0.81643373290626187
sg34
g753
(S'\x07\xdf\x07\x05\r\x04\x07\x03v\xb8'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g984
sS'block_loop.thisIndex'
p2930
g889
sg38
S'left'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g992
sS'block_loop.thisRepN'
p2936
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vy
sS'block_loop.thisTrialN'
p2939
I0
sg39
F1.0499350263912675
sg34
g753
(S'\x07\xdf\x07\x05\r\x04\r\x01,\xc8'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1815
sS'block_loop.thisIndex'
p2943
g889
sg38
S'right'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1541
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1822
sS'block_loop.thisRepN'
p2949
I0
sg907
g1541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g1548
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vy
sS'block_loop.thisTrialN'
p2952
I0
sg39
F1.0331299831395881
sg34
g753
(S'\x07\xdf\x07\x05\r\x04\x13\x02t\xe8'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1069
sS'block_loop.thisIndex'
p2956
g889
sg38
S'left'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g1079
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1077
sS'block_loop.thisRepN'
p2962
I0
sg907
g1079
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g1073
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vy
sS'block_loop.thisTrialN'
p2965
I0
sg39
F1.7832378923576471
sg34
g753
(S'\x07\xdf\x07\x05\r\x04\x19\x03\x82p'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g1608
sS'block_loop.thisIndex'
p2969
g889
sg38
S'right'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g1615
sS'block_loop.thisRepN'
p2975
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vy
sS'block_loop.thisTrialN'
p2978
I0
sg39
F0.86632485435848139
sg34
g753
(S'\x07\xdf\x07\x05\r\x04 \x00\xb7\x98'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g896
sS'block_loop.thisIndex'
p2982
g889
sg38
S'left'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g905
sS'block_loop.thisRepN'
p2988
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vy
sS'block_loop.thisTrialN'
p2991
I0
sg39
F1.3998964527659155
sg34
g753
(S'\x07\xdf\x07\x05\r\x04%\x0eg\x80'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g967
sS'block_loop.thisIndex'
p2995
g889
sg38
S'left'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g975
sS'block_loop.thisRepN'
p3001
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vy
sS'block_loop.thisTrialN'
p3004
I0
sg39
F0.73320992434082655
sg34
g753
(S'\x07\xdf\x07\x05\r\x04,\x05\xa98'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1358
sS'block_loop.thisIndex'
p3008
g889
sg38
S'right'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1365
sS'block_loop.thisRepN'
p3014
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vy
sS'block_loop.thisTrialN'
p3017
I0
sg39
F0.81657029437383244
sg34
g753
(S'\x07\xdf\x07\x05\r\x042\x02.\x98'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g896
sS'block_loop.thisIndex'
p3021
g889
sg38
S'left'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g905
sS'block_loop.thisRepN'
p3027
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vy
sS'block_loop.thisTrialN'
p3030
I0
sg39
F1.133378929848277
sg34
g753
(S'\x07\xdf\x07\x05\r\x047\x0f&\xe8'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1623
sS'block_loop.thisIndex'
p3034
g889
sg38
S'right'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1194
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1630
sS'block_loop.thisRepN'
p3040
I0
sg907
g1194
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vy
sS'block_loop.thisTrialN'
p3043
I0
sg39
F1.7832515770141981
sg34
g753
(S'\x07\xdf\x07\x05\r\x05\x02\x02]x'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g2014
sS'block_loop.thisIndex'
p3047
g889
sg38
S'right'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1178
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g2021
sS'block_loop.thisRepN'
p3053
I0
sg907
g1171
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g1178
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vy
sS'block_loop.thisTrialN'
p3056
I0
sg39
F1.0832246638565266
sg34
g753
(S'\x07\xdf\x07\x05\r\x05\x08\x0e\xd4\xe0'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g1018
sS'block_loop.thisIndex'
p3060
g889
sg38
S'left'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g1026
sS'block_loop.thisRepN'
p3066
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vy
sS'block_loop.thisTrialN'
p3069
I0
sg39
F0.98330899555230644
sg34
g753
(S'\x07\xdf\x07\x05\r\x05\x0f\x01S\xd8'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1440
sS'block_loop.thisIndex'
p3073
g889
sg38
S'left'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1450
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1448
sS'block_loop.thisRepN'
p3079
I0
sg907
g1450
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g1444
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vy
sS'block_loop.thisTrialN'
p3082
I0
sg39
F1.083262581758845
sg34
g753
(S'\x07\xdf\x07\x05\r\x05\x15\x01\xa9\xc8'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g2081
sS'block_loop.thisIndex'
p3086
g889
sg38
S'right'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g2088
sS'block_loop.thisRepN'
p3092
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vy
sS'block_loop.thisTrialN'
p3095
I0
sg39
F3.7003151462349706
sg34
g753
(S'\x07\xdf\x07\x05\r\x05\x1b\x03k\x00'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g933
sS'block_loop.thisIndex'
p3099
g889
sg38
S'left'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g941
sS'block_loop.thisRepN'
p3105
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vy
sS'block_loop.thisTrialN'
p3108
I0
sg39
F0.98325368673204139
sg34
g753
(S'\x07\xdf\x07\x05\r\x05#\x0e\xa6\x00'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g2239
sS'block_loop.thisIndex'
p3112
g889
sg38
S'left'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g2246
sS'block_loop.thisRepN'
p3118
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vy
sS'block_loop.thisTrialN'
p3121
I0
sg39
F1.2832629808945057
sg34
g753
(S'\x07\xdf\x07\x05\r\x05)\x0e\xfb\xf0'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1440
sS'block_loop.thisIndex'
p3125
g889
sg38
S'left'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1450
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1448
sS'block_loop.thisRepN'
p3131
I0
sg907
g1450
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g1444
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vy
sS'block_loop.thisTrialN'
p3134
I0
sg39
F1.7166694511138303
sg34
g753
(S'\x07\xdf\x07\x05\r\x050\x04\x93\xe0'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1069
sS'block_loop.thisIndex'
p3138
g889
sg38
S'left'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g1079
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1077
sS'block_loop.thisRepN'
p3144
I0
sg907
g1079
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g1073
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vy
sS'block_loop.thisTrialN'
p3147
I0
sg39
F0.69989120698073748
sg34
g753
(S'\x07\xdf\x07\x05\r\x057\x00\x98X'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g1759
sS'block_loop.thisIndex'
p3151
g889
sg38
S'right'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1450
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g1766
sS'block_loop.thisRepN'
p3157
I0
sg907
g1450
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g1444
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vy
sS'block_loop.thisTrialN'
p3160
I0
sg39
F0.95030217432076824
sg34
g753
(S'\x07\xdf\x07\x05\r\x06\x00\x0b\xe6\xe0'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1358
sS'block_loop.thisIndex'
p3164
g889
sg38
S'right'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1365
sS'block_loop.thisRepN'
p3170
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vy
sS'block_loop.thisTrialN'
p3173
I0
sg39
F0.71668399106192737
sg34
g753
(S'\x07\xdf\x07\x05\r\x06\x06\x0b\x858'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1580
sS'block_loop.thisIndex'
p3177
g889
sg38
S'left'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1090
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1587
sS'block_loop.thisRepN'
p3183
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vy
sS'block_loop.thisTrialN'
p3186
I0
sg39
F0.81660906756724216
sg34
g753
(S'\x07\xdf\x07\x05\r\x06\x0c\x07\xcc\x18'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g1787
sS'block_loop.thisIndex'
p3190
g889
sg38
S'right'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g1261
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g1794
sS'block_loop.thisRepN'
p3196
I0
sg907
g1261
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g1268
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vy
sS'block_loop.thisTrialN'
p3199
I0
sg39
F0.96668555909536735
sg34
g753
(S'\x07\xdf\x07\x05\r\x06\x12\x05\x82('
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1895
sS'block_loop.thisIndex'
p3203
g889
sg38
S'right'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1902
sS'block_loop.thisRepN'
p3209
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vy
sS'block_loop.thisTrialN'
p3212
I0
sg39
F0.73331312945856553
sg34
g753
(S'\x07\xdf\x07\x05\r\x06\x18\x05\x99\x98'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1086
sS'block_loop.thisIndex'
p3216
g889
sg38
S'left'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1090
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1094
sS'block_loop.thisRepN'
p3222
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vy
sS'block_loop.thisTrialN'
p3225
I0
sg39
F1.3332421973223063
sg34
g753
(S'\x07\xdf\x07\x05\r\x06\x1e\x01\xe4`'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1759
sS'block_loop.thisIndex'
p3229
g889
sg38
S'right'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1444
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1766
sS'block_loop.thisRepN'
p3235
I0
sg907
g1450
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g1444
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vy
sS'block_loop.thisTrialN'
p3238
I0
sg39
F0.98350428700405246
sg34
g753
(S'\x07\xdf\x07\x05\r\x06$\x07r@'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1399
sS'block_loop.thisIndex'
p3242
g889
sg38
S'right'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1406
sS'block_loop.thisRepN'
p3248
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vy
sS'block_loop.thisTrialN'
p3251
I0
sg39
F0.81662132673864107
sg34
g753
(S'\x07\xdf\x07\x05\r\x06*\x07\xc80'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1300
sS'block_loop.thisIndex'
p3255
g889
sg38
S'right'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1307
sS'block_loop.thisRepN'
p3261
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vy
sS'block_loop.thisTrialN'
p3264
I0
sg39
F2.3332818258068073
sg34
g753
(S'\x07\xdf\x07\x05\r\x060\x05~@'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1103
sS'block_loop.thisIndex'
p3268
g889
sg38
S'left'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1110
sS'block_loop.thisRepN'
p3274
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vy
sS'block_loop.thisTrialN'
p3277
I0
sg39
F0.98328618779123644
sg34
g753
(S'\x07\xdf\x07\x05\r\x067\x0b\x088'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g1537
sS'block_loop.thisIndex'
p3281
g889
sg38
S'left'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g1541
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g1545
sS'block_loop.thisRepN'
p3287
I0
sg907
g1541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g1548
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vy
sS'block_loop.thisTrialN'
p3290
I0
sg39
F1.299880715411291
sg34
g753
(S'\x07\xdf\x07\x05\r\x07\x01\x0b^('
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g1229
sS'block_loop.thisIndex'
p3294
g889
sg38
S'right'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g1236
sS'block_loop.thisRepN'
p3300
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vy
sS'block_loop.thisTrialN'
p3303
I0
sg39
F0.83334454714895401
sg34
g753
(S'\x07\xdf\x07\x05\r\x07\x08\x010\xb0'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1167
sS'block_loop.thisIndex'
p3307
g889
sg38
S'left'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g1171
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1175
sS'block_loop.thisRepN'
p3313
I0
sg907
g1171
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g1178
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vy
sS'block_loop.thisTrialN'
p3316
I0
sg39
F1.4498719629327752
sg34
g753
(S'\x07\xdf\x07\x05\r\x07\r\x0eg\x80'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g1580
sS'block_loop.thisIndex'
p3320
g889
sg38
S'right'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1097
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g1587
sS'block_loop.thisRepN'
p3326
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vy
sS'block_loop.thisTrialN'
p3329
I0
sg39
F0.99995951622440771
sg34
g753
(S'\x07\xdf\x07\x05\r\x07\x14\x06\x9fP'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g1716
sS'block_loop.thisIndex'
p3333
g889
sg38
S'left'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1129
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g1723
sS'block_loop.thisRepN'
p3339
I0
sg907
g1122
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vy
sS'block_loop.thisTrialN'
p3342
I0
sg39
F1.0833498214437896
sg34
g753
(S'\x07\xdf\x07\x05\r\x07\x1a\x06\xf1X'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g1052
sS'block_loop.thisIndex'
p3346
g889
sg38
S'left'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g1060
sS'block_loop.thisRepN'
p3352
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vy
sS'block_loop.thisTrialN'
p3355
I0
sg39
F0.86645143743089648
sg34
g753
(S'\x07\xdf\x07\x05\r\x07 \x08\xb2\x90'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g933
sS'block_loop.thisIndex'
p3359
g889
sg38
S'left'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g941
sS'block_loop.thisRepN'
p3365
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vy
sS'block_loop.thisTrialN'
p3368
I0
sg39
F0.80040073235750242
sg34
g753
(S'\x07\xdf\x07\x05\r\x07&\x07^\xb8'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1069
sS'block_loop.thisIndex'
p3372
g889
sg38
S'left'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1079
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1077
sS'block_loop.thisRepN'
p3378
I0
sg907
g1079
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g1073
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vy
sS'block_loop.thisTrialN'
p3381
I0
sg39
F1.6332098673215114
sg34
g753
(S'\x07\xdf\x07\x05\r\x07,\x04\xd6H'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g950
sS'block_loop.thisIndex'
p3385
g889
sg38
S'right'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g958
sS'block_loop.thisRepN'
p3391
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vy
sS'block_loop.thisTrialN'
p3394
I0
sg39
F1.7999542704396845
sg34
g753
(S'\x07\xdf\x07\x05\r\x072\x0e\xf08'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g1001
sS'block_loop.thisIndex'
p3398
g889
sg38
S'right'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g1009
sS'block_loop.thisRepN'
p3404
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vy
sS'block_loop.thisTrialN'
p3407
I0
sg39
F0.68322956752490427
sg34
g753
(S'\x07\xdf\x07\x05\r\x079\x0c_\xf8'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g2239
sS'block_loop.thisIndex'
p3411
g889
sg38
S'left'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g1154
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g2246
sS'block_loop.thisRepN'
p3417
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vy
sS'block_loop.thisTrialN'
p3420
I0
sg39
F0.8331347157500204
sg34
g753
(S'\x07\xdf\x07\x05\r\x08\x03\x07\xf3('
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g896
sS'block_loop.thisIndex'
p3424
g889
sg38
S'left'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g905
sS'block_loop.thisRepN'
p3430
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vy
sS'block_loop.thisTrialN'
p3433
I0
sg39
F0.90000364924162568
sg34
g753
(S'\x07\xdf\x07\x05\r\x08\t\x05\xe7\xb8'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g1470
sS'block_loop.thisIndex'
p3437
g889
sg38
S'left'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g1477
sS'block_loop.thisRepN'
p3443
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vy
sS'block_loop.thisTrialN'
p3446
I0
sg39
F0.89990329509464573
sg34
g753
(S'\x07\xdf\x07\x05\r\x08\x0f\x05\t\x10'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g1300
sS'block_loop.thisIndex'
p3450
g889
sg38
S'right'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g1307
sS'block_loop.thisRepN'
p3456
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vy
sS'block_loop.thisTrialN'
p3459
I0
sg39
F1.2665682701849619
sg34
g753
(S'\x07\xdf\x07\x05\r\x08\x15\x03\xef\xd0'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1052
sS'block_loop.thisIndex'
p3463
g889
sg38
S'left'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1060
sS'block_loop.thisRepN'
p3469
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vy
sS'block_loop.thisTrialN'
p3472
I0
sg39
F1.0330079616192052
sg34
g753
(S'\x07\xdf\x07\x05\r\x08\x1b\x08\x8fh'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g1341
sS'block_loop.thisIndex'
p3476
g889
sg38
S'right'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1345
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g1349
sS'block_loop.thisRepN'
p3482
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g1352
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vy
sS'block_loop.thisTrialN'
p3485
I0
sg39
F1.2832957670502765
sg34
g753
(S'\x07\xdf\x07\x05\r\x08!\t\x99\x08'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1895
sS'block_loop.thisIndex'
p3489
g889
sg38
S'right'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1902
sS'block_loop.thisRepN'
p3495
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vy
sS'block_loop.thisTrialN'
p3498
I0
sg39
F0.86701792518942966
sg34
g753
(S"\x07\xdf\x07\x05\r\x08'\x0es8"
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g984
sS'block_loop.thisIndex'
p3502
g889
sg38
S'left'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g992
sS'block_loop.thisRepN'
p3508
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vy
sS'block_loop.thisTrialN'
p3511
I0
sg39
F0.85003811746992142
sg34
g753
(S'\x07\xdf\x07\x05\r\x08-\x0c\xe0\xe0'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g967
sS'block_loop.thisIndex'
p3515
g889
sg38
S'left'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g975
sS'block_loop.thisRepN'
p3521
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vy
sS'block_loop.thisTrialN'
p3524
I0
sg39
F0.74994711450472096
sg34
g753
(S'\x07\xdf\x07\x05\r\x083\x0b\x10\x08'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g2239
sS'block_loop.thisIndex'
p3528
g889
sg38
S'left'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g1154
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g2246
sS'block_loop.thisRepN'
p3534
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vy
sS'block_loop.thisTrialN'
p3537
I0
sg39
F0.93327732127409035
sg34
g753
(S'\x07\xdf\x07\x05\r\x089\x07\xd3\xe8'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g1135
sS'block_loop.thisIndex'
p3541
g889
sg38
S'right'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g1142
sS'block_loop.thisRepN'
p3547
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vy
sS'block_loop.thisTrialN'
p3550
I0
sg39
F0.89998397754789039
sg34
g753
(S'\x07\xdf\x07\x05\r\t\x03\x073\xc0'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1440
sS'block_loop.thisIndex'
p3554
g889
sg38
S'left'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g1450
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1448
sS'block_loop.thisRepN'
p3560
I0
sg907
g1450
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g1444
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vy
sS'block_loop.thisTrialN'
p3563
I0
sg39
F0.73321733686316293
sg34
g753
(S'\x07\xdf\x07\x05\r\t\t\x06U\x18'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1580
sS'block_loop.thisIndex'
p3567
g889
sg38
S'right'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1097
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1587
sS'block_loop.thisRepN'
p3573
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vy
sS'block_loop.thisTrialN'
p3576
I0
sg39
F1.0164238685497367
sg34
g753
(S'\x07\xdf\x07\x05\r\t\x0f\x02\x9f\xe0'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1399
sS'block_loop.thisIndex'
p3580
g889
sg38
S'right'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1406
sS'block_loop.thisRepN'
p3586
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vy
sS'block_loop.thisTrialN'
p3589
I0
sg39
F1.3832929731001968
sg34
g753
(S'\x07\xdf\x07\x05\r\t\x15\x03n\xe8'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g1118
sS'block_loop.thisIndex'
p3593
g889
sg38
S'right'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g1129
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1126
sS'block_loop.thisRepN'
p3599
I0
sg907
g1122
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vy
sS'block_loop.thisTrialN'
p3602
I0
sg39
F1.1000470980261525
sg34
g753
(S'\x07\xdf\x07\x05\r\t\x1b\t\xb4`'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g2081
sS'block_loop.thisIndex'
p3606
g889
sg38
S'right'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g2088
sS'block_loop.thisRepN'
p3612
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vy
sS'block_loop.thisTrialN'
p3615
I0
sg39
F0.7332951683470128
sg34
g753
(S'\x07\xdf\x07\x05\r\t!\x0b\xf2\x98'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F135.54617887328504
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vy
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vy
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'36-fig_rolls.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'left'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'34-hula_hoops_bbq_beef_redo.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'36-fig_rolls.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vy
sS'block_loop.thisTrialN'
p3650
I0
sg39
F0.93313876412730679
sg34
g753
(S'\x07\xdf\x07\x05\r\r#\x02\xf1\xe8'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'1-treacle_cookies.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'left'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'21-nakd_banana_crunch.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'21-nakd_banana_crunch.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
S'1-treacle_cookies.png'
p3664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3665
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vy
sS'block_loop.thisTrialN'
p3667
I0
sg39
F1.4165968654151584
sg34
g753
(S'\x07\xdf\x07\x05\r\r)\x02Q\xc0'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'22-daim.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'right'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'7-olives.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'7-olives.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3681
I1
sg3647
S'22-daim.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vy
sS'block_loop.thisTrialN'
p3684
I0
sg39
F0.83325787765807036
sg34
g753
(S'\x07\xdf\x07\x05\r\r/\tR\xb8'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'18-mms.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'right'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'43-mrporky_pork_crackles_redo.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3698
I1
sg3647
S'18-mms.png'
p3699
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vy
sS'block_loop.thisTrialN'
p3701
I0
sg39
F1.0999102514610968
sg34
g753
(S'\x07\xdf\x07\x05\r\r5\x07C`'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'16-skips_prawn.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'left'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'16-skips_prawn.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3715
I1
sg3647
S'42-mrkipling_lemon_slices.png'
p3716
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vy
sS'block_loop.thisTrialN'
p3718
I0
sg39
F1.7664958555446901
sg34
g753
(S'\x07\xdf\x07\x05\r\r;\tC\x18'
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
S'21-nakd_banana_crunch.png'
p3722
sS'block_loop.thisIndex'
p3723
g3627
sg38
S'right'
p3724
sg59
g63
sS'trial_loop.thisN'
p3725
I5
sg33
g3664
sg64
g65
sS'trial_loop.thisIndex'
p3726
g60
(g99
S'\x05\x00\x00\x00'
tRp3727
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3728
I0
sg3642
S'1-treacle_cookies.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3645
g3664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3731
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p3732
Nsg70
Vy
sS'block_loop.thisTrialN'
p3733
I0
sg39
F0.73376044666702001
sg34
g753
(S'\x07\xdf\x07\x05\r\x0e\x06\x06=\xa8'
tRp3734
sa(dp3735
S'trial_loop.thisTrialN'
p3736
I6
sg3633
S'27-hartleys_raspberries_jelly.png'
p3737
sS'block_loop.thisIndex'
p3738
g3627
sg38
S'left'
p3739
sg59
g63
sS'trial_loop.thisN'
p3740
I6
sg33
S'27-hartleys_raspberries_jelly.png'
p3741
sg64
g65
sS'trial_loop.thisIndex'
p3742
g60
(g99
S'\x06\x00\x00\x00'
tRp3743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3744
I0
sg3642
S'51-mars.png'
p3745
sS'block_loop.thisRepN'
p3746
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3747
I1
sg3647
S'51-mars.png'
p3748
sg55
g11
sS'block_loop.thisTrial'
p3749
Nsg70
Vy
sS'block_loop.thisTrialN'
p3750
I0
sg39
F0.91663991506356979
sg34
g753
(S'\x07\xdf\x07\x05\r\x0e\x0c\x02\x84\x88'
tRp3751
sa(dp3752
S'trial_loop.thisTrialN'
p3753
I7
sg3633
S'40-sardines.png'
p3754
sS'block_loop.thisIndex'
p3755
g3627
sg38
S'left'
p3756
sg59
g63
sS'trial_loop.thisN'
p3757
I7
sg33
S'40-sardines.png'
p3758
sg64
g65
sS'trial_loop.thisIndex'
p3759
g60
(g99
S'\x07\x00\x00\x00'
tRp3760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3761
I0
sg3642
S'5-pineapple.png'
p3762
sS'block_loop.thisRepN'
p3763
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3764
I1
sg3647
S'5-pineapple.png'
p3765
sg55
g11
sS'block_loop.thisTrial'
p3766
Nsg70
Vy
sS'block_loop.thisTrialN'
p3767
I0
sg39
F0.6333364503939265
sg34
g753
(S'\x07\xdf\x07\x05\r\x0e\x12\x01\xe4`'
tRp3768
sa(dp3769
S'trial_loop.thisTrialN'
p3770
I8
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p3771
sS'block_loop.thisIndex'
p3772
g3627
sg38
S'right'
p3773
sg59
g63
sS'trial_loop.thisN'
p3774
I8
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3775
g60
(g99
S'\x08\x00\x00\x00'
tRp3776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3777
I0
sg3642
S'36-fig_rolls.png'
p3778
sS'block_loop.thisRepN'
p3779
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3780
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3781
Nsg70
Vy
sS'block_loop.thisTrialN'
p3782
I0
sg39
F0.6000017676014977
sg34
g753
(S'\x07\xdf\x07\x05\r\x0e\x17\x0c\x028'
tRp3783
sa(dp3784
S'trial_loop.thisTrialN'
p3785
I9
sg3633
S'23-crunchie_redo.png'
p3786
sS'block_loop.thisIndex'
p3787
g3627
sg38
S'left'
p3788
sg59
g63
sS'trial_loop.thisN'
p3789
I9
sg33
S'23-crunchie_redo.png'
p3790
sg64
g65
sS'trial_loop.thisIndex'
p3791
g60
(g99
S'\t\x00\x00\x00'
tRp3792
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3793
I0
sg3642
S'33-ambrosia_rice.png'
p3794
sS'block_loop.thisRepN'
p3795
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3796
I1
sg3647
S'33-ambrosia_rice.png'
p3797
sg55
g11
sS'block_loop.thisTrial'
p3798
Nsg70
Vy
sS'block_loop.thisTrialN'
p3799
I0
sg39
F1.116639458908594
sg34
g753
(S'\x07\xdf\x07\x05\r\x0e\x1d\x06d\xb8'
tRp3800
sa(dp3801
S'trial_loop.thisTrialN'
p3802
I10
sg3633
S'2-steamed_puddings.png'
p3803
sS'block_loop.thisIndex'
p3804
g3627
sg38
S'right'
p3805
sg59
g63
sS'trial_loop.thisN'
p3806
I10
sg33
S'20-fruit_pastilles.png'
p3807
sg64
g65
sS'trial_loop.thisIndex'
p3808
g60
(g99
S'\n\x00\x00\x00'
tRp3809
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3810
I0
sg3642
S'20-fruit_pastilles.png'
p3811
sS'block_loop.thisRepN'
p3812
I1
sg3645
S'2-steamed_puddings.png'
p3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3814
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p3815
Nsg70
Vy
sS'block_loop.thisTrialN'
p3816
I0
sg39
F0.78330603054291714
sg34
g753
(S'\x07\xdf\x07\x05\r\x0e#\x08\x9f\x08'
tRp3817
sa(dp3818
S'trial_loop.thisTrialN'
p3819
I11
sg3633
S'6-sour_patch_kids.png'
p3820
sS'block_loop.thisIndex'
p3821
g3627
sg38
S'right'
p3822
sg59
g63
sS'trial_loop.thisN'
p3823
I11
sg33
S'6-sour_patch_kids.png'
p3824
sg64
g65
sS'trial_loop.thisIndex'
p3825
g60
(g99
S'\x0b\x00\x00\x00'
tRp3826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3827
I0
sg3642
S'38-maltesers.png'
p3828
sS'block_loop.thisRepN'
p3829
I1
sg3645
S'38-maltesers.png'
p3830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3831
I1
sg3647
g3824
sg55
g11
sS'block_loop.thisTrial'
p3832
Nsg70
Vy
sS'block_loop.thisTrialN'
p3833
I0
sg39
F0.8161295343970778
sg34
g753
(S'\x07\xdf\x07\x05\r\x0e)\x05\xdc\x00'
tRp3834
sa(dp3835
S'trial_loop.thisTrialN'
p3836
I12
sg3633
S'19-caramello_redo.png'
p3837
sS'block_loop.thisIndex'
p3838
g3627
sg38
S'right'
p3839
sg59
g63
sS'trial_loop.thisN'
p3840
I12
sg33
S'30-spaghetti_hoops.png'
p3841
sg64
g65
sS'trial_loop.thisIndex'
p3842
g60
(g99
S'\x0c\x00\x00\x00'
tRp3843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3844
I0
sg3642
S'30-spaghetti_hoops.png'
p3845
sS'block_loop.thisRepN'
p3846
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3847
I1
sg3647
S'19-caramello_redo.png'
p3848
sg55
g11
sS'block_loop.thisTrial'
p3849
Nsg70
Vy
sS'block_loop.thisTrialN'
p3850
I0
sg39
F1.3165491971953998
sg34
g753
(S'\x07\xdf\x07\x05\r\x0e/\x03\x92\x10'
tRp3851
sa(dp3852
S'trial_loop.thisTrialN'
p3853
I13
sg3633
g3722
sS'block_loop.thisIndex'
p3854
g3627
sg38
S'right'
p3855
sg59
g63
sS'trial_loop.thisN'
p3856
I13
sg33
g3664
sg64
g65
sS'trial_loop.thisIndex'
p3857
g60
(g99
S'\r\x00\x00\x00'
tRp3858
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3859
I0
sg3642
g3729
sS'block_loop.thisRepN'
p3860
I1
sg3645
g3664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3861
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p3862
Nsg70
Vy
sS'block_loop.thisTrialN'
p3863
I0
sg39
F0.81653437215072699
sg34
g753
(S'\x07\xdf\x07\x05\r\x0e5\x08\xe5X'
tRp3864
sa(dp3865
S'trial_loop.thisTrialN'
p3866
I14
sg3633
g3754
sS'block_loop.thisIndex'
p3867
g3627
sg38
S'left'
p3868
sg59
g63
sS'trial_loop.thisN'
p3869
I14
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p3870
g60
(g99
S'\x0e\x00\x00\x00'
tRp3871
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3872
I0
sg3642
g3762
sS'block_loop.thisRepN'
p3873
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3874
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p3875
Nsg70
Vy
sS'block_loop.thisTrialN'
p3876
I0
sg39
F1.2332469869520537
sg34
g753
(S'\x07\xdf\x07\x05\r\x0e;\x06\x9bh'
tRp3877
sa(dp3878
S'trial_loop.thisTrialN'
p3879
I15
sg3633
S'10-bounty_redo.png'
p3880
sS'block_loop.thisIndex'
p3881
g3627
sg38
S'right'
p3882
sg59
g63
sS'trial_loop.thisN'
p3883
I15
sg33
S'4-corn.png'
p3884
sg64
g65
sS'trial_loop.thisIndex'
p3885
g60
(g99
S'\x0f\x00\x00\x00'
tRp3886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3887
I0
sg3642
S'4-corn.png'
p3888
sS'block_loop.thisRepN'
p3889
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3890
I1
sg3647
S'10-bounty_redo.png'
p3891
sg55
g11
sS'block_loop.thisTrial'
p3892
Nsg70
Vy
sS'block_loop.thisTrialN'
p3893
I0
sg39
F1.049995181860595
sg34
g753
(S'\x07\xdf\x07\x05\r\x0f\x05\n\xbe\x00'
tRp3894
sa(dp3895
S'trial_loop.thisTrialN'
p3896
I16
sg3633
g3803
sS'block_loop.thisIndex'
p3897
g3627
sg38
S'right'
p3898
sg59
g63
sS'trial_loop.thisN'
p3899
I16
sg33
g3813
sg64
g65
sS'trial_loop.thisIndex'
p3900
g60
(g99
S'\x10\x00\x00\x00'
tRp3901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3902
I0
sg3642
g3811
sS'block_loop.thisRepN'
p3903
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3904
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p3905
Nsg70
Vy
sS'block_loop.thisTrialN'
p3906
I0
sg39
F0.95002334944501854
sg34
g753
(S'\x07\xdf\x07\x05\r\x0f\x0b\x0c\n\x08'
tRp3907
sa(dp3908
S'trial_loop.thisTrialN'
p3909
I17
sg3633
g3771
sS'block_loop.thisIndex'
p3910
g3627
sg38
S'right'
p3911
sg59
g63
sS'trial_loop.thisN'
p3912
I17
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3913
g60
(g99
S'\x11\x00\x00\x00'
tRp3914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3915
I0
sg3642
g3778
sS'block_loop.thisRepN'
p3916
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3917
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3918
Nsg70
Vy
sS'block_loop.thisTrialN'
p3919
I0
sg39
F0.60007503753331548
sg34
g753
(S'\x07\xdf\x07\x05\r\x0f\x11\x0b\xe2\xf8'
tRp3920
sa(dp3921
S'trial_loop.thisTrialN'
p3922
I18
sg3633
S'3-ellas_strawberries_apples.png'
p3923
sS'block_loop.thisIndex'
p3924
g3627
sg38
S'right'
p3925
sg59
g63
sS'trial_loop.thisN'
p3926
I18
sg33
S'13-mccoys_steak_crisps.png'
p3927
sg64
g65
sS'trial_loop.thisIndex'
p3928
g60
(g99
S'\x12\x00\x00\x00'
tRp3929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3930
I0
sg3642
S'13-mccoys_steak_crisps.png'
p3931
sS'block_loop.thisRepN'
p3932
I1
sg3645
S'3-ellas_strawberries_apples.png'
p3933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3934
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p3935
Nsg70
Vy
sS'block_loop.thisTrialN'
p3936
I0
sg39
F0.81666323599938551
sg34
g753
(S'\x07\xdf\x07\x05\r\x0f\x17\x06Ex'
tRp3937
sa(dp3938
S'trial_loop.thisTrialN'
p3939
I19
sg3633
g3771
sS'block_loop.thisIndex'
p3940
g3627
sg38
S'right'
p3941
sg59
g63
sS'trial_loop.thisN'
p3942
I19
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3943
g60
(g99
S'\x13\x00\x00\x00'
tRp3944
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3945
I0
sg3642
g3778
sS'block_loop.thisRepN'
p3946
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3947
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3948
Nsg70
Vy
sS'block_loop.thisTrialN'
p3949
I0
sg39
F0.60000005701931514
sg34
g753
(S'\x07\xdf\x07\x05\r\x0f\x1d\x03\xfb\x88'
tRp3950
sa(dp3951
S'trial_loop.thisTrialN'
p3952
I20
sg3633
g3754
sS'block_loop.thisIndex'
p3953
g3627
sg38
S'left'
p3954
sg59
g63
sS'trial_loop.thisN'
p3955
I20
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p3956
g60
(g99
S'\x14\x00\x00\x00'
tRp3957
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3958
I0
sg3642
g3762
sS'block_loop.thisRepN'
p3959
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3960
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p3961
Nsg70
Vy
sS'block_loop.thisTrialN'
p3962
I0
sg39
F0.88309996242423949
sg34
g753
(S'\x07\xdf\x07\x05\r\x0f"\r\x9c`'
tRp3963
sa(dp3964
S'trial_loop.thisTrialN'
p3965
I21
sg3633
S'46-pistachios.png'
p3966
sS'block_loop.thisIndex'
p3967
g3627
sg38
S'left'
p3968
sg59
g63
sS'trial_loop.thisN'
p3969
I21
sg33
S'46-pistachios.png'
p3970
sg64
g65
sS'trial_loop.thisIndex'
p3971
g60
(g99
S'\x15\x00\x00\x00'
tRp3972
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3973
I0
sg3642
S'29-beans.png'
p3974
sS'block_loop.thisRepN'
p3975
I1
sg3645
g3970
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3976
I1
sg3647
S'29-beans.png'
p3977
sg55
g11
sS'block_loop.thisTrial'
p3978
Nsg70
Vy
sS'block_loop.thisTrialN'
p3979
I0
sg39
F0.66663093450824817
sg34
g753
(S'\x07\xdf\x07\x05\r\x0f(\x0cH\x88'
tRp3980
sa(dp3981
S'trial_loop.thisTrialN'
p3982
I22
sg3633
g3923
sS'block_loop.thisIndex'
p3983
g3627
sg38
S'right'
p3984
sg59
g63
sS'trial_loop.thisN'
p3985
I22
sg33
g3933
sg64
g65
sS'trial_loop.thisIndex'
p3986
g60
(g99
S'\x16\x00\x00\x00'
tRp3987
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3988
I0
sg3642
g3931
sS'block_loop.thisRepN'
p3989
I1
sg3645
g3933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3990
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p3991
Nsg70
Vy
sS'block_loop.thisTrialN'
p3992
I0
sg39
F0.66697419130832714
sg34
g753
(S'\x07\xdf\x07\x05\r\x0f.\x07\x9d8'
tRp3993
sa(dp3994
S'trial_loop.thisTrialN'
p3995
I23
sg3633
S'7-olives.png'
p3996
sS'block_loop.thisIndex'
p3997
g3627
sg38
S'left'
p3998
sg59
g63
sS'trial_loop.thisN'
p3999
I23
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4000
g60
(g99
S'\x17\x00\x00\x00'
tRp4001
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4002
I0
sg3642
S'22-daim.png'
p4003
sS'block_loop.thisRepN'
p4004
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4005
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4006
Nsg70
Vy
sS'block_loop.thisTrialN'
p4007
I0
sg39
F0.66662038591857709
sg34
g753
(S'\x07\xdf\x07\x05\r\x0f4\x03,\x80'
tRp4008
sa(dp4009
S'trial_loop.thisTrialN'
p4010
I24
sg3633
S'42-mrkipling_lemon_slices.png'
p4011
sS'block_loop.thisIndex'
p4012
g3627
sg38
S'right'
p4013
sg59
g63
sS'trial_loop.thisN'
p4014
I24
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4015
g60
(g99
S'\x18\x00\x00\x00'
tRp4016
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4017
I0
sg3642
S'16-skips_prawn.png'
p4018
sS'block_loop.thisRepN'
p4019
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4020
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4021
Nsg70
Vy
sS'block_loop.thisTrialN'
p4022
I0
sg39
F0.96649939074768554
sg34
g753
(S'\x07\xdf\x07\x05\r\x0f9\r\xc3p'
tRp4023
sa(dp4024
S'trial_loop.thisTrialN'
p4025
I25
sg3633
S'26-walkers_smoky_bacon.png'
p4026
sS'block_loop.thisIndex'
p4027
g3627
sg38
S'left'
p4028
sg59
g63
sS'trial_loop.thisN'
p4029
I25
sg33
S'26-walkers_smoky_bacon.png'
p4030
sg64
g65
sS'trial_loop.thisIndex'
p4031
g60
(g99
S'\x19\x00\x00\x00'
tRp4032
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4033
I0
sg3642
S'44-crunch.png'
p4034
sS'block_loop.thisRepN'
p4035
I1
sg3645
g4030
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4036
I1
sg3647
S'44-crunch.png'
p4037
sg55
g11
sS'block_loop.thisTrial'
p4038
Nsg70
Vy
sS'block_loop.thisTrialN'
p4039
I0
sg39
F1.8999811265780409
sg34
g753
(S'\x07\xdf\x07\x05\r\x10\x03\r\xda\xe0'
tRp4040
sa(dp4041
S'trial_loop.thisTrialN'
p4042
I26
sg3633
g3880
sS'block_loop.thisIndex'
p4043
g3627
sg38
S'right'
p4044
sg59
g63
sS'trial_loop.thisN'
p4045
I26
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p4046
g60
(g99
S'\x1a\x00\x00\x00'
tRp4047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4048
I0
sg3642
g3888
sS'block_loop.thisRepN'
p4049
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4050
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p4051
Nsg70
Vy
sS'block_loop.thisTrialN'
p4052
I0
sg39
F0.89983287613267748
sg34
g753
(S'\x07\xdf\x07\x05\r\x10\n\x0c\xbd\xb8'
tRp4053
sa(dp4054
S'trial_loop.thisTrialN'
p4055
I27
sg3633
S'35-raisins.png'
p4056
sS'block_loop.thisIndex'
p4057
g3627
sg38
S'left'
p4058
sg59
g63
sS'trial_loop.thisN'
p4059
I27
sg33
S'35-raisins.png'
p4060
sg64
g65
sS'trial_loop.thisIndex'
p4061
g60
(g99
S'\x1b\x00\x00\x00'
tRp4062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4063
I0
sg3642
S'49-yorkie.png'
p4064
sS'block_loop.thisRepN'
p4065
I1
sg3645
g4060
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4066
I1
sg3647
S'49-yorkie.png'
p4067
sg55
g11
sS'block_loop.thisTrial'
p4068
Nsg70
Vy
sS'block_loop.thisTrialN'
p4069
I0
sg39
F0.85030439807769653
sg34
g753
(S'\x07\xdf\x07\x05\r\x10\x10\x0b\xdf\x10'
tRp4070
sa(dp4071
S'trial_loop.thisTrialN'
p4072
I28
sg3633
S'25-kitkat.png'
p4073
sS'block_loop.thisIndex'
p4074
g3627
sg38
S'left'
p4075
sg59
g63
sS'trial_loop.thisN'
p4076
I28
sg33
S'31-hobnobs.png'
p4077
sg64
g65
sS'trial_loop.thisIndex'
p4078
g60
(g99
S'\x1c\x00\x00\x00'
tRp4079
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4080
I0
sg3642
S'31-hobnobs.png'
p4081
sS'block_loop.thisRepN'
p4082
I1
sg3645
g4077
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4083
I1
sg3647
S'25-kitkat.png'
p4084
sg55
g11
sS'block_loop.thisTrial'
p4085
Nsg70
Vy
sS'block_loop.thisTrialN'
p4086
I0
sg39
F2.83322851266621
sg34
g753
(S'\x07\xdf\x07\x05\r\x10\x16\n\x0e8'
tRp4087
sa(dp4088
S'trial_loop.thisTrialN'
p4089
I29
sg3633
g3820
sS'block_loop.thisIndex'
p4090
g3627
sg38
S'right'
p4091
sg59
g63
sS'trial_loop.thisN'
p4092
I29
sg33
g3830
sg64
g65
sS'trial_loop.thisIndex'
p4093
g60
(g99
S'\x1d\x00\x00\x00'
tRp4094
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4095
I0
sg3642
g3828
sS'block_loop.thisRepN'
p4096
I1
sg3645
g3830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4097
I1
sg3647
g3824
sg55
g11
sS'block_loop.thisTrial'
p4098
Nsg70
Vy
sS'block_loop.thisTrialN'
p4099
I0
sg39
F0.6497577530703893
sg34
g753
(S'\x07\xdf\x07\x05\r\x10\x1e\x07\xf7\x10'
tRp4100
sa(dp4101
S'trial_loop.thisTrialN'
p4102
I30
sg3633
S'8-liquorice_catherine_wheels.png'
p4103
sS'block_loop.thisIndex'
p4104
g3627
sg38
S'right'
p4105
sg59
g63
sS'trial_loop.thisN'
p4106
I30
sg33
S'17-jacobs_mini_cheddars_redo.png'
p4107
sg64
g65
sS'trial_loop.thisIndex'
p4108
g60
(g99
S'\x1e\x00\x00\x00'
tRp4109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4110
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p4111
sS'block_loop.thisRepN'
p4112
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4113
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p4114
sg55
g11
sS'block_loop.thisTrial'
p4115
Nsg70
Vy
sS'block_loop.thisTrialN'
p4116
I0
sg39
F0.750058017241372
sg34
g753
(S'\x07\xdf\x07\x05\r\x10$\x03\r@'
tRp4117
sa(dp4118
S'trial_loop.thisTrialN'
p4119
I31
sg3633
S'44-crunch.png'
p4120
sS'block_loop.thisIndex'
p4121
g3627
sg38
S'right'
p4122
sg59
g63
sS'trial_loop.thisN'
p4123
I31
sg33
g4030
sg64
g65
sS'trial_loop.thisIndex'
p4124
g60
(g99
S'\x1f\x00\x00\x00'
tRp4125
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4126
I0
sg3642
S'26-walkers_smoky_bacon.png'
p4127
sS'block_loop.thisRepN'
p4128
I1
sg3645
g4030
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4129
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p4130
Nsg70
Vy
sS'block_loop.thisTrialN'
p4131
I0
sg39
F0.9665780775226267
sg34
g753
(S'\x07\xdf\x07\x05\r\x10)\x0f\x13`'
tRp4132
sa(dp4133
S'trial_loop.thisTrialN'
p4134
I32
sg3633
S'31-hobnobs.png'
p4135
sS'block_loop.thisIndex'
p4136
g3627
sg38
S'right'
p4137
sg59
g63
sS'trial_loop.thisN'
p4138
I32
sg33
g4077
sg64
g65
sS'trial_loop.thisIndex'
p4139
g60
(g99
S' \x00\x00\x00'
tRp4140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4141
I0
sg3642
S'25-kitkat.png'
p4142
sS'block_loop.thisRepN'
p4143
I1
sg3645
g4077
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4144
I1
sg3647
g4084
sg55
g11
sS'block_loop.thisTrial'
p4145
Nsg70
Vy
sS'block_loop.thisTrialN'
p4146
I0
sg39
F0.86703588630098238
sg34
g753
(S'\x07\xdf\x07\x05\r\x10/\x0f*\xd0'
tRp4147
sa(dp4148
S'trial_loop.thisTrialN'
p4149
I33
sg3633
g3737
sS'block_loop.thisIndex'
p4150
g3627
sg38
S'left'
p4151
sg59
g63
sS'trial_loop.thisN'
p4152
I33
sg33
g3748
sg64
g65
sS'trial_loop.thisIndex'
p4153
g60
(g99
S'!\x00\x00\x00'
tRp4154
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4155
I0
sg3642
g3745
sS'block_loop.thisRepN'
p4156
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4157
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4158
Nsg70
Vy
sS'block_loop.thisTrialN'
p4159
I0
sg39
F0.66656621748643374
sg34
g753
(S'\x07\xdf\x07\x05\r\x105\r\x98x'
tRp4160
sa(dp4161
S'trial_loop.thisTrialN'
p4162
I34
sg3633
g4120
sS'block_loop.thisIndex'
p4163
g3627
sg38
S'right'
p4164
sg59
g63
sS'trial_loop.thisN'
p4165
I34
sg33
g4030
sg64
g65
sS'trial_loop.thisIndex'
p4166
g60
(g99
S'"\x00\x00\x00'
tRp4167
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4168
I0
sg3642
g4127
sS'block_loop.thisRepN'
p4169
I1
sg3645
g4030
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4170
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p4171
Nsg70
Vy
sS'block_loop.thisTrialN'
p4172
I0
sg39
F0.74991603893067804
sg34
g753
(S'\x07\xdf\x07\x05\r\x10;\x08\xed('
tRp4173
sa(dp4174
S'trial_loop.thisTrialN'
p4175
I35
sg3633
S'5-pineapple.png'
p4176
sS'block_loop.thisIndex'
p4177
g3627
sg38
S'right'
p4178
sg59
g63
sS'trial_loop.thisN'
p4179
I35
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4180
g60
(g99
S'#\x00\x00\x00'
tRp4181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4182
I0
sg3642
S'40-sardines.png'
p4183
sS'block_loop.thisRepN'
p4184
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4185
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4186
Nsg70
Vy
sS'block_loop.thisTrialN'
p4187
I0
sg39
F0.99990135643474787
sg34
g753
(S'\x07\xdf\x07\x05\r\x11\x05\x05\xad '
tRp4188
sa(dp4189
S'trial_loop.thisTrialN'
p4190
I36
sg3633
g3880
sS'block_loop.thisIndex'
p4191
g3627
sg38
S'right'
p4192
sg59
g63
sS'trial_loop.thisN'
p4193
I36
sg33
g3891
sg64
g65
sS'trial_loop.thisIndex'
p4194
g60
(g99
S'$\x00\x00\x00'
tRp4195
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4196
I0
sg3642
g3888
sS'block_loop.thisRepN'
p4197
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4198
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p4199
Nsg70
Vy
sS'block_loop.thisTrialN'
p4200
I0
sg39
F1.0999801002285494
sg34
g753
(S'\x07\xdf\x07\x05\r\x11\x0b\x06A\x90'
tRp4201
sa(dp4202
S'trial_loop.thisTrialN'
p4203
I37
sg3633
g4011
sS'block_loop.thisIndex'
p4204
g3627
sg38
S'right'
p4205
sg59
g63
sS'trial_loop.thisN'
p4206
I37
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p4207
g60
(g99
S'%\x00\x00\x00'
tRp4208
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4209
I0
sg3642
g4018
sS'block_loop.thisRepN'
p4210
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4211
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4212
Nsg70
Vy
sS'block_loop.thisTrialN'
p4213
I0
sg39
F1.0164441104375328
sg34
g753
(S'\x07\xdf\x07\x05\r\x11\x11\x08=`'
tRp4214
sa(dp4215
S'trial_loop.thisTrialN'
p4216
I38
sg3633
g3771
sS'block_loop.thisIndex'
p4217
g3627
sg38
S'right'
p4218
sg59
g63
sS'trial_loop.thisN'
p4219
I38
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4220
g60
(g99
S'&\x00\x00\x00'
tRp4221
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4222
I0
sg3642
g3778
sS'block_loop.thisRepN'
p4223
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4224
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4225
Nsg70
Vy
sS'block_loop.thisTrialN'
p4226
I0
sg39
F1.083693933534505
sg34
g753
(S'\x07\xdf\x07\x05\r\x11\x17\t\x0ch'
tRp4227
sa(dp4228
S'trial_loop.thisTrialN'
p4229
I39
sg3633
S'33-ambrosia_rice.png'
p4230
sS'block_loop.thisIndex'
p4231
g3627
sg38
S'right'
p4232
sg59
g63
sS'trial_loop.thisN'
p4233
I39
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p4234
g60
(g99
S"'\x00\x00\x00"
tRp4235
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4236
I0
sg3642
S'23-crunchie_redo.png'
p4237
sS'block_loop.thisRepN'
p4238
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4239
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p4240
Nsg70
Vy
sS'block_loop.thisTrialN'
p4241
I0
sg39
F1.016633699949125
sg34
g753
(S'\x07\xdf\x07\x05\r\x11\x1d\n\xcd\xa0'
tRp4242
sa(dp4243
S'trial_loop.thisTrialN'
p4244
I40
sg3633
g3654
sS'block_loop.thisIndex'
p4245
g3627
sg38
S'left'
p4246
sg59
g63
sS'trial_loop.thisN'
p4247
I40
sg33
g3664
sg64
g65
sS'trial_loop.thisIndex'
p4248
g60
(g99
S'(\x00\x00\x00'
tRp4249
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4250
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4251
I1
sg3645
g3664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4252
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p4253
Nsg70
Vy
sS'block_loop.thisTrialN'
p4254
I0
sg39
F0.69998728467362525
sg34
g753
(S'\x07\xdf\x07\x05\r\x11#\x0b\x9c\xa8'
tRp4255
sa(dp4256
S'trial_loop.thisTrialN'
p4257
I41
sg3633
g4135
sS'block_loop.thisIndex'
p4258
g3627
sg38
S'right'
p4259
sg59
g63
sS'trial_loop.thisN'
p4260
I41
sg33
g4077
sg64
g65
sS'trial_loop.thisIndex'
p4261
g60
(g99
S')\x00\x00\x00'
tRp4262
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4263
I0
sg3642
g4142
sS'block_loop.thisRepN'
p4264
I1
sg3645
g4077
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4265
I1
sg3647
g4084
sg55
g11
sS'block_loop.thisTrial'
p4266
Nsg70
Vy
sS'block_loop.thisTrialN'
p4267
I0
sg39
F0.98326138435095345
sg34
g753
(S'\x07\xdf\x07\x05\r\x11)\x07jp'
tRp4268
sa(dp4269
S'trial_loop.thisTrialN'
p4270
I42
sg3633
g3634
sS'block_loop.thisIndex'
p4271
g3627
sg38
S'right'
p4272
sg59
g63
sS'trial_loop.thisN'
p4273
I42
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4274
g60
(g99
S'*\x00\x00\x00'
tRp4275
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4276
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4277
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4278
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4279
Nsg70
Vy
sS'block_loop.thisTrialN'
p4280
I0
sg39
F0.86667096212795514
sg34
g753
(S'\x07\xdf\x07\x05\r\x11/\x07\xc0`'
tRp4281
sa(dp4282
S'trial_loop.thisTrialN'
p4283
I43
sg3633
S'38-maltesers.png'
p4284
sS'block_loop.thisIndex'
p4285
g3627
sg38
S'left'
p4286
sg59
g63
sS'trial_loop.thisN'
p4287
I43
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p4288
g60
(g99
S'+\x00\x00\x00'
tRp4289
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4290
I0
sg3642
S'6-sour_patch_kids.png'
p4291
sS'block_loop.thisRepN'
p4292
I1
sg3645
g3830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4293
I1
sg3647
g3824
sg55
g11
sS'block_loop.thisTrial'
p4294
Nsg70
Vy
sS'block_loop.thisTrialN'
p4295
I0
sg39
F0.68306592184126202
sg34
g753
(S'\x07\xdf\x07\x05\r\x115\x06.\x08'
tRp4296
sa(dp4297
S'trial_loop.thisTrialN'
p4298
I44
sg3633
g3634
sS'block_loop.thisIndex'
p4299
g3627
sg38
S'right'
p4300
sg59
g63
sS'trial_loop.thisN'
p4301
I44
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4302
g60
(g99
S',\x00\x00\x00'
tRp4303
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4304
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4305
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4306
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4307
Nsg70
Vy
sS'block_loop.thisTrialN'
p4308
I0
sg39
F0.93337482445167552
sg34
g753
(S'\x07\xdf\x07\x05\r\x11;\x01\xbdP'
tRp4309
sa(dp4310
S'trial_loop.thisTrialN'
p4311
I45
sg3633
g3737
sS'block_loop.thisIndex'
p4312
g3627
sg38
S'left'
p4313
sg59
g63
sS'trial_loop.thisN'
p4314
I45
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4315
g60
(g99
S'-\x00\x00\x00'
tRp4316
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4317
I0
sg3642
g3745
sS'block_loop.thisRepN'
p4318
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4319
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4320
Nsg70
Vy
sS'block_loop.thisTrialN'
p4321
I0
sg39
F0.71667828912131881
sg34
g753
(S'\x07\xdf\x07\x05\r\x12\x05\x01[\xa8'
tRp4322
sa(dp4323
S'trial_loop.thisTrialN'
p4324
I46
sg3633
S'29-beans.png'
p4325
sS'block_loop.thisIndex'
p4326
g3627
sg38
S'right'
p4327
sg59
g63
sS'trial_loop.thisN'
p4328
I46
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p4329
g60
(g99
S'.\x00\x00\x00'
tRp4330
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4331
I0
sg3642
S'46-pistachios.png'
p4332
sS'block_loop.thisRepN'
p4333
I1
sg3645
g3970
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4334
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p4335
Nsg70
Vy
sS'block_loop.thisTrialN'
p4336
I0
sg39
F0.71635014246294304
sg34
g753
(S'\x07\xdf\x07\x05\r\x12\n\x0c\xe8\xb0'
tRp4337
sa(dp4338
S'trial_loop.thisTrialN'
p4339
I47
sg3633
g3737
sS'block_loop.thisIndex'
p4340
g3627
sg38
S'left'
p4341
sg59
g63
sS'trial_loop.thisN'
p4342
I47
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4343
g60
(g99
S'/\x00\x00\x00'
tRp4344
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4345
I0
sg3642
g3745
sS'block_loop.thisRepN'
p4346
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4347
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4348
Nsg70
Vy
sS'block_loop.thisTrialN'
p4349
I0
sg39
F0.71667857421880399
sg34
g753
(S'\x07\xdf\x07\x05\r\x12\x10\x08\xf1\x10'
tRp4350
sa(dp4351
S'trial_loop.thisTrialN'
p4352
I48
sg3633
S'45-chewy_nougat_redo.png'
p4353
sS'block_loop.thisIndex'
p4354
g3627
sg38
S'right'
p4355
sg59
g63
sS'trial_loop.thisN'
p4356
I48
sg33
S'41-peanuts_redo.png'
p4357
sg64
g65
sS'trial_loop.thisIndex'
p4358
g60
(g99
S'0\x00\x00\x00'
tRp4359
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4360
I0
sg3642
S'41-peanuts_redo.png'
p4361
sS'block_loop.thisRepN'
p4362
I1
sg3645
g4357
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4363
I1
sg3647
S'45-chewy_nougat_redo.png'
p4364
sg55
g11
sS'block_loop.thisTrial'
p4365
Nsg70
Vy
sS'block_loop.thisTrialN'
p4366
I0
sg39
F0.9165837509526682
sg34
g753
(S'\x07\xdf\x07\x05\r\x12\x16\x05;\xd8'
tRp4367
sa(dp4368
S'trial_loop.thisTrialN'
p4369
I49
sg3633
g3722
sS'block_loop.thisIndex'
p4370
g3627
sg38
S'right'
p4371
sg59
g63
sS'trial_loop.thisN'
p4372
I49
sg33
g3664
sg64
g65
sS'trial_loop.thisIndex'
p4373
g60
(g99
S'1\x00\x00\x00'
tRp4374
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4375
I0
sg3642
g3729
sS'block_loop.thisRepN'
p4376
I1
sg3645
g3664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4377
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p4378
Nsg70
Vy
sS'block_loop.thisTrialN'
p4379
I0
sg39
F0.8832601869435166
sg34
g753
(S'\x07\xdf\x07\x05\r\x12\x1c\x04]0'
tRp4380
sa(dp4381
S'trial_loop.thisTrialN'
p4382
I50
sg3633
g3820
sS'block_loop.thisIndex'
p4383
g3627
sg38
S'right'
p4384
sg59
g63
sS'trial_loop.thisN'
p4385
I50
sg33
g3830
sg64
g65
sS'trial_loop.thisIndex'
p4386
g60
(g99
S'2\x00\x00\x00'
tRp4387
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4388
I0
sg3642
g3828
sS'block_loop.thisRepN'
p4389
I1
sg3645
g3830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4390
I1
sg3647
g3824
sg55
g11
sS'block_loop.thisTrial'
p4391
Nsg70
Vy
sS'block_loop.thisTrialN'
p4392
I0
sg39
F0.91618433004168764
sg34
g753
(S'\x07\xdf\x07\x05\r\x12"\x03\tX'
tRp4393
sa(dp4394
S'trial_loop.thisTrialN'
p4395
I51
sg3633
S'20-fruit_pastilles.png'
p4396
sS'block_loop.thisIndex'
p4397
g3627
sg38
S'left'
p4398
sg59
g63
sS'trial_loop.thisN'
p4399
I51
sg33
g3813
sg64
g65
sS'trial_loop.thisIndex'
p4400
g60
(g99
S'3\x00\x00\x00'
tRp4401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4402
I0
sg3642
S'2-steamed_puddings.png'
p4403
sS'block_loop.thisRepN'
p4404
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4405
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p4406
Nsg70
Vy
sS'block_loop.thisTrialN'
p4407
I0
sg39
F0.83327213250868226
sg34
g753
(S'\x07\xdf\x07\x05\r\x12(\x02i0'
tRp4408
sa(dp4409
S'trial_loop.thisTrialN'
p4410
I52
sg3633
S'41-peanuts_redo.png'
p4411
sS'block_loop.thisIndex'
p4412
g3627
sg38
S'left'
p4413
sg59
g63
sS'trial_loop.thisN'
p4414
I52
sg33
g4357
sg64
g65
sS'trial_loop.thisIndex'
p4415
g60
(g99
S'4\x00\x00\x00'
tRp4416
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4417
I0
sg3642
S'45-chewy_nougat_redo.png'
p4418
sS'block_loop.thisRepN'
p4419
I1
sg3645
g4357
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4420
I1
sg3647
g4364
sg55
g11
sS'block_loop.thisTrial'
p4421
Nsg70
Vy
sS'block_loop.thisTrialN'
p4422
I0
sg39
F0.9498961961785426
sg34
g753
(S'\x07\xdf\x07\x05\r\x12.\x00]\xc0'
tRp4423
sa(dp4424
S'trial_loop.thisTrialN'
p4425
I53
sg3633
g3688
sS'block_loop.thisIndex'
p4426
g3627
sg38
S'right'
p4427
sg59
g63
sS'trial_loop.thisN'
p4428
I53
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p4429
g60
(g99
S'5\x00\x00\x00'
tRp4430
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4431
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4432
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4433
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4434
Nsg70
Vy
sS'block_loop.thisTrialN'
p4435
I0
sg39
F0.98323287465063913
sg34
g753
(S'\x07\xdf\x07\x05\r\x123\x0f:p'
tRp4436
sa(dp4437
S'trial_loop.thisTrialN'
p4438
I54
sg3633
g4230
sS'block_loop.thisIndex'
p4439
g3627
sg38
S'right'
p4440
sg59
g63
sS'trial_loop.thisN'
p4441
I54
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p4442
g60
(g99
S'6\x00\x00\x00'
tRp4443
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4444
I0
sg3642
g4237
sS'block_loop.thisRepN'
p4445
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4446
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p4447
Nsg70
Vy
sS'block_loop.thisTrialN'
p4448
I0
sg39
F0.94989762166369474
sg34
g753
(S'\x07\xdf\x07\x05\r\x12:\x00N '
tRp4449
sa(dp4450
S'trial_loop.thisTrialN'
p4451
I55
sg3633
g4103
sS'block_loop.thisIndex'
p4452
g3627
sg38
S'right'
p4453
sg59
g63
sS'trial_loop.thisN'
p4454
I55
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p4455
g60
(g99
S'7\x00\x00\x00'
tRp4456
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4457
I0
sg3642
g4111
sS'block_loop.thisRepN'
p4458
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4459
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p4460
Nsg70
Vy
sS'block_loop.thisTrialN'
p4461
I0
sg39
F0.76653690951388853
sg34
g753
(S'\x07\xdf\x07\x05\r\x13\x04\x00*\xf8'
tRp4462
sa(dp4463
S'trial_loop.thisTrialN'
p4464
I56
sg3633
g3722
sS'block_loop.thisIndex'
p4465
g3627
sg38
S'right'
p4466
sg59
g63
sS'trial_loop.thisN'
p4467
I56
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4468
g60
(g99
S'8\x00\x00\x00'
tRp4469
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4470
I0
sg3642
g3729
sS'block_loop.thisRepN'
p4471
I1
sg3645
g3664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4472
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p4473
Nsg70
Vy
sS'block_loop.thisTrialN'
p4474
I0
sg39
F0.66669536643257743
sg34
g753
(S'\x07\xdf\x07\x05\r\x13\t\x0c-0'
tRp4475
sa(dp4476
S'trial_loop.thisTrialN'
p4477
I57
sg3633
g4284
sS'block_loop.thisIndex'
p4478
g3627
sg38
S'left'
p4479
sg59
g63
sS'trial_loop.thisN'
p4480
I57
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p4481
g60
(g99
S'9\x00\x00\x00'
tRp4482
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4483
I0
sg3642
g4291
sS'block_loop.thisRepN'
p4484
I1
sg3645
g3830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4485
I1
sg3647
g3824
sg55
g11
sS'block_loop.thisTrial'
p4486
Nsg70
Vy
sS'block_loop.thisTrialN'
p4487
I0
sg39
F1.7163336068360877
sg34
g753
(S'\x07\xdf\x07\x05\r\x13\x0f\x07\xc0`'
tRp4488
sa(dp4489
S'trial_loop.thisTrialN'
p4490
I58
sg3633
S'30-spaghetti_hoops.png'
p4491
sS'block_loop.thisIndex'
p4492
g3627
sg38
S'left'
p4493
sg59
g63
sS'trial_loop.thisN'
p4494
I58
sg33
g3841
sg64
g65
sS'trial_loop.thisIndex'
p4495
g60
(g99
S':\x00\x00\x00'
tRp4496
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4497
I0
sg3642
S'19-caramello_redo.png'
p4498
sS'block_loop.thisRepN'
p4499
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4500
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p4501
Nsg70
Vy
sS'block_loop.thisTrialN'
p4502
I0
sg39
F2.5498993892651924
sg34
g753
(S'\x07\xdf\x07\x05\r\x13\x16\x03\xc4\xd8'
tRp4503
sa(dp4504
S'trial_loop.thisTrialN'
p4505
I59
sg3633
S'48-twix.png'
p4506
sS'block_loop.thisIndex'
p4507
g3627
sg38
S'left'
p4508
sg59
g63
sS'trial_loop.thisN'
p4509
I59
sg33
S'48-twix.png'
p4510
sg64
g65
sS'trial_loop.thisIndex'
p4511
g60
(g99
S';\x00\x00\x00'
tRp4512
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4513
I0
sg3642
S'50-polo.png'
p4514
sS'block_loop.thisRepN'
p4515
I1
sg3645
g4510
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4516
I1
sg3647
S'50-polo.png'
p4517
sg55
g11
sS'block_loop.thisTrial'
p4518
Nsg70
Vy
sS'block_loop.thisTrialN'
p4519
I0
sg39
F1.7666734709819139
sg34
g753
(S'\x07\xdf\x07\x05\r\x13\x1d\x0c\xe0\xe0'
tRp4520
sa(dp4521
S'trial_loop.thisTrialN'
p4522
I60
sg3633
g3803
sS'block_loop.thisIndex'
p4523
g3627
sg38
S'right'
p4524
sg59
g63
sS'trial_loop.thisN'
p4525
I60
sg33
g3813
sg64
g65
sS'trial_loop.thisIndex'
p4526
g60
(g99
S'<\x00\x00\x00'
tRp4527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4528
I0
sg3642
g3811
sS'block_loop.thisRepN'
p4529
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4530
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p4531
Nsg70
Vy
sS'block_loop.thisTrialN'
p4532
I0
sg39
F1.8832442215107221
sg34
g753
(S'\x07\xdf\x07\x05\r\x13$\t\x9c\xf0'
tRp4533
sa(dp4534
S'trial_loop.thisTrialN'
p4535
I61
sg3633
g4073
sS'block_loop.thisIndex'
p4536
g3627
sg38
S'left'
p4537
sg59
g63
sS'trial_loop.thisN'
p4538
I61
sg33
g4077
sg64
g65
sS'trial_loop.thisIndex'
p4539
g60
(g99
S'=\x00\x00\x00'
tRp4540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4541
I0
sg3642
g4081
sS'block_loop.thisRepN'
p4542
I1
sg3645
g4077
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4543
I1
sg3647
g4084
sg55
g11
sS'block_loop.thisTrial'
p4544
Nsg70
Vy
sS'block_loop.thisTrialN'
p4545
I0
sg39
F1.1335742213004778
sg34
g753
(S'\x07\xdf\x07\x05\r\x13+\x08\x7f\xc8'
tRp4546
sa(dp4547
S'trial_loop.thisTrialN'
p4548
I62
sg3633
g4284
sS'block_loop.thisIndex'
p4549
g3627
sg38
S'left'
p4550
sg59
g63
sS'trial_loop.thisN'
p4551
I62
sg33
g3830
sg64
g65
sS'trial_loop.thisIndex'
p4552
g60
(g99
S'>\x00\x00\x00'
tRp4553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4554
I0
sg3642
g4291
sS'block_loop.thisRepN'
p4555
I1
sg3645
g3830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4556
I1
sg3647
g3824
sg55
g11
sS'block_loop.thisTrial'
p4557
Nsg70
Vy
sS'block_loop.thisTrialN'
p4558
I0
sg39
F0.78305856633778603
sg34
g753
(S'\x07\xdf\x07\x05\r\x131\n\xf8\x98'
tRp4559
sa(dp4560
S'trial_loop.thisTrialN'
p4561
I63
sg3633
g4491
sS'block_loop.thisIndex'
p4562
g3627
sg38
S'left'
p4563
sg59
g63
sS'trial_loop.thisN'
p4564
I63
sg33
g3841
sg64
g65
sS'trial_loop.thisIndex'
p4565
g60
(g99
S'?\x00\x00\x00'
tRp4566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4567
I0
sg3642
g4498
sS'block_loop.thisRepN'
p4568
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4569
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p4570
Nsg70
Vy
sS'block_loop.thisTrialN'
p4571
I0
sg39
F0.88330808324190002
sg34
g753
(S'\x07\xdf\x07\x05\r\x137\x081\xa8'
tRp4572
sa(dp4573
S'trial_loop.thisTrialN'
p4574
I64
sg3633
S'50-polo.png'
p4575
sS'block_loop.thisIndex'
p4576
g3627
sg38
S'right'
p4577
sg59
g63
sS'trial_loop.thisN'
p4578
I64
sg33
g4510
sg64
g65
sS'trial_loop.thisIndex'
p4579
g60
(g99
S'@\x00\x00\x00'
tRp4580
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4581
I0
sg3642
S'48-twix.png'
p4582
sS'block_loop.thisRepN'
p4583
I1
sg3645
g4510
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4584
I1
sg3647
g4517
sg55
g11
sS'block_loop.thisTrial'
p4585
Nsg70
Vy
sS'block_loop.thisTrialN'
p4586
I0
sg39
F1.3165537587474319
sg34
g753
(S'\x07\xdf\x07\x05\r\x14\x01\x06\xdd\xd0'
tRp4587
sa(dp4588
S'trial_loop.thisTrialN'
p4589
I65
sg3633
g3654
sS'block_loop.thisIndex'
p4590
g3627
sg38
S'left'
p4591
sg59
g63
sS'trial_loop.thisN'
p4592
I65
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4593
g60
(g99
S'A\x00\x00\x00'
tRp4594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4595
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4596
I1
sg3645
g3664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4597
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p4598
Nsg70
Vy
sS'block_loop.thisTrialN'
p4599
I0
sg39
F0.6165847202828445
sg34
g753
(S'\x07\xdf\x07\x05\r\x14\x07\x0c1\x18'
tRp4600
sa(dp4601
S'trial_loop.thisTrialN'
p4602
I66
sg3633
g4176
sS'block_loop.thisIndex'
p4603
g3627
sg38
S'right'
p4604
sg59
g63
sS'trial_loop.thisN'
p4605
I66
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4606
g60
(g99
S'B\x00\x00\x00'
tRp4607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4608
I0
sg3642
g4183
sS'block_loop.thisRepN'
p4609
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4610
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4611
Nsg70
Vy
sS'block_loop.thisTrialN'
p4612
I0
sg39
F0.75005031962245994
sg34
g753
(S'\x07\xdf\x07\x05\r\x14\r\x06\xce0'
tRp4613
sa(dp4614
S'trial_loop.thisTrialN'
p4615
I67
sg3633
g4120
sS'block_loop.thisIndex'
p4616
g3627
sg38
S'right'
p4617
sg59
g63
sS'trial_loop.thisN'
p4618
I67
sg33
g4030
sg64
g65
sS'trial_loop.thisIndex'
p4619
g60
(g99
S'C\x00\x00\x00'
tRp4620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4621
I0
sg3642
g4127
sS'block_loop.thisRepN'
p4622
I1
sg3645
g4030
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4623
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p4624
Nsg70
Vy
sS'block_loop.thisTrialN'
p4625
I0
sg39
F1.1503493293657812
sg34
g753
(S'\x07\xdf\x07\x05\r\x14\x13\x03\x92\x10'
tRp4626
sa(dp4627
S'trial_loop.thisTrialN'
p4628
I68
sg3633
g3923
sS'block_loop.thisIndex'
p4629
g3627
sg38
S'right'
p4630
sg59
g63
sS'trial_loop.thisN'
p4631
I68
sg33
g3933
sg64
g65
sS'trial_loop.thisIndex'
p4632
g60
(g99
S'D\x00\x00\x00'
tRp4633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4634
I0
sg3642
g3931
sS'block_loop.thisRepN'
p4635
I1
sg3645
g3933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4636
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p4637
Nsg70
Vy
sS'block_loop.thisTrialN'
p4638
I0
sg39
F0.78334879509475286
sg34
g753
(S'\x07\xdf\x07\x05\r\x14\x19\x06\x83\xf8'
tRp4639
sa(dp4640
S'trial_loop.thisTrialN'
p4641
I69
sg3633
g4411
sS'block_loop.thisIndex'
p4642
g3627
sg38
S'left'
p4643
sg59
g63
sS'trial_loop.thisN'
p4644
I69
sg33
g4357
sg64
g65
sS'trial_loop.thisIndex'
p4645
g60
(g99
S'E\x00\x00\x00'
tRp4646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4647
I0
sg3642
g4418
sS'block_loop.thisRepN'
p4648
I1
sg3645
g4357
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4649
I1
sg3647
g4364
sg55
g11
sS'block_loop.thisTrial'
p4650
Nsg70
Vy
sS'block_loop.thisTrialN'
p4651
I0
sg39
F0.79997223155169195
sg34
g753
(S'\x07\xdf\x07\x05\r\x14\x1f\x03\x82p'
tRp4652
sa(dp4653
S'trial_loop.thisTrialN'
p4654
I70
sg3633
g3996
sS'block_loop.thisIndex'
p4655
g3627
sg38
S'right'
p4656
sg59
g63
sS'trial_loop.thisN'
p4657
I70
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4658
g60
(g99
S'F\x00\x00\x00'
tRp4659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4660
I0
sg3642
g4003
sS'block_loop.thisRepN'
p4661
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4662
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4663
Nsg70
Vy
sS'block_loop.thisTrialN'
p4664
I0
sg39
F0.74980171502920712
sg34
g753
(S'\x07\xdf\x07\x05\r\x14%\x00\xfd\xe8'
tRp4665
sa(dp4666
S'trial_loop.thisTrialN'
p4667
I71
sg3633
g3688
sS'block_loop.thisIndex'
p4668
g3627
sg38
S'right'
p4669
sg59
g63
sS'trial_loop.thisN'
p4670
I71
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4671
g60
(g99
S'G\x00\x00\x00'
tRp4672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4673
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4674
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4675
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4676
Nsg70
Vy
sS'block_loop.thisTrialN'
p4677
I0
sg39
F0.81662788396988617
sg34
g753
(S'\x07\xdf\x07\x05\r\x14*\r\x00 '
tRp4678
sa(dp4679
S'trial_loop.thisTrialN'
p4680
I72
sg3633
S'49-yorkie.png'
p4681
sS'block_loop.thisIndex'
p4682
g3627
sg38
S'right'
p4683
sg59
g63
sS'trial_loop.thisN'
p4684
I72
sg33
g4060
sg64
g65
sS'trial_loop.thisIndex'
p4685
g60
(g99
S'H\x00\x00\x00'
tRp4686
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4687
I0
sg3642
S'35-raisins.png'
p4688
sS'block_loop.thisRepN'
p4689
I1
sg3645
g4060
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4690
I1
sg3647
g4067
sg55
g11
sS'block_loop.thisTrial'
p4691
Nsg70
Vy
sS'block_loop.thisTrialN'
p4692
I0
sg39
F0.83330891002333374
sg34
g753
(S'\x07\xdf\x07\x05\r\x140\n\xb60'
tRp4693
sa(dp4694
S'trial_loop.thisTrialN'
p4695
I73
sg3633
g4284
sS'block_loop.thisIndex'
p4696
g3627
sg38
S'left'
p4697
sg59
g63
sS'trial_loop.thisN'
p4698
I73
sg33
g3830
sg64
g65
sS'trial_loop.thisIndex'
p4699
g60
(g99
S'I\x00\x00\x00'
tRp4700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4701
I0
sg3642
g4291
sS'block_loop.thisRepN'
p4702
I1
sg3645
g3830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4703
I1
sg3647
g3824
sg55
g11
sS'block_loop.thisTrial'
p4704
Nsg70
Vy
sS'block_loop.thisTrialN'
p4705
I0
sg39
F0.73308761772386788
sg34
g753
(S'\x07\xdf\x07\x05\r\x146\x08\xaa\xc0'
tRp4706
sa(dp4707
S'trial_loop.thisTrialN'
p4708
I74
sg3633
g4506
sS'block_loop.thisIndex'
p4709
g3627
sg38
S'left'
p4710
sg59
g63
sS'trial_loop.thisN'
p4711
I74
sg33
g4510
sg64
g65
sS'trial_loop.thisIndex'
p4712
g60
(g99
S'J\x00\x00\x00'
tRp4713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4714
I0
sg3642
g4514
sS'block_loop.thisRepN'
p4715
I1
sg3645
g4510
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4716
I1
sg3647
g4517
sg55
g11
sS'block_loop.thisTrial'
p4717
Nsg70
Vy
sS'block_loop.thisTrialN'
p4718
I0
sg39
F0.73333166076372436
sg34
g753
(S'\x07\xdf\x07\x05\r\x15\x00\x050 '
tRp4719
sa(dp4720
S'trial_loop.thisTrialN'
p4721
I75
sg3633
g4120
sS'block_loop.thisIndex'
p4722
g3627
sg38
S'right'
p4723
sg59
g63
sS'trial_loop.thisN'
p4724
I75
sg33
g4030
sg64
g65
sS'trial_loop.thisIndex'
p4725
g60
(g99
S'K\x00\x00\x00'
tRp4726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4727
I0
sg3642
g4127
sS'block_loop.thisRepN'
p4728
I1
sg3645
g4030
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4729
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p4730
Nsg70
Vy
sS'block_loop.thisTrialN'
p4731
I0
sg39
F0.9165523902820496
sg34
g753
(S'\x07\xdf\x07\x05\r\x15\x06\x01w\x00'
tRp4732
sa(dp4733
S'trial_loop.thisTrialN'
p4734
I76
sg3633
g4353
sS'block_loop.thisIndex'
p4735
g3627
sg38
S'right'
p4736
sg59
g63
sS'trial_loop.thisN'
p4737
I76
sg33
g4357
sg64
g65
sS'trial_loop.thisIndex'
p4738
g60
(g99
S'L\x00\x00\x00'
tRp4739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4740
I0
sg3642
g4361
sS'block_loop.thisRepN'
p4741
I1
sg3645
g4357
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4742
I1
sg3647
g4364
sg55
g11
sS'block_loop.thisTrial'
p4743
Nsg70
Vy
sS'block_loop.thisTrialN'
p4744
I0
sg39
F0.88333716313718469
sg34
g753
(S'\x07\xdf\x07\x05\r\x15\x0c\x00\xda\xc0'
tRp4745
sa(dp4746
S'trial_loop.thisTrialN'
p4747
I77
sg3633
g3771
sS'block_loop.thisIndex'
p4748
g3627
sg38
S'left'
p4749
sg59
g63
sS'trial_loop.thisN'
p4750
I77
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4751
g60
(g99
S'M\x00\x00\x00'
tRp4752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4753
I0
sg3642
g3778
sS'block_loop.thisRepN'
p4754
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4755
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4756
Nsg70
Vy
sS'block_loop.thisTrialN'
p4757
I0
sg39
F1.0832731303480614
sg34
g753
(S'\x07\xdf\x07\x05\r\x15\x11\x0e\xc5@'
tRp4758
sa(dp4759
S'trial_loop.thisTrialN'
p4760
I78
sg3633
S'43-mrporky_pork_crackles_redo.png'
p4761
sS'block_loop.thisIndex'
p4762
g3627
sg38
S'left'
p4763
sg59
g63
sS'trial_loop.thisN'
p4764
I78
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p4765
g60
(g99
S'N\x00\x00\x00'
tRp4766
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4767
I0
sg3642
S'18-mms.png'
p4768
sS'block_loop.thisRepN'
p4769
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4770
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4771
Nsg70
Vy
sS'block_loop.thisTrialN'
p4772
I0
sg39
F0.7833339700500801
sg34
g753
(S'\x07\xdf\x07\x05\r\x15\x18\x01D8'
tRp4773
sa(dp4774
S'trial_loop.thisTrialN'
p4775
I79
sg3633
g4284
sS'block_loop.thisIndex'
p4776
g3627
sg38
S'left'
p4777
sg59
g63
sS'trial_loop.thisN'
p4778
I79
sg33
g3830
sg64
g65
sS'trial_loop.thisIndex'
p4779
g60
(g99
S'O\x00\x00\x00'
tRp4780
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4781
I0
sg3642
g4291
sS'block_loop.thisRepN'
p4782
I1
sg3645
g3830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4783
I1
sg3647
g3824
sg55
g11
sS'block_loop.thisTrial'
p4784
Nsg70
Vy
sS'block_loop.thisTrialN'
p4785
I0
sg39
F2.6496765004221743
sg34
g753
(S'\x07\xdf\x07\x05\r\x15\x1d\r\xc3p'
tRp4786
sa(dp4787
S'trial_loop.thisTrialN'
p4788
I80
sg3633
g4491
sS'block_loop.thisIndex'
p4789
g3627
sg38
S'left'
p4790
sg59
g63
sS'trial_loop.thisN'
p4791
I80
sg33
g3848
sg64
g65
sS'trial_loop.thisIndex'
p4792
g60
(g99
S'P\x00\x00\x00'
tRp4793
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4794
I0
sg3642
g4498
sS'block_loop.thisRepN'
p4795
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4796
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p4797
Nsg70
Vy
sS'block_loop.thisTrialN'
p4798
I0
sg39
F0.866669536642803
sg34
g753
(S'\x07\xdf\x07\x05\r\x15%\t\x0ch'
tRp4799
sa(dp4800
S'trial_loop.thisTrialN'
p4801
I81
sg3633
g4026
sS'block_loop.thisIndex'
p4802
g3627
sg38
S'left'
p4803
sg59
g63
sS'trial_loop.thisN'
p4804
I81
sg33
g4030
sg64
g65
sS'trial_loop.thisIndex'
p4805
g60
(g99
S'Q\x00\x00\x00'
tRp4806
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4807
I0
sg3642
g4034
sS'block_loop.thisRepN'
p4808
I1
sg3645
g4030
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4809
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p4810
Nsg70
Vy
sS'block_loop.thisTrialN'
p4811
I0
sg39
F0.71668114009116834
sg34
g753
(S'\x07\xdf\x07\x05\r\x15+\x07z\x10'
tRp4812
sa(dp4813
S'trial_loop.thisTrialN'
p4814
I82
sg3633
g4396
sS'block_loop.thisIndex'
p4815
g3627
sg38
S'left'
p4816
sg59
g63
sS'trial_loop.thisN'
p4817
I82
sg33
g3813
sg64
g65
sS'trial_loop.thisIndex'
p4818
g60
(g99
S'R\x00\x00\x00'
tRp4819
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4820
I0
sg3642
g4403
sS'block_loop.thisRepN'
p4821
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4822
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p4823
Nsg70
Vy
sS'block_loop.thisTrialN'
p4824
I0
sg39
F1.3162338799029385
sg34
g753
(S'\x07\xdf\x07\x05\r\x151\x03\x82p'
tRp4825
sa(dp4826
S'trial_loop.thisTrialN'
p4827
I83
sg3633
g4325
sS'block_loop.thisIndex'
p4828
g3627
sg38
S'right'
p4829
sg59
g63
sS'trial_loop.thisN'
p4830
I83
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p4831
g60
(g99
S'S\x00\x00\x00'
tRp4832
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4833
I0
sg3642
g4332
sS'block_loop.thisRepN'
p4834
I1
sg3645
g3970
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4835
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p4836
Nsg70
Vy
sS'block_loop.thisTrialN'
p4837
I0
sg39
F0.76659250343163876
sg34
g753
(S'\x07\xdf\x07\x05\r\x157\x08\xd9\xa0'
tRp4838
sa(dp4839
S'trial_loop.thisTrialN'
p4840
I84
sg3633
g3880
sS'block_loop.thisIndex'
p4841
g3627
sg38
S'right'
p4842
sg59
g63
sS'trial_loop.thisN'
p4843
I84
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p4844
g60
(g99
S'T\x00\x00\x00'
tRp4845
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4846
I0
sg3642
g3888
sS'block_loop.thisRepN'
p4847
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4848
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p4849
Nsg70
Vy
sS'block_loop.thisTrialN'
p4850
I0
sg39
F1.3666658303818622
sg34
g753
(S'\x07\xdf\x07\x05\r\x16\x01\x05\xd8\x18'
tRp4851
sa(dp4852
S'trial_loop.thisTrialN'
p4853
I85
sg3633
g4491
sS'block_loop.thisIndex'
p4854
g3627
sg38
S'left'
p4855
sg59
g63
sS'trial_loop.thisN'
p4856
I85
sg33
g3841
sg64
g65
sS'trial_loop.thisIndex'
p4857
g60
(g99
S'U\x00\x00\x00'
tRp4858
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4859
I0
sg3642
g4498
sS'block_loop.thisRepN'
p4860
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4861
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p4862
Nsg70
Vy
sS'block_loop.thisTrialN'
p4863
I0
sg39
F0.91667697767479694
sg34
g753
(S'\x07\xdf\x07\x05\r\x16\x07\x0b\xe2\xf8'
tRp4864
sa(dp4865
S'trial_loop.thisTrialN'
p4866
I86
sg3633
g3996
sS'block_loop.thisIndex'
p4867
g3627
sg38
S'left'
p4868
sg59
g63
sS'trial_loop.thisN'
p4869
I86
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4870
g60
(g99
S'V\x00\x00\x00'
tRp4871
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4872
I0
sg3642
g4003
sS'block_loop.thisRepN'
p4873
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4874
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4875
Nsg70
Vy
sS'block_loop.thisTrialN'
p4876
I0
sg39
F0.73334135406275891
sg34
g753
(S'\x07\xdf\x07\x05\r\x16\r\x0bB\xd0'
tRp4877
sa(dp4878
S'trial_loop.thisTrialN'
p4879
I87
sg3633
g3966
sS'block_loop.thisIndex'
p4880
g3627
sg38
S'left'
p4881
sg59
g63
sS'trial_loop.thisN'
p4882
I87
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p4883
g60
(g99
S'W\x00\x00\x00'
tRp4884
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4885
I0
sg3642
g3974
sS'block_loop.thisRepN'
p4886
I1
sg3645
g3970
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4887
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p4888
Nsg70
Vy
sS'block_loop.thisTrialN'
p4889
I0
sg39
F0.70006169499356474
sg34
g753
(S'\x07\xdf\x07\x05\r\x16\x13\x07\x89\xb0'
tRp4890
sa(dp4891
S'trial_loop.thisTrialN'
p4892
I88
sg3633
g4506
sS'block_loop.thisIndex'
p4893
g3627
sg38
S'left'
p4894
sg59
g63
sS'trial_loop.thisN'
p4895
I88
sg33
g4510
sg64
g65
sS'trial_loop.thisIndex'
p4896
g60
(g99
S'X\x00\x00\x00'
tRp4897
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4898
I0
sg3642
g4514
sS'block_loop.thisRepN'
p4899
I1
sg3645
g4510
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4900
I1
sg3647
g4517
sg55
g11
sS'block_loop.thisTrial'
p4901
Nsg70
Vy
sS'block_loop.thisTrialN'
p4902
I0
sg39
F0.75000213822750084
sg34
g753
(S'\x07\xdf\x07\x05\r\x16\x19\x03\x95\xf8'
tRp4903
sa(dp4904
S'trial_loop.thisTrialN'
p4905
I89
sg3633
g3837
sS'block_loop.thisIndex'
p4906
g3627
sg38
S'left'
p4907
sg59
g63
sS'trial_loop.thisN'
p4908
I89
sg33
g3841
sg64
g65
sS'trial_loop.thisIndex'
p4909
g60
(g99
S'Y\x00\x00\x00'
tRp4910
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4911
I0
sg3642
g3845
sS'block_loop.thisRepN'
p4912
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4913
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p4914
Nsg70
Vy
sS'block_loop.thisTrialN'
p4915
I0
sg39
F1.1833464572991943
sg34
g753
(S'\x07\xdf\x07\x05\r\x16\x1f\x00Y\xd8'
tRp4916
sa(dp4917
S'trial_loop.thisTrialN'
p4918
I90
sg3633
g3803
sS'block_loop.thisIndex'
p4919
g3627
sg38
S'right'
p4920
sg59
g63
sS'trial_loop.thisN'
p4921
I90
sg33
g3813
sg64
g65
sS'trial_loop.thisIndex'
p4922
g60
(g99
S'Z\x00\x00\x00'
tRp4923
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4924
I0
sg3642
g3811
sS'block_loop.thisRepN'
p4925
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4926
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p4927
Nsg70
Vy
sS'block_loop.thisTrialN'
p4928
I0
sg39
F0.75002580127966212
sg34
g753
(S'\x07\xdf\x07\x05\r\x16%\x03\x8a@'
tRp4929
sa(dp4930
S'trial_loop.thisTrialN'
p4931
I91
sg3633
g3705
sS'block_loop.thisIndex'
p4932
g3627
sg38
S'left'
p4933
sg59
g63
sS'trial_loop.thisN'
p4934
I91
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4935
g60
(g99
S'[\x00\x00\x00'
tRp4936
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4937
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4938
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4939
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4940
Nsg70
Vy
sS'block_loop.thisTrialN'
p4941
I0
sg39
F1.4497636260684885
sg34
g753
(S'\x07\xdf\x07\x05\r\x16+\x00J8'
tRp4942
sa(dp4943
S'trial_loop.thisTrialN'
p4944
I92
sg3633
S'51-mars.png'
p4945
sS'block_loop.thisIndex'
p4946
g3627
sg38
S'right'
p4947
sg59
g63
sS'trial_loop.thisN'
p4948
I92
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4949
g60
(g99
S'\\\x00\x00\x00'
tRp4950
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4951
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p4952
sS'block_loop.thisRepN'
p4953
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4954
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4955
Nsg70
Vy
sS'block_loop.thisTrialN'
p4956
I0
sg39
F0.81659709349332843
sg34
g753
(S'\x07\xdf\x07\x05\r\x161\x07\xc4H'
tRp4957
sa(dp4958
S'trial_loop.thisTrialN'
p4959
I93
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p4960
sS'block_loop.thisIndex'
p4961
g3627
sg38
S'left'
p4962
sg59
g63
sS'trial_loop.thisN'
p4963
I93
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p4964
g60
(g99
S']\x00\x00\x00'
tRp4965
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4966
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p4967
sS'block_loop.thisRepN'
p4968
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4969
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p4970
Nsg70
Vy
sS'block_loop.thisTrialN'
p4971
I0
sg39
F0.71660929564495746
sg34
g753
(S'\x07\xdf\x07\x05\r\x167\x05zX'
tRp4972
sa(dp4973
S'trial_loop.thisTrialN'
p4974
I94
sg3633
g4761
sS'block_loop.thisIndex'
p4975
g3627
sg38
S'left'
p4976
sg59
g63
sS'trial_loop.thisN'
p4977
I94
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4978
g60
(g99
S'^\x00\x00\x00'
tRp4979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4980
I0
sg3642
g4768
sS'block_loop.thisRepN'
p4981
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4982
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4983
Nsg70
Vy
sS'block_loop.thisTrialN'
p4984
I0
sg39
F0.73324413598220417
sg34
g753
(S'\x07\xdf\x07\x05\r\x17\x01\x01\x86\xa0'
tRp4985
sa(dp4986
S'trial_loop.thisTrialN'
p4987
I95
sg3633
g4353
sS'block_loop.thisIndex'
p4988
g3627
sg38
S'right'
p4989
sg59
g63
sS'trial_loop.thisN'
p4990
I95
sg33
g4357
sg64
g65
sS'trial_loop.thisIndex'
p4991
g60
(g99
S'_\x00\x00\x00'
tRp4992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4993
I0
sg3642
g4361
sS'block_loop.thisRepN'
p4994
I1
sg3645
g4357
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4995
I1
sg3647
g4364
sg55
g11
sS'block_loop.thisTrial'
p4996
Nsg70
Vy
sS'block_loop.thisTrialN'
p4997
I0
sg39
F0.81663586668582866
sg34
g753
(S'\x07\xdf\x07\x05\r\x17\x06\rN@'
tRp4998
sa(dp4999
S'trial_loop.thisTrialN'
p5000
I96
sg3633
g4056
sS'block_loop.thisIndex'
p5001
g3627
sg38
S'left'
p5002
sg59
g63
sS'trial_loop.thisN'
p5003
I96
sg33
g4060
sg64
g65
sS'trial_loop.thisIndex'
p5004
g60
(g99
S'`\x00\x00\x00'
tRp5005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5006
I0
sg3642
g4064
sS'block_loop.thisRepN'
p5007
I1
sg3645
g4060
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5008
I1
sg3647
g4067
sg55
g11
sS'block_loop.thisTrial'
p5009
Nsg70
Vy
sS'block_loop.thisTrialN'
p5010
I0
sg39
F0.86704700508380483
sg34
g753
(S'\x07\xdf\x07\x05\r\x17\x0c\x0b\x04P'
tRp5011
sa(dp5012
S'trial_loop.thisTrialN'
p5013
I97
sg3633
g4325
sS'block_loop.thisIndex'
p5014
g3627
sg38
S'right'
p5015
sg59
g63
sS'trial_loop.thisN'
p5016
I97
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p5017
g60
(g99
S'a\x00\x00\x00'
tRp5018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5019
I0
sg3642
g4332
sS'block_loop.thisRepN'
p5020
I1
sg3645
g3970
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5021
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p5022
Nsg70
Vy
sS'block_loop.thisTrialN'
p5023
I0
sg39
F0.61669305714622169
sg34
g753
(S'\x07\xdf\x07\x05\r\x17\x12\tq\xf8'
tRp5024
sa(dp5025
S'trial_loop.thisTrialN'
p5026
I98
sg3633
g3754
sS'block_loop.thisIndex'
p5027
g3627
sg38
S'left'
p5028
sg59
g63
sS'trial_loop.thisN'
p5029
I98
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5030
g60
(g99
S'b\x00\x00\x00'
tRp5031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5032
I0
sg3642
g3762
sS'block_loop.thisRepN'
p5033
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5034
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p5035
Nsg70
Vy
sS'block_loop.thisTrialN'
p5036
I0
sg39
F0.89990329509419098
sg34
g753
(S'\x07\xdf\x07\x05\r\x17\x18\x04\x0f\x10'
tRp5037
sa(dp5038
S'trial_loop.thisTrialN'
p5039
I99
sg3633
g4103
sS'block_loop.thisIndex'
p5040
g3627
sg38
S'right'
p5041
sg59
g63
sS'trial_loop.thisN'
p5042
I99
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p5043
g60
(g99
S'c\x00\x00\x00'
tRp5044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5045
I0
sg3642
g4111
sS'block_loop.thisRepN'
p5046
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5047
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p5048
Nsg70
Vy
sS'block_loop.thisTrialN'
p5049
I0
sg39
F0.75001981424247788
sg34
g753
(S'\x07\xdf\x07\x05\r\x17\x1e\x02\xf5\xd0'
tRp5050
sa(dp5051
S'trial_loop.thisTrialN'
p5052
I100
sg3633
g4681
sS'block_loop.thisIndex'
p5053
g3627
sg38
S'right'
p5054
sg59
g63
sS'trial_loop.thisN'
p5055
I100
sg33
g4060
sg64
g65
sS'trial_loop.thisIndex'
p5056
g60
(g99
S'd\x00\x00\x00'
tRp5057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5058
I0
sg3642
g4688
sS'block_loop.thisRepN'
p5059
I1
sg3645
g4060
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5060
I1
sg3647
g4067
sg55
g11
sS'block_loop.thisTrial'
p5061
Nsg70
Vy
sS'block_loop.thisTrialN'
p5062
I0
sg39
F0.81658740019429388
sg34
g753
(S'\x07\xdf\x07\x05\r\x17#\x0e\xf8\x08'
tRp5063
sa(dp5064
S'trial_loop.thisTrialN'
p5065
I101
sg3633
g4945
sS'block_loop.thisIndex'
p5066
g3627
sg38
S'right'
p5067
sg59
g63
sS'trial_loop.thisN'
p5068
I101
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5069
g60
(g99
S'e\x00\x00\x00'
tRp5070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5071
I0
sg3642
g4952
sS'block_loop.thisRepN'
p5072
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5073
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5074
Nsg70
Vy
sS'block_loop.thisTrialN'
p5075
I0
sg39
F0.78328265258824104
sg34
g753
(S'\x07\xdf\x07\x05\r\x17)\x0c\xae\x18'
tRp5076
sa(dp5077
S'trial_loop.thisTrialN'
p5078
I102
sg3633
g4073
sS'block_loop.thisIndex'
p5079
g3627
sg38
S'left'
p5080
sg59
g63
sS'trial_loop.thisN'
p5081
I102
sg33
g4077
sg64
g65
sS'trial_loop.thisIndex'
p5082
g60
(g99
S'f\x00\x00\x00'
tRp5083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5084
I0
sg3642
g4081
sS'block_loop.thisRepN'
p5085
I1
sg3645
g4077
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5086
I1
sg3647
g4084
sg55
g11
sS'block_loop.thisTrial'
p5087
Nsg70
Vy
sS'block_loop.thisTrialN'
p5088
I0
sg39
F0.88371463157727703
sg34
g753
(S'\x07\xdf\x07\x05\r\x17/\t\xeb\x10'
tRp5089
sa(dp5090
S'trial_loop.thisTrialN'
p5091
I103
sg3633
g3671
sS'block_loop.thisIndex'
p5092
g3627
sg38
S'right'
p5093
sg59
g63
sS'trial_loop.thisN'
p5094
I103
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5095
g60
(g99
S'g\x00\x00\x00'
tRp5096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5097
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5098
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5099
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5100
Nsg70
Vy
sS'block_loop.thisTrialN'
p5101
I0
sg39
F0.76649642573829624
sg34
g753
(S'\x07\xdf\x07\x05\r\x175\x08\x978'
tRp5102
sa(dp5103
S'trial_loop.thisTrialN'
p5104
I104
sg3633
g3722
sS'block_loop.thisIndex'
p5105
g3627
sg38
S'right'
p5106
sg59
g63
sS'trial_loop.thisN'
p5107
I104
sg33
g3664
sg64
g65
sS'trial_loop.thisIndex'
p5108
g60
(g99
S'h\x00\x00\x00'
tRp5109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5110
I0
sg3642
g3729
sS'block_loop.thisRepN'
p5111
I1
sg3645
g3664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5112
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p5113
Nsg70
Vy
sS'block_loop.thisTrialN'
p5114
I0
sg39
F0.71658363691403792
sg34
g753
(S'\x07\xdf\x07\x05\r\x17;\x05\x95\xb0'
tRp5115
sa(dp5116
S'trial_loop.thisTrialN'
p5117
I105
sg3633
g4506
sS'block_loop.thisIndex'
p5118
g3627
sg38
S'left'
p5119
sg59
g63
sS'trial_loop.thisN'
p5120
I105
sg33
g4510
sg64
g65
sS'trial_loop.thisIndex'
p5121
g60
(g99
S'i\x00\x00\x00'
tRp5122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5123
I0
sg3642
g4514
sS'block_loop.thisRepN'
p5124
I1
sg3645
g4510
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5125
I1
sg3647
g4517
sg55
g11
sS'block_loop.thisTrial'
p5126
Nsg70
Vy
sS'block_loop.thisTrialN'
p5127
I0
sg39
F1.0832078431321861
sg34
g753
(S'\x07\xdf\x07\x05\r\x18\x05\x01\xdc\x90'
tRp5128
sa(dp5129
S'trial_loop.thisTrialN'
p5130
I106
sg3633
g3966
sS'block_loop.thisIndex'
p5131
g3627
sg38
S'left'
p5132
sg59
g63
sS'trial_loop.thisN'
p5133
I106
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p5134
g60
(g99
S'j\x00\x00\x00'
tRp5135
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5136
I0
sg3642
g3974
sS'block_loop.thisRepN'
p5137
I1
sg3645
g3970
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5138
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p5139
Nsg70
Vy
sS'block_loop.thisTrialN'
p5140
I0
sg39
F0.71655997386278614
sg34
g753
(S'\x07\xdf\x07\x05\r\x18\x0b\x03\x9d\xc8'
tRp5141
sa(dp5142
S'trial_loop.thisTrialN'
p5143
I107
sg3633
g4230
sS'block_loop.thisIndex'
p5144
g3627
sg38
S'right'
p5145
sg59
g63
sS'trial_loop.thisN'
p5146
I107
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5147
g60
(g99
S'k\x00\x00\x00'
tRp5148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5149
I0
sg3642
g4237
sS'block_loop.thisRepN'
p5150
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5151
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5152
Nsg70
Vy
sS'block_loop.thisTrialN'
p5153
I0
sg39
F1.8333676400070544
sg34
g753
(S'\x07\xdf\x07\x05\r\x18\x10\x0e\xecP'
tRp5154
sa(dp5155
S'trial_loop.thisTrialN'
p5156
I108
sg3633
g3966
sS'block_loop.thisIndex'
p5157
g3627
sg38
S'left'
p5158
sg59
g63
sS'trial_loop.thisN'
p5159
I108
sg33
g3977
sg64
g65
sS'trial_loop.thisIndex'
p5160
g60
(g99
S'l\x00\x00\x00'
tRp5161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5162
I0
sg3642
g3974
sS'block_loop.thisRepN'
p5163
I1
sg3645
g3970
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5164
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p5165
Nsg70
Vy
sS'block_loop.thisTrialN'
p5166
I0
sg39
F0.73334620071182144
sg34
g753
(S'\x07\xdf\x07\x05\r\x18\x17\r\x17\x90'
tRp5167
sa(dp5168
S'trial_loop.thisTrialN'
p5169
I109
sg3633
g4353
sS'block_loop.thisIndex'
p5170
g3627
sg38
S'right'
p5171
sg59
g63
sS'trial_loop.thisN'
p5172
I109
sg33
g4364
sg64
g65
sS'trial_loop.thisIndex'
p5173
g60
(g99
S'm\x00\x00\x00'
tRp5174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5175
I0
sg3642
g4361
sS'block_loop.thisRepN'
p5176
I1
sg3645
g4357
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5177
I1
sg3647
g4364
sg55
g11
sS'block_loop.thisTrial'
p5178
Nsg70
Vy
sS'block_loop.thisTrialN'
p5179
I0
sg39
F1.033229767092962
sg34
g753
(S'\x07\xdf\x07\x05\r\x18\x1d\t^p'
tRp5180
sa(dp5181
S'trial_loop.thisTrialN'
p5182
I110
sg3633
g3803
sS'block_loop.thisIndex'
p5183
g3627
sg38
S'right'
p5184
sg59
g63
sS'trial_loop.thisN'
p5185
I110
sg33
g3813
sg64
g65
sS'trial_loop.thisIndex'
p5186
g60
(g99
S'n\x00\x00\x00'
tRp5187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5188
I0
sg3642
g3811
sS'block_loop.thisRepN'
p5189
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5190
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p5191
Nsg70
Vy
sS'block_loop.thisTrialN'
p5192
I0
sg39
F0.96664849648368545
sg34
g753
(S'\x07\xdf\x07\x05\r\x18#\nk\xf8'
tRp5193
sa(dp5194
S'trial_loop.thisTrialN'
p5195
I111
sg3633
g3634
sS'block_loop.thisIndex'
p5196
g3627
sg38
S'right'
p5197
sg59
g63
sS'trial_loop.thisN'
p5198
I111
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5199
g60
(g99
S'o\x00\x00\x00'
tRp5200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5201
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5202
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5203
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5204
Nsg70
Vy
sS'block_loop.thisTrialN'
p5205
I0
sg39
F1.7666403997291127
sg34
g753
(S'\x07\xdf\x07\x05\r\x18)\n\x83h'
tRp5206
sa(dp5207
S'trial_loop.thisTrialN'
p5208
I112
sg3633
g4945
sS'block_loop.thisIndex'
p5209
g3627
sg38
S'right'
p5210
sg59
g63
sS'trial_loop.thisN'
p5211
I112
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5212
g60
(g99
S'p\x00\x00\x00'
tRp5213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5214
I0
sg3642
g4952
sS'block_loop.thisRepN'
p5215
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5216
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5217
Nsg70
Vy
sS'block_loop.thisTrialN'
p5218
I0
sg39
F2.1499510488429223
sg34
g753
(S'\x07\xdf\x07\x05\r\x180\x07z\x10'
tRp5219
sa(dp5220
S'trial_loop.thisTrialN'
p5221
I113
sg3633
g4103
sS'block_loop.thisIndex'
p5222
g3627
sg38
S'right'
p5223
sg59
g63
sS'trial_loop.thisN'
p5224
I113
sg33
g4114
sg64
g65
sS'trial_loop.thisIndex'
p5225
g60
(g99
S'q\x00\x00\x00'
tRp5226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5227
I0
sg3642
g4111
sS'block_loop.thisRepN'
p5228
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5229
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p5230
Nsg70
Vy
sS'block_loop.thisTrialN'
p5231
I0
sg39
F0.71655541231029929
sg34
g753
(S'\x07\xdf\x07\x05\r\x187\n)\x90'
tRp5232
sa(dp5233
S'trial_loop.thisTrialN'
p5234
I114
sg3633
g3654
sS'block_loop.thisIndex'
p5235
g3627
sg38
S'left'
p5236
sg59
g63
sS'trial_loop.thisN'
p5237
I114
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5238
g60
(g99
S'r\x00\x00\x00'
tRp5239
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5240
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5241
I1
sg3645
g3664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5242
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p5243
Nsg70
Vy
sS'block_loop.thisTrialN'
p5244
I0
sg39
F0.73330343616089522
sg34
g753
(S'\x07\xdf\x07\x05\r\x19\x01\x06tX'
tRp5245
sa(dp5246
S'trial_loop.thisTrialN'
p5247
I115
sg3633
g4575
sS'block_loop.thisIndex'
p5248
g3627
sg38
S'right'
p5249
sg59
g63
sS'trial_loop.thisN'
p5250
I115
sg33
g4517
sg64
g65
sS'trial_loop.thisIndex'
p5251
g60
(g99
S's\x00\x00\x00'
tRp5252
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5253
I0
sg3642
g4582
sS'block_loop.thisRepN'
p5254
I1
sg3645
g4510
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5255
I1
sg3647
g4517
sg55
g11
sS'block_loop.thisTrial'
p5256
Nsg70
Vy
sS'block_loop.thisTrialN'
p5257
I0
sg39
F0.93326990875175397
sg34
g753
(S'\x07\xdf\x07\x05\r\x19\x07\x02\xbb8'
tRp5258
sa(dp5259
S'trial_loop.thisTrialN'
p5260
I116
sg3633
g4761
sS'block_loop.thisIndex'
p5261
g3627
sg38
S'left'
p5262
sg59
g63
sS'trial_loop.thisN'
p5263
I116
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5264
g60
(g99
S't\x00\x00\x00'
tRp5265
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5266
I0
sg3642
g4768
sS'block_loop.thisRepN'
p5267
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5268
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5269
Nsg70
Vy
sS'block_loop.thisTrialN'
p5270
I0
sg39
F0.76653747970794939
sg34
g753
(S'\x07\xdf\x07\x05\r\x19\r\x02Y\x90'
tRp5271
sa(dp5272
S'trial_loop.thisTrialN'
p5273
I117
sg3633
g3786
sS'block_loop.thisIndex'
p5274
g3627
sg38
S'left'
p5275
sg59
g63
sS'trial_loop.thisN'
p5276
I117
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5277
g60
(g99
S'u\x00\x00\x00'
tRp5278
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5279
I0
sg3642
g3794
sS'block_loop.thisRepN'
p5280
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5281
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5282
Nsg70
Vy
sS'block_loop.thisTrialN'
p5283
I0
sg39
F0.81670742603546387
sg34
g753
(S'\x07\xdf\x07\x05\r\x19\x12\x0e\x9aH'
tRp5284
sa(dp5285
S'trial_loop.thisTrialN'
p5286
I118
sg3633
g4396
sS'block_loop.thisIndex'
p5287
g3627
sg38
S'left'
p5288
sg59
g63
sS'trial_loop.thisN'
p5289
I118
sg33
g3813
sg64
g65
sS'trial_loop.thisIndex'
p5290
g60
(g99
S'v\x00\x00\x00'
tRp5291
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5292
I0
sg3642
g4403
sS'block_loop.thisRepN'
p5293
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5294
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p5295
Nsg70
Vy
sS'block_loop.thisTrialN'
p5296
I0
sg39
F1.1502943056430013
sg34
g753
(S'\x07\xdf\x07\x05\r\x19\x18\x0cPX'
tRp5297
sa(dp5298
S'trial_loop.thisTrialN'
p5299
I119
sg3633
g3880
sS'block_loop.thisIndex'
p5300
g3627
sg38
S'right'
p5301
sg59
g63
sS'trial_loop.thisN'
p5302
I119
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5303
g60
(g99
S'w\x00\x00\x00'
tRp5304
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5305
I0
sg3642
g3888
sS'block_loop.thisRepN'
p5306
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5307
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5308
Nsg70
Vy
sS'block_loop.thisTrialN'
p5309
I0
sg39
F1.6665151851220799
sg34
g753
(S'\x07\xdf\x07\x05\r\x19\x1e\x0f\x07\xa8'
tRp5310
sa(dp5311
S'trial_loop.thisTrialN'
p5312
I120
sg3633
g4960
sS'block_loop.thisIndex'
p5313
g3627
sg38
S'left'
p5314
sg59
g63
sS'trial_loop.thisN'
p5315
I120
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p5316
g60
(g99
S'x\x00\x00\x00'
tRp5317
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5318
I0
sg3642
g4967
sS'block_loop.thisRepN'
p5319
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5320
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p5321
Nsg70
Vy
sS'block_loop.thisTrialN'
p5322
I0
sg39
F1.3999349408622948
sg34
g753
(S'\x07\xdf\x07\x05\r\x19%\nT\x88'
tRp5323
sa(dp5324
S'trial_loop.thisTrialN'
p5325
I121
sg3633
g4575
sS'block_loop.thisIndex'
p5326
g3627
sg38
S'right'
p5327
sg59
g63
sS'trial_loop.thisN'
p5328
I121
sg33
g4510
sg64
g65
sS'trial_loop.thisIndex'
p5329
g60
(g99
S'y\x00\x00\x00'
tRp5330
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5331
I0
sg3642
g4582
sS'block_loop.thisRepN'
p5332
I1
sg3645
g4510
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5333
I1
sg3647
g4517
sg55
g11
sS'block_loop.thisTrial'
p5334
Nsg70
Vy
sS'block_loop.thisTrialN'
p5335
I0
sg39
F1.7831982638726913
sg34
g753
(S'\x07\xdf\x07\x05\r\x19,\x01\xd4\xc0'
tRp5336
sa(dp5337
S'trial_loop.thisTrialN'
p5338
I122
sg3633
g4960
sS'block_loop.thisIndex'
p5339
g3627
sg38
S'left'
p5340
sg59
g63
sS'trial_loop.thisN'
p5341
I122
sg33
g4114
sg64
g65
sS'trial_loop.thisIndex'
p5342
g60
(g99
S'z\x00\x00\x00'
tRp5343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5344
I0
sg3642
g4967
sS'block_loop.thisRepN'
p5345
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5346
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p5347
Nsg70
Vy
sS'block_loop.thisTrialN'
p5348
I0
sg39
F0.84994888210621866
sg34
g753
(S'\x07\xdf\x07\x05\r\x192\x0eL('
tRp5349
sa(dp5350
S'trial_loop.thisTrialN'
p5351
I123
sg3633
g3737
sS'block_loop.thisIndex'
p5352
g3627
sg38
S'left'
p5353
sg59
g63
sS'trial_loop.thisN'
p5354
I123
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5355
g60
(g99
S'{\x00\x00\x00'
tRp5356
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5357
I0
sg3642
g3745
sS'block_loop.thisRepN'
p5358
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5359
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5360
Nsg70
Vy
sS'block_loop.thisTrialN'
p5361
I0
sg39
F0.66697248072614457
sg34
g753
(S'\x07\xdf\x07\x05\r\x198\x0c{P'
tRp5362
sa(dp5363
S'trial_loop.thisTrialN'
p5364
I124
sg3633
g4681
sS'block_loop.thisIndex'
p5365
g3627
sg38
S'right'
p5366
sg59
g63
sS'trial_loop.thisN'
p5367
I124
sg33
g4067
sg64
g65
sS'trial_loop.thisIndex'
p5368
g60
(g99
S'|\x00\x00\x00'
tRp5369
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5370
I0
sg3642
g4688
sS'block_loop.thisRepN'
p5371
I1
sg3645
g4060
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5372
I1
sg3647
g4067
sg55
g11
sS'block_loop.thisTrial'
p5373
Nsg70
Vy
sS'block_loop.thisTrialN'
p5374
I0
sg39
F0.86666240921749704
sg34
g753
(S'\x07\xdf\x07\x05\r\x1a\x02\x07\xd0\x00'
tRp5375
sa(dp5376
S'trial_loop.thisTrialN'
p5377
I125
sg3633
g3820
sS'block_loop.thisIndex'
p5378
g3627
sg38
S'right'
p5379
sg59
g63
sS'trial_loop.thisN'
p5380
I125
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p5381
g60
(g99
S'}\x00\x00\x00'
tRp5382
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5383
I0
sg3642
g3828
sS'block_loop.thisRepN'
p5384
I1
sg3645
g3830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5385
I1
sg3647
g3824
sg55
g11
sS'block_loop.thisTrial'
p5386
Nsg70
Vy
sS'block_loop.thisTrialN'
p5387
I0
sg39
F1.4663103714301542
sg34
g753
(S'\x07\xdf\x07\x05\r\x1a\x08\x06=\xa8'
tRp5388
sa(dp5389
S'trial_loop.thisTrialN'
p5390
I126
sg3633
g3837
sS'block_loop.thisIndex'
p5391
g3627
sg38
S'right'
p5392
sg59
g63
sS'trial_loop.thisN'
p5393
I126
sg33
g3848
sg64
g65
sS'trial_loop.thisIndex'
p5394
g60
(g99
S'~\x00\x00\x00'
tRp5395
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5396
I0
sg3642
g3845
sS'block_loop.thisRepN'
p5397
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5398
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p5399
Nsg70
Vy
sS'block_loop.thisTrialN'
p5400
I0
sg39
F1.0332736720329194
sg34
g753
(S'\x07\xdf\x07\x05\r\x1a\x0e\r\xf2P'
tRp5401
sa(dp5402
S'trial_loop.thisTrialN'
p5403
I127
sg3633
S'13-mccoys_steak_crisps.png'
p5404
sS'block_loop.thisIndex'
p5405
g3627
sg38
S'left'
p5406
sg59
g63
sS'trial_loop.thisN'
p5407
I127
sg33
g3933
sg64
g65
sS'trial_loop.thisIndex'
p5408
g60
(g99
S'\x7f\x00\x00\x00'
tRp5409
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5410
I0
sg3642
S'3-ellas_strawberries_apples.png'
p5411
sS'block_loop.thisRepN'
p5412
I1
sg3645
g3933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5413
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p5414
Nsg70
Vy
sS'block_loop.thisTrialN'
p5415
I0
sg39
F0.81668233749951469
sg34
g753
(S'\x07\xdf\x07\x05\r\x1a\x14\x0e\xff\xd8'
tRp5416
sa(dp5417
S'trial_loop.thisTrialN'
p5418
I128
sg3633
g4026
sS'block_loop.thisIndex'
p5419
g3627
sg38
S'left'
p5420
sg59
g63
sS'trial_loop.thisN'
p5421
I128
sg33
g4030
sg64
g65
sS'trial_loop.thisIndex'
p5422
g60
(g99
S'\x80\x00\x00\x00'
tRp5423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5424
I0
sg3642
g4034
sS'block_loop.thisRepN'
p5425
I1
sg3645
g4030
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5426
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p5427
Nsg70
Vy
sS'block_loop.thisTrialN'
p5428
I0
sg39
F0.63329596661878895
sg34
g753
(S'\x07\xdf\x07\x05\r\x1a\x1a\x0c\xb5\xe8'
tRp5429
sa(dp5430
S'trial_loop.thisTrialN'
p5431
I129
sg3633
S'4-corn.png'
p5432
sS'block_loop.thisIndex'
p5433
g3627
sg38
S'left'
p5434
sg59
g63
sS'trial_loop.thisN'
p5435
I129
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5436
g60
(g99
S'\x81\x00\x00\x00'
tRp5437
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5438
I0
sg3642
S'10-bounty_redo.png'
p5439
sS'block_loop.thisRepN'
p5440
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5441
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vy
sS'block_loop.thisTrialN'
p5443
I0
sg39
F1.2332253195791054
sg34
g753
(S'\x07\xdf\x07\x05\r\x1a \x07\x91\x80'
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g3820
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'right'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g3830
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g3828
sS'block_loop.thisRepN'
p5453
I1
sg3645
g3830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5454
I1
sg3647
g3824
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vy
sS'block_loop.thisTrialN'
p5456
I0
sg39
F0.79966945852720528
sg34
g753
(S'\x07\xdf\x07\x05\r\x1a&\x0b\xb4\x18'
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g4411
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'left'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g4357
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g4418
sS'block_loop.thisRepN'
p5466
I1
sg3645
g4357
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5467
I1
sg3647
g4364
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vy
sS'block_loop.thisTrialN'
p5469
I0
sg39
F0.81659908917208668
sg34
g753
(S'\x07\xdf\x07\x05\r\x1a,\t+\xa8'
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g4135
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'left'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g4077
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g4142
sS'block_loop.thisRepN'
p5479
I1
sg3645
g4077
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5480
I1
sg3647
g4084
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vy
sS'block_loop.thisTrialN'
p5482
I0
sg39
F0.83323335931527254
sg34
g753
(S'\x07\xdf\x07\x05\r\x1a2\x06\xe1\xb8'
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g5404
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'left'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g3933
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g5411
sS'block_loop.thisRepN'
p5492
I1
sg3645
g3933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5493
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vy
sS'block_loop.thisTrialN'
p5495
I0
sg39
F0.7833339700500801
sg34
g753
(S'\x07\xdf\x07\x05\r\x1a8\x04\xd6H'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g3996
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'left'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g4003
sS'block_loop.thisRepN'
p5505
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5506
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vy
sS'block_loop.thisTrialN'
p5508
I0
sg39
F0.86697544573507912
sg34
g753
(S'\x07\xdf\x07\x05\r\x1b\x02\x02\x13@'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g4176
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'right'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g3765
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g4183
sS'block_loop.thisRepN'
p5518
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5519
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vy
sS'block_loop.thisTrialN'
p5521
I0
sg39
F2.0333506482247685
sg34
g753
(S'\x07\xdf\x07\x05\r\x1b\x08\x00\x80\xe8'
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g3671
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'right'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5531
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5532
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vy
sS'block_loop.thisTrialN'
p5534
I0
sg39
F0.65001291489443247
sg34
g753
(S'\x07\xdf\x07\x05\r\x1b\x0f\x01\x82\xb8'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g4411
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'left'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g4357
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g4418
sS'block_loop.thisRepN'
p5544
I1
sg3645
g4357
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5545
I1
sg3647
g4364
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vy
sS'block_loop.thisTrialN'
p5547
I0
sg39
F1.3665512213838156
sg34
g753
(S'\x07\xdf\x07\x05\r\x1b\x14\x0b\xdf\x10'
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g4120
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'right'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g4030
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g4127
sS'block_loop.thisRepN'
p5557
I1
sg3645
g4030
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5558
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vy
sS'block_loop.thisTrialN'
p5560
I0
sg39
F1.0665182641696447
sg34
g753
(S'\x07\xdf\x07\x05\r\x1b\x1b\x02\xe2H'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g4176
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'right'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g4183
sS'block_loop.thisRepN'
p5570
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5571
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vy
sS'block_loop.thisTrialN'
p5573
I0
sg39
F0.81665724896265601
sg34
g753
(S'\x07\xdf\x07\x05\r\x1b!\x04h\xe8'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g4011
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'right'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g4018
sS'block_loop.thisRepN'
p5583
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vy
sS'block_loop.thisTrialN'
p5586
I0
sg39
F0.94984231284342968
sg34
g753
(S"\x07\xdf\x07\x05\r\x1b'\x02\x1e\xf8"
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g3996
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'left'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g4003
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vy
sS'block_loop.thisTrialN'
p5599
I0
sg39
F0.8166874692451529
sg34
g753
(S'\x07\xdf\x07\x05\r\x1b-\x01\xbdP'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g4026
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'left'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g4030
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g4034
sS'block_loop.thisRepN'
p5609
I1
sg3645
g4030
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vy
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.86662306583093596
sg34
g753
(S'\x07\xdf\x07\x05\r\x1b2\x0e\xb5\xa0'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g3786
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'left'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g3794
sS'block_loop.thisRepN'
p5622
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vy
sS'block_loop.thisTrialN'
p5625
I0
sg39
F1.2333715743452558
sg34
g753
(S'\x07\xdf\x07\x05\r\x1b8\r#H'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g4396
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'left'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g4403
sS'block_loop.thisRepN'
p5635
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vy
sS'block_loop.thisTrialN'
p5638
I0
sg39
F1.1003133786334729
sg34
g753
(S'\x07\xdf\x07\x05\r\x1c\x03\x02\x03\xa0'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g4073
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'left'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g4077
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g4081
sS'block_loop.thisRepN'
p5648
I1
sg3645
g4077
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3647
g4084
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vy
sS'block_loop.thisTrialN'
p5651
I0
sg39
F1.4666767210883336
sg34
g753
(S'\x07\xdf\x07\x05\r\x1c\t\x04\x03X'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g4575
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g4510
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g4582
sS'block_loop.thisRepN'
p5661
I1
sg3645
g4510
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3647
g4517
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vy
sS'block_loop.thisTrialN'
p5664
I0
sg39
F2.0833694931379796
sg34
g753
(S'\x07\xdf\x07\x05\r\x1c\x0f\x0b\xb8\x00'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g4103
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'right'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g4114
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g4111
sS'block_loop.thisRepN'
p5674
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vy
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.84999991447148204
sg34
g753
(S'\x07\xdf\x07\x05\r\x1c\x16\rqh'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g5432
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'left'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g5439
sS'block_loop.thisRepN'
p5687
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vy
sS'block_loop.thisTrialN'
p5690
I0
sg39
F2.4332847337964267
sg34
g753
(S'\x07\xdf\x07\x05\r\x1c\x1c\x0b\xa4x'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g4325
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'right'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g4332
sS'block_loop.thisRepN'
p5700
I1
sg3645
g3970
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vy
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.65016287592152366
sg34
g753
(S'\x07\xdf\x07\x05\r\x1c$\x03\x95\xf8'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g3634
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'right'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5713
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vy
sS'block_loop.thisTrialN'
p5716
I0
sg39
F1.0666342986532982
sg34
g753
(S'\x07\xdf\x07\x05\r\x1c)\r\xf2P'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g4011
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'right'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g4018
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vy
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.74979601308950805
sg34
g753
(S'\x07\xdf\x07\x05\r\x1c0\x002\xc8'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g3837
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'right'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3841
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g3845
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vy
sS'block_loop.thisTrialN'
p5742
I0
sg39
F1.1333390162672003
sg34
g753
(S'\x07\xdf\x07\x05\r\x1c5\x0c8\xe8'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g4960
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'left'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g4967
sS'block_loop.thisRepN'
p5752
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vy
sS'block_loop.thisTrialN'
p5755
I0
sg39
F0.74996193954939372
sg34
g753
(S'\x07\xdf\x07\x05\r\x1c;\x0e\xb1\xb8'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g3923
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'right'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3933
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g3931
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vy
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.63330280894751922
sg34
g753
(S'\x07\xdf\x07\x05\r\x1d\x05\x0bq\xb0'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g4761
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'left'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g4768
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vy
sS'block_loop.thisTrialN'
p5781
I0
sg39
F0.78356119236741506
sg34
g753
(S'\x07\xdf\x07\x05\r\x1d\x0b\x06MH'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g5432
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'left'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g5439
sS'block_loop.thisRepN'
p5791
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vy
sS'block_loop.thisTrialN'
p5794
I0
sg39
F0.73329972989904491
sg34
g753
(S'\x07\xdf\x07\x05\r\x1d\x11\x03\x8a@'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g3654
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'left'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5804
I1
sg3645
g3664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vy
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.68302686355127662
sg34
g753
(S'\x07\xdf\x07\x05\r\x1d\x17\x00\x0f\xa0'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g3705
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'left'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5817
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vy
sS'block_loop.thisTrialN'
p5820
I0
sg39
F1.0497924778865126
sg34
g753
(S'\x07\xdf\x07\x05\r\x1d\x1c\n\xe5\x10'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g3786
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'left'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g3794
sS'block_loop.thisRepN'
p5830
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vy
sS'block_loop.thisTrialN'
p5833
I0
sg39
F1.8332593031427677
sg34
g753
(S'\x07\xdf\x07\x05\r\x1d"\x0c-0'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g5404
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'left'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3933
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g5411
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vy
sS'block_loop.thisTrialN'
p5846
I0
sg39
F1.3333322879771003
sg34
g753
(S'\x07\xdf\x07\x05\r\x1d)\n\x19\xf0'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g4945
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'right'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g4952
sS'block_loop.thisRepN'
p5856
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vy
sS'block_loop.thisTrialN'
p5859
I0
sg39
F1.016558434338549
sg34
g753
(S'\x07\xdf\x07\x05\r\x1d0\x00e\x90'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g3705
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'left'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vy
sS'block_loop.thisTrialN'
p5872
I0
sg39
F1.3832025973479176
sg34
g753
(S'\x07\xdf\x07\x05\r\x1d6\x014\x98'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g3923
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'right'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3933
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g3931
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vy
sS'block_loop.thisTrialN'
p5885
I0
sg39
F0.96658606023811444
sg34
g753
(S'\x07\xdf\x07\x05\r\x1e\x00\x07}\xf8'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g3786
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'left'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g3794
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vy
sS'block_loop.thisTrialN'
p5898
I0
sg39
F2.2832532875963807
sg34
g753
(S'\x07\xdf\x07\x05\r\x1e\x06\x07\x95h'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g4575
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'right'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g4510
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g4582
sS'block_loop.thisRepN'
p5908
I1
sg3645
g4510
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g4517
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vy
sS'block_loop.thisTrialN'
p5911
I0
sg39
F1.1336891153951001
sg34
g753
(S'\x07\xdf\x07\x05\r\x1e\r\x0cg\xc8'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g5432
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'left'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g5439
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vy
sS'block_loop.thisTrialN'
p5924
I0
sg39
F2.3498801737268877
sg34
g753
(S'\x07\xdf\x07\x05\r\x1e\x13\x0e\xe0\x98'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g4396
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'left'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g4403
sS'block_loop.thisRepN'
p5934
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vy
sS'block_loop.thisTrialN'
p5937
I0
sg39
F4.0998127482835116
sg34
g753
(S'\x07\xdf\x07\x05\r\x1e\x1b\x05\xa5P'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g3754
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'left'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g3762
sS'block_loop.thisRepN'
p5947
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vy
sS'block_loop.thisTrialN'
p5950
I0
sg39
F3.1165604870375319
sg34
g753
(S'\x07\xdf\x07\x05\r\x1e$\x07\x91\x80'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g4230
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'right'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g4237
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vy
sS'block_loop.thisTrialN'
p5963
I0
sg39
F1.3000038773188862
sg34
g753
(S'\x07\xdf\x07\x05\r\x1e,\t\xfe\x98'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g4681
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'right'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g4060
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g4688
sS'block_loop.thisRepN'
p5973
I1
sg3645
g4060
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g4067
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vy
sS'block_loop.thisTrialN'
p5976
I0
sg39
F1.6999094531902301
sg34
g753
(S'\x07\xdf\x07\x05\r\x1e2\x0f\x13`'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g4026
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'left'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g4030
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g4034
sS'block_loop.thisRepN'
p5986
I1
sg3645
g4030
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vy
sS'block_loop.thisTrialN'
p5989
I0
sg39
F3.2999243352533085
sg34
g753
(S'\x07\xdf\x07\x05\r\x1e9\n\xdd@'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g3705
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'left'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vy
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.9165432671779854
sg34
g753
(S'\x07\xdf\x07\x05\r\x1f\x06\x00\xa4\x10'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g3966
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'left'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g3974
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3970
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vy
sS'block_loop.thisTrialN'
p6015
I0
sg39
F1.1332506361941341
sg34
g753
(S'\x07\xdf\x07\x05\r\x1f\x0c\x00\x03\xe8'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4960
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'left'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4967
sS'block_loop.thisRepN'
p6025
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vy
sS'block_loop.thisTrialN'
p6028
I0
sg39
F0.86671828823182295
sg34
g753
(S'\x07\xdf\x07\x05\r\x1f\x12\x02|\xb8'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g4073
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'left'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g4077
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g4081
sS'block_loop.thisRepN'
p6038
I1
sg3645
g4077
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g4084
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vy
sS'block_loop.thisTrialN'
p6041
I0
sg39
F2.0332423113604818
sg34
g753
(S'\x07\xdf\x07\x05\r\x1f\x18\x00\xea`'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g4056
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'left'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g4060
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g4064
sS'block_loop.thisRepN'
p6051
I1
sg3645
g4060
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g4067
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vy
sS'block_loop.thisTrialN'
p6054
I0
sg39
F0.80000558790106879
sg34
g753
(S'\x07\xdf\x07\x05\r\x1f\x1f\x01\xf0\x18'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g3688
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'right'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g3696
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vy
sS'block_loop.thisTrialN'
p6067
I0
sg39
F0.96657323087310942
sg34
g753
(S'\x07\xdf\x07\x05\r\x1f$\x0e\xa9\xe8'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g5404
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'left'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g3933
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g5411
sS'block_loop.thisRepN'
p6077
I1
sg3645
g3933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vy
sS'block_loop.thisTrialN'
p6080
I0
sg39
F1.233323963145267
sg34
g753
(S'\x07\xdf\x07\x05\r\x1f*\x0e\xc1X'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g4491
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'left'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3841
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g4498
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vy
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.81704041934335692
sg34
g753
(S'\x07\xdf\x07\x05\r\x1f1\x03g\x18'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g3671
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'right'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g3679
sS'block_loop.thisRepN'
p6103
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vy
sS'block_loop.thisTrialN'
p6106
I0
sg39
F0.71664407747994119
sg34
g753
(S'\x07\xdf\x07\x05\r\x1f7\x01\x1d('
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g4325
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'right'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g4332
sS'block_loop.thisRepN'
p6116
I1
sg3645
g3970
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vy
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.68331310094890796
sg34
g753
(S'\x07\xdf\x07\x05\r \x00\x0c\xa6H'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g4353
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'right'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g4357
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g4361
sS'block_loop.thisRepN'
p6129
I1
sg3645
g4357
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g4364
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vy
sS'block_loop.thisTrialN'
p6132
I0
sg39
F0.73324128501189989
sg34
g753
(S'\x07\xdf\x07\x05\r \x06\x089x'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g5432
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'left'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g3891
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g5439
sS'block_loop.thisRepN'
p6142
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vy
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.73337955706119828
sg34
g753
(S'\x07\xdf\x07\x05\r \x0c\x04\xbe\xd8'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g5404
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'left'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3933
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g5411
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vy
sS'block_loop.thisTrialN'
p6158
I0
sg39
F0.71663523947336216
sg34
g753
(S'\x07\xdf\x07\x05\r \x12\x01D8'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g4011
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'right'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g4018
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vy
sS'block_loop.thisTrialN'
p6171
I0
sg39
F0.88368583677947754
sg34
g753
(S'\x07\xdf\x07\x05\r \x17\x0c\x92\xc0'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g4945
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'right'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3748
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g4952
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vy
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.86665271592028148
sg34
g753
(S'\x07\xdf\x07\x05\r \x1d\x0by\x80'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g3837
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'right'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g3841
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g3845
sS'block_loop.thisRepN'
p6194
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vy
sS'block_loop.thisTrialN'
p6197
I0
sg39
F0.68333391302985547
sg34
g753
(S'\x07\xdf\x07\x05\r #\t\xe7('
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g4135
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'left'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g4077
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g4142
sS'block_loop.thisRepN'
p6207
I1
sg3645
g4077
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g4084
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vy
sS'block_loop.thisTrialN'
p6210
I0
sg39
F0.71661072112965485
sg34
g753
(S'\x07\xdf\x07\x05\r )\x05vp'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g4056
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'left'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g4067
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g4064
sS'block_loop.thisRepN'
p6220
I1
sg3645
g4060
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g4067
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vy
sS'block_loop.thisTrialN'
p6223
I0
sg39
F0.68325864742018894
sg34
g753
(S'\x07\xdf\x07\x05\r /\x01\xc18'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g4506
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'left'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g4517
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g4514
sS'block_loop.thisRepN'
p6233
I1
sg3645
g4510
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g4517
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vy
sS'block_loop.thisTrialN'
p6236
I0
sg39
F1.1666158243669997
sg34
g753
(S'\x07\xdf\x07\x05\r 4\x0c\x92\xc0'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g4681
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'right'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g4060
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g4688
sS'block_loop.thisRepN'
p6246
I1
sg3645
g4060
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g4067
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vy
sS'block_loop.thisTrialN'
p6249
I0
sg39
F1.3830443685073988
sg34
g753
(S'\x07\xdf\x07\x05\r ;\x00\x80\xe8'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g3671
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'right'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g3679
sS'block_loop.thisRepN'
p6259
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vy
sS'block_loop.thisTrialN'
p6262
I0
sg39
F1.2999115058883035
sg34
g753
(S'\x07\xdf\x07\x05\r!\x05\x06\xcaH'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g4135
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'right'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g4084
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g4142
sS'block_loop.thisRepN'
p6272
I1
sg3645
g4077
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g4084
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vy
sS'block_loop.thisTrialN'
p6275
I0
sg39
F1.6666431936791923
sg34
g753
(S'\x07\xdf\x07\x05\r!\x0b\x0b\xdf\x10'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g4761
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'left'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g4768
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vy
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.74994027217599069
sg34
g753
(S'\x07\xdf\x07\x05\r!\x12\x07jp'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g4056
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'left'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g4067
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g4064
sS'block_loop.thisRepN'
p6298
I1
sg3645
g4060
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g4067
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vy
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.84997796200059383
sg34
g753
(S'\x07\xdf\x07\x05\r!\x18\x03\xef\xd0'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g3688
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'right'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g3696
sS'block_loop.thisRepN'
p6311
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vy
sS'block_loop.thisTrialN'
p6314
I0
sg39
F0.70005371227671276
sg34
g753
(S'\x07\xdf\x07\x05\r!\x1e\x02"\xe0'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4411
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'left'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g4357
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4418
sS'block_loop.thisRepN'
p6324
I1
sg3645
g4357
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g4364
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vy
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.68335928666419932
sg34
g753
(S'\x07\xdf\x07\x05\r!#\rm\x80'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g4176
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'right'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g4183
sS'block_loop.thisRepN'
p6337
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vy
sS'block_loop.thisTrialN'
p6340
I0
sg39
F0.93329471219203697
sg34
g753
(S'\x07\xdf\x07\x05\r!)\t\x00\xb0'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g4230
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'right'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g3797
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g4237
sS'block_loop.thisRepN'
p6350
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vy
sS'block_loop.thisTrialN'
p6353
I0
sg39
F1.166669137507597
sg34
g753
(S'\x07\xdf\x07\x05\r!/\x08\x9f\x08'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F225.47663002789977
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vy
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vy
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'4-corn.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'left'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'4-corn.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'10-bounty_redo.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'10-bounty_redo.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vy
sS'block_loop.thisTrialN'
p6388
I0
sg39
F0.86650617605664593
sg34
g753
(S'\x07\xdf\x07\x05\r&\x1d\x0b\xbb\xe8'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'43-mrporky_pork_crackles_redo.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'left'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'43-mrporky_pork_crackles_redo.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'18-mms.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6385
S'18-mms.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vy
sS'block_loop.thisTrialN'
p6405
I0
sg39
F1.2165642503177878
sg34
g753
(S'\x07\xdf\x07\x05\r&#\n)\x90'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'20-fruit_pastilles.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'left'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'20-fruit_pastilles.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'2-steamed_puddings.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
S'2-steamed_puddings.png'
p6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6420
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vy
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.74992117067631625
sg34
g753
(S'\x07\xdf\x07\x05\r&)\r\xd3\x10'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'38-maltesers.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'left'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'38-maltesers.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'6-sour_patch_kids.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6436
I2
sg6385
S'6-sour_patch_kids.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vy
sS'block_loop.thisTrialN'
p6439
I0
sg39
F0.71636867376946611
sg34
g753
(S'\x07\xdf\x07\x05\r&/\n\x96\xf0'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'42-mrkipling_lemon_slices.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'right'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
S'42-mrkipling_lemon_slices.png'
p6447
sg64
g65
sS'trial_loop.thisIndex'
p6448
g60
(g99
S'\x04\x00\x00\x00'
tRp6449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6450
I0
sg6380
S'16-skips_prawn.png'
p6451
sS'block_loop.thisRepN'
p6452
I2
sg6383
S'16-skips_prawn.png'
p6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6454
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p6455
Nsg70
Vy
sS'block_loop.thisTrialN'
p6456
I0
sg39
F0.91649708146269404
sg34
g753
(S'\x07\xdf\x07\x05\r&5\x06\xa38'
tRp6457
sa(dp6458
S'trial_loop.thisTrialN'
p6459
I5
sg6371
S'10-bounty_redo.png'
p6460
sS'block_loop.thisIndex'
p6461
g6365
sg38
S'right'
p6462
sg59
g63
sS'trial_loop.thisN'
p6463
I5
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6464
g60
(g99
S'\x05\x00\x00\x00'
tRp6465
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6466
I0
sg6380
S'4-corn.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6469
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6470
Nsg70
Vy
sS'block_loop.thisTrialN'
p6471
I0
sg39
F0.81661762047770026
sg34
g753
(S'\x07\xdf\x07\x05\r&;\x06\x03\x10'
tRp6472
sa(dp6473
S'trial_loop.thisTrialN'
p6474
I6
sg6371
S'49-yorkie.png'
p6475
sS'block_loop.thisIndex'
p6476
g6365
sg38
S'right'
p6477
sg59
g63
sS'trial_loop.thisN'
p6478
I6
sg33
S'35-raisins.png'
p6479
sg64
g65
sS'trial_loop.thisIndex'
p6480
g60
(g99
S'\x06\x00\x00\x00'
tRp6481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6482
I0
sg6380
S'35-raisins.png'
p6483
sS'block_loop.thisRepN'
p6484
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6485
I2
sg6385
S'49-yorkie.png'
p6486
sg55
g11
sS'block_loop.thisTrial'
p6487
Nsg70
Vy
sS'block_loop.thisTrialN'
p6488
I0
sg39
F1.3831584073113845
sg34
g753
(S"\x07\xdf\x07\x05\r'\x05\x03\xb9 "
tRp6489
sa(dp6490
S'trial_loop.thisTrialN'
p6491
I7
sg6371
S'41-peanuts_redo.png'
p6492
sS'block_loop.thisIndex'
p6493
g6365
sg38
S'left'
p6494
sg59
g63
sS'trial_loop.thisN'
p6495
I7
sg33
S'41-peanuts_redo.png'
p6496
sg64
g65
sS'trial_loop.thisIndex'
p6497
g60
(g99
S'\x07\x00\x00\x00'
tRp6498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6499
I0
sg6380
S'45-chewy_nougat_redo.png'
p6500
sS'block_loop.thisRepN'
p6501
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6502
I2
sg6385
S'45-chewy_nougat_redo.png'
p6503
sg55
g11
sS'block_loop.thisTrial'
p6504
Nsg70
Vy
sS'block_loop.thisTrialN'
p6505
I0
sg39
F0.79994714301392378
sg34
g753
(S"\x07\xdf\x07\x05\r'\x0b\t\xfe\x98"
tRp6506
sa(dp6507
S'trial_loop.thisTrialN'
p6508
I8
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p6509
sS'block_loop.thisIndex'
p6510
g6365
sg38
S'left'
p6511
sg59
g63
sS'trial_loop.thisN'
p6512
I8
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6513
sg64
g65
sS'trial_loop.thisIndex'
p6514
g60
(g99
S'\x08\x00\x00\x00'
tRp6515
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6516
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p6517
sS'block_loop.thisRepN'
p6518
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6519
I2
sg6385
S'8-liquorice_catherine_wheels.png'
p6520
sg55
g11
sS'block_loop.thisTrial'
p6521
Nsg70
Vy
sS'block_loop.thisTrialN'
p6522
I0
sg39
F0.71659618118246726
sg34
g753
(S"\x07\xdf\x07\x05\r'\x11\x07z\x10"
tRp6523
sa(dp6524
S'trial_loop.thisTrialN'
p6525
I9
sg6371
S'36-fig_rolls.png'
p6526
sS'block_loop.thisIndex'
p6527
g6365
sg38
S'right'
p6528
sg59
g63
sS'trial_loop.thisN'
p6529
I9
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p6530
sg64
g65
sS'trial_loop.thisIndex'
p6531
g60
(g99
S'\t\x00\x00\x00'
tRp6532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6533
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p6534
sS'block_loop.thisRepN'
p6535
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6536
I2
sg6385
S'36-fig_rolls.png'
p6537
sg55
g11
sS'block_loop.thisTrial'
p6538
Nsg70
Vy
sS'block_loop.thisTrialN'
p6539
I0
sg39
F0.80002354901353101
sg34
g753
(S"\x07\xdf\x07\x05\r'\x17\x03\xc0\xf0"
tRp6540
sa(dp6541
S'trial_loop.thisTrialN'
p6542
I10
sg6371
g6443
sS'block_loop.thisIndex'
p6543
g6365
sg38
S'right'
p6544
sg59
g63
sS'trial_loop.thisN'
p6545
I10
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p6546
g60
(g99
S'\n\x00\x00\x00'
tRp6547
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6548
I0
sg6380
g6451
sS'block_loop.thisRepN'
p6549
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6550
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p6551
Nsg70
Vy
sS'block_loop.thisTrialN'
p6552
I0
sg39
F0.78318229844080633
sg34
g753
(S"\x07\xdf\x07\x05\r'\x1d\x01<h"
tRp6553
sa(dp6554
S'trial_loop.thisTrialN'
p6555
I11
sg6371
g6460
sS'block_loop.thisIndex'
p6556
g6365
sg38
S'right'
p6557
sg59
g63
sS'trial_loop.thisN'
p6558
I11
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6559
g60
(g99
S'\x0b\x00\x00\x00'
tRp6560
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6561
I0
sg6380
g6467
sS'block_loop.thisRepN'
p6562
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6563
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6564
Nsg70
Vy
sS'block_loop.thisTrialN'
p6565
I0
sg39
F1.1666682822169605
sg34
g753
(S'\x07\xdf\x07\x05\r\'"\r\xb7\xb8'
tRp6566
sa(dp6567
S'trial_loop.thisTrialN'
p6568
I12
sg6371
g6509
sS'block_loop.thisIndex'
p6569
g6365
sg38
S'left'
p6570
sg59
g63
sS'trial_loop.thisN'
p6571
I12
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p6572
g60
(g99
S'\x0c\x00\x00\x00'
tRp6573
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6574
I0
sg6380
g6517
sS'block_loop.thisRepN'
p6575
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6576
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p6577
Nsg70
Vy
sS'block_loop.thisTrialN'
p6578
I0
sg39
F0.81657343044116715
sg34
g753
(S"\x07\xdf\x07\x05\r')\x01kH"
tRp6579
sa(dp6580
S'trial_loop.thisTrialN'
p6581
I13
sg6371
S'23-crunchie_redo.png'
p6582
sS'block_loop.thisIndex'
p6583
g6365
sg38
S'left'
p6584
sg59
g63
sS'trial_loop.thisN'
p6585
I13
sg33
S'33-ambrosia_rice.png'
p6586
sg64
g65
sS'trial_loop.thisIndex'
p6587
g60
(g99
S'\r\x00\x00\x00'
tRp6588
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6589
I0
sg6380
S'33-ambrosia_rice.png'
p6590
sS'block_loop.thisRepN'
p6591
I2
sg6383
S'23-crunchie_redo.png'
p6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6593
I2
sg6385
g6586
sg55
g11
sS'block_loop.thisTrial'
p6594
Nsg70
Vy
sS'block_loop.thisTrialN'
p6595
I0
sg39
F0.76665237380348117
sg34
g753
(S"\x07\xdf\x07\x05\r'.\x0ec\x98"
tRp6596
sa(dp6597
S'trial_loop.thisTrialN'
p6598
I14
sg6371
g6460
sS'block_loop.thisIndex'
p6599
g6365
sg38
S'right'
p6600
sg59
g63
sS'trial_loop.thisN'
p6601
I14
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6602
g60
(g99
S'\x0e\x00\x00\x00'
tRp6603
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6604
I0
sg6380
g6467
sS'block_loop.thisRepN'
p6605
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6606
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6607
Nsg70
Vy
sS'block_loop.thisTrialN'
p6608
I0
sg39
F0.89987364500575495
sg34
g753
(S"\x07\xdf\x07\x05\r'4\x0bb\x10"
tRp6609
sa(dp6610
S'trial_loop.thisTrialN'
p6611
I15
sg6371
g6392
sS'block_loop.thisIndex'
p6612
g6365
sg38
S'left'
p6613
sg59
g63
sS'trial_loop.thisN'
p6614
I15
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6615
g60
(g99
S'\x0f\x00\x00\x00'
tRp6616
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6617
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6618
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6619
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6620
Nsg70
Vy
sS'block_loop.thisTrialN'
p6621
I0
sg39
F0.64994050025416072
sg34
g753
(S"\x07\xdf\x07\x05\r':\nH\xd0"
tRp6622
sa(dp6623
S'trial_loop.thisTrialN'
p6624
I16
sg6371
S'26-walkers_smoky_bacon.png'
p6625
sS'block_loop.thisIndex'
p6626
g6365
sg38
S'left'
p6627
sg59
g63
sS'trial_loop.thisN'
p6628
I16
sg33
S'26-walkers_smoky_bacon.png'
p6629
sg64
g65
sS'trial_loop.thisIndex'
p6630
g60
(g99
S'\x10\x00\x00\x00'
tRp6631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6632
I0
sg6380
S'44-crunch.png'
p6633
sS'block_loop.thisRepN'
p6634
I2
sg6383
g6629
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6635
I2
sg6385
S'44-crunch.png'
p6636
sg55
g11
sS'block_loop.thisTrial'
p6637
Nsg70
Vy
sS'block_loop.thisTrialN'
p6638
I0
sg39
F0.59990255384218472
sg34
g753
(S'\x07\xdf\x07\x05\r(\x04\x05_\x00'
tRp6639
sa(dp6640
S'trial_loop.thisTrialN'
p6641
I17
sg6371
S'40-sardines.png'
p6642
sS'block_loop.thisIndex'
p6643
g6365
sg38
S'left'
p6644
sg59
g63
sS'trial_loop.thisN'
p6645
I17
sg33
S'40-sardines.png'
p6646
sg64
g65
sS'trial_loop.thisIndex'
p6647
g60
(g99
S'\x11\x00\x00\x00'
tRp6648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6649
I0
sg6380
S'5-pineapple.png'
p6650
sS'block_loop.thisRepN'
p6651
I2
sg6383
g6646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6652
I2
sg6385
S'5-pineapple.png'
p6653
sg55
g11
sS'block_loop.thisTrial'
p6654
Nsg70
Vy
sS'block_loop.thisTrialN'
p6655
I0
sg39
F0.6503188239857991
sg34
g753
(S'\x07\xdf\x07\x05\r(\t\x0f\x03\xc0'
tRp6656
sa(dp6657
S'trial_loop.thisTrialN'
p6658
I18
sg6371
S'6-sour_patch_kids.png'
p6659
sS'block_loop.thisIndex'
p6660
g6365
sg38
S'right'
p6661
sg59
g63
sS'trial_loop.thisN'
p6662
I18
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6663
g60
(g99
S'\x12\x00\x00\x00'
tRp6664
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6665
I0
sg6380
S'38-maltesers.png'
p6666
sS'block_loop.thisRepN'
p6667
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6668
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6669
Nsg70
Vy
sS'block_loop.thisTrialN'
p6670
I0
sg39
F1.5163830996780234
sg34
g753
(S'\x07\xdf\x07\x05\r(\x0f\nXp'
tRp6671
sa(dp6672
S'trial_loop.thisTrialN'
p6673
I19
sg6371
S'19-caramello_redo.png'
p6674
sS'block_loop.thisIndex'
p6675
g6365
sg38
S'right'
p6676
sg59
g63
sS'trial_loop.thisN'
p6677
I19
sg33
S'19-caramello_redo.png'
p6678
sg64
g65
sS'trial_loop.thisIndex'
p6679
g60
(g99
S'\x13\x00\x00\x00'
tRp6680
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6681
I0
sg6380
S'30-spaghetti_hoops.png'
p6682
sS'block_loop.thisRepN'
p6683
I2
sg6383
S'30-spaghetti_hoops.png'
p6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6685
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p6686
Nsg70
Vy
sS'block_loop.thisTrialN'
p6687
I0
sg39
F1.4166310770569908
sg34
g753
(S'\x07\xdf\x07\x05\r(\x16\x03\x82p'
tRp6688
sa(dp6689
S'trial_loop.thisTrialN'
p6690
I20
sg6371
S'44-crunch.png'
p6691
sS'block_loop.thisIndex'
p6692
g6365
sg38
S'right'
p6693
sg59
g63
sS'trial_loop.thisN'
p6694
I20
sg33
g6629
sg64
g65
sS'trial_loop.thisIndex'
p6695
g60
(g99
S'\x14\x00\x00\x00'
tRp6696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6697
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6698
sS'block_loop.thisRepN'
p6699
I2
sg6383
g6629
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6700
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p6701
Nsg70
Vy
sS'block_loop.thisTrialN'
p6702
I0
sg39
F1.1166297656100141
sg34
g753
(S'\x07\xdf\x07\x05\r(\x1c\nD\xe8'
tRp6703
sa(dp6704
S'trial_loop.thisTrialN'
p6705
I21
sg6371
S'35-raisins.png'
p6706
sS'block_loop.thisIndex'
p6707
g6365
sg38
S'left'
p6708
sg59
g63
sS'trial_loop.thisN'
p6709
I21
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p6710
g60
(g99
S'\x15\x00\x00\x00'
tRp6711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6712
I0
sg6380
S'49-yorkie.png'
p6713
sS'block_loop.thisRepN'
p6714
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6715
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p6716
Nsg70
Vy
sS'block_loop.thisTrialN'
p6717
I0
sg39
F0.64994392141852586
sg34
g753
(S'\x07\xdf\x07\x05\r("\x0c\x7f8'
tRp6718
sa(dp6719
S'trial_loop.thisTrialN'
p6720
I22
sg6371
S'31-hobnobs.png'
p6721
sS'block_loop.thisIndex'
p6722
g6365
sg38
S'left'
p6723
sg59
g63
sS'trial_loop.thisN'
p6724
I22
sg33
S'31-hobnobs.png'
p6725
sg64
g65
sS'trial_loop.thisIndex'
p6726
g60
(g99
S'\x16\x00\x00\x00'
tRp6727
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6728
I0
sg6380
S'25-kitkat.png'
p6729
sS'block_loop.thisRepN'
p6730
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6731
I2
sg6385
S'25-kitkat.png'
p6732
sg55
g11
sS'block_loop.thisTrial'
p6733
Nsg70
Vy
sS'block_loop.thisTrialN'
p6734
I0
sg39
F0.68371594302425365
sg34
g753
(S'\x07\xdf\x07\x05\r((\x07\xd3\xe8'
tRp6735
sa(dp6736
S'trial_loop.thisTrialN'
p6737
I23
sg6371
S'13-mccoys_steak_crisps.png'
p6738
sS'block_loop.thisIndex'
p6739
g6365
sg38
S'left'
p6740
sg59
g63
sS'trial_loop.thisN'
p6741
I23
sg33
S'3-ellas_strawberries_apples.png'
p6742
sg64
g65
sS'trial_loop.thisIndex'
p6743
g60
(g99
S'\x17\x00\x00\x00'
tRp6744
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6745
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6746
sS'block_loop.thisRepN'
p6747
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6748
I2
sg6385
S'13-mccoys_steak_crisps.png'
p6749
sg55
g11
sS'block_loop.thisTrial'
p6750
Nsg70
Vy
sS'block_loop.thisTrialN'
p6751
I0
sg39
F0.6499590315597743
sg34
g753
(S'\x07\xdf\x07\x05\r(.\x03g\x18'
tRp6752
sa(dp6753
S'trial_loop.thisTrialN'
p6754
I24
sg6371
S'45-chewy_nougat_redo.png'
p6755
sS'block_loop.thisIndex'
p6756
g6365
sg38
S'right'
p6757
sg59
g63
sS'trial_loop.thisN'
p6758
I24
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p6759
g60
(g99
S'\x18\x00\x00\x00'
tRp6760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6761
I0
sg6380
S'41-peanuts_redo.png'
p6762
sS'block_loop.thisRepN'
p6763
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6764
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p6765
Nsg70
Vy
sS'block_loop.thisTrialN'
p6766
I0
sg39
F0.78334252296099294
sg34
g753
(S'\x07\xdf\x07\x05\r(3\r\xbf\x88'
tRp6767
sa(dp6768
S'trial_loop.thisTrialN'
p6769
I25
sg6371
S'2-steamed_puddings.png'
p6770
sS'block_loop.thisIndex'
p6771
g6365
sg38
S'right'
p6772
sg59
g63
sS'trial_loop.thisN'
p6773
I25
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p6774
g60
(g99
S'\x19\x00\x00\x00'
tRp6775
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6776
I0
sg6380
S'20-fruit_pastilles.png'
p6777
sS'block_loop.thisRepN'
p6778
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6779
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p6780
Nsg70
Vy
sS'block_loop.thisTrialN'
p6781
I0
sg39
F0.74988838452009077
sg34
g753
(S'\x07\xdf\x07\x05\r(9\n\xfc\x80'
tRp6782
sa(dp6783
S'trial_loop.thisTrialN'
p6784
I26
sg6371
g6526
sS'block_loop.thisIndex'
p6785
g6365
sg38
S'right'
p6786
sg59
g63
sS'trial_loop.thisN'
p6787
I26
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p6788
g60
(g99
S'\x1a\x00\x00\x00'
tRp6789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6790
I0
sg6380
g6534
sS'block_loop.thisRepN'
p6791
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6792
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p6793
Nsg70
Vy
sS'block_loop.thisTrialN'
p6794
I0
sg39
F0.96668783987115603
sg34
g753
(S'\x07\xdf\x07\x05\r)\x03\x07\xc0`'
tRp6795
sa(dp6796
S'trial_loop.thisTrialN'
p6797
I27
sg6371
g6738
sS'block_loop.thisIndex'
p6798
g6365
sg38
S'left'
p6799
sg59
g63
sS'trial_loop.thisN'
p6800
I27
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p6801
g60
(g99
S'\x1b\x00\x00\x00'
tRp6802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6803
I0
sg6380
g6746
sS'block_loop.thisRepN'
p6804
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6805
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p6806
Nsg70
Vy
sS'block_loop.thisTrialN'
p6807
I0
sg39
F0.68312180085558794
sg34
g753
(S'\x07\xdf\x07\x05\r)\t\x07\xd7\xd0'
tRp6808
sa(dp6809
S'trial_loop.thisTrialN'
p6810
I28
sg6371
S'29-beans.png'
p6811
sS'block_loop.thisIndex'
p6812
g6365
sg38
S'right'
p6813
sg59
g63
sS'trial_loop.thisN'
p6814
I28
sg33
S'46-pistachios.png'
p6815
sg64
g65
sS'trial_loop.thisIndex'
p6816
g60
(g99
S'\x1c\x00\x00\x00'
tRp6817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6818
I0
sg6380
S'46-pistachios.png'
p6819
sS'block_loop.thisRepN'
p6820
I2
sg6383
g6815
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6821
I2
sg6385
S'29-beans.png'
p6822
sg55
g11
sS'block_loop.thisTrial'
p6823
Nsg70
Vy
sS'block_loop.thisTrialN'
p6824
I0
sg39
F0.6003706831324962
sg34
g753
(S'\x07\xdf\x07\x05\r)\x0f\x03g\x18'
tRp6825
sa(dp6826
S'trial_loop.thisTrialN'
p6827
I29
sg6371
S'1-treacle_cookies.png'
p6828
sS'block_loop.thisIndex'
p6829
g6365
sg38
S'left'
p6830
sg59
g63
sS'trial_loop.thisN'
p6831
I29
sg33
S'1-treacle_cookies.png'
p6832
sg64
g65
sS'trial_loop.thisIndex'
p6833
g60
(g99
S'\x1d\x00\x00\x00'
tRp6834
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6835
I0
sg6380
S'21-nakd_banana_crunch.png'
p6836
sS'block_loop.thisRepN'
p6837
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6838
I2
sg6385
S'21-nakd_banana_crunch.png'
p6839
sg55
g11
sS'block_loop.thisTrial'
p6840
Nsg70
Vy
sS'block_loop.thisTrialN'
p6841
I0
sg39
F0.74992402164662053
sg34
g753
(S'\x07\xdf\x07\x05\r)\x14\r\x0b\xd8'
tRp6842
sa(dp6843
S'trial_loop.thisTrialN'
p6844
I30
sg6371
S'22-daim.png'
p6845
sS'block_loop.thisIndex'
p6846
g6365
sg38
S'right'
p6847
sg59
g63
sS'trial_loop.thisN'
p6848
I30
sg33
S'7-olives.png'
p6849
sg64
g65
sS'trial_loop.thisIndex'
p6850
g60
(g99
S'\x1e\x00\x00\x00'
tRp6851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6852
I0
sg6380
S'7-olives.png'
p6853
sS'block_loop.thisRepN'
p6854
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6855
I2
sg6385
S'22-daim.png'
p6856
sg55
g11
sS'block_loop.thisTrial'
p6857
Nsg70
Vy
sS'block_loop.thisTrialN'
p6858
I0
sg39
F0.6999254186221151
sg34
g753
(S'\x07\xdf\x07\x05\r)\x1a\t\xcb\xd0'
tRp6859
sa(dp6860
S'trial_loop.thisTrialN'
p6861
I31
sg6371
g6770
sS'block_loop.thisIndex'
p6862
g6365
sg38
S'right'
p6863
sg59
g63
sS'trial_loop.thisN'
p6864
I31
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p6865
g60
(g99
S'\x1f\x00\x00\x00'
tRp6866
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6867
I0
sg6380
g6777
sS'block_loop.thisRepN'
p6868
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6869
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p6870
Nsg70
Vy
sS'block_loop.thisTrialN'
p6871
I0
sg39
F1.5332979052782321
sg34
g753
(S'\x07\xdf\x07\x05\r) \x05\x9d\x80'
tRp6872
sa(dp6873
S'trial_loop.thisTrialN'
p6874
I32
sg6371
S'27-hartleys_raspberries_jelly.png'
p6875
sS'block_loop.thisIndex'
p6876
g6365
sg38
S'left'
p6877
sg59
g63
sS'trial_loop.thisN'
p6878
I32
sg33
S'27-hartleys_raspberries_jelly.png'
p6879
sg64
g65
sS'trial_loop.thisIndex'
p6880
g60
(g99
S' \x00\x00\x00'
tRp6881
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6882
I0
sg6380
S'51-mars.png'
p6883
sS'block_loop.thisRepN'
p6884
I2
sg6383
g6879
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6885
I2
sg6385
S'51-mars.png'
p6886
sg55
g11
sS'block_loop.thisTrial'
p6887
Nsg70
Vy
sS'block_loop.thisTrialN'
p6888
I0
sg39
F0.74997020736191189
sg34
g753
(S'\x07\xdf\x07\x05\r)&\x0eDX'
tRp6889
sa(dp6890
S'trial_loop.thisTrialN'
p6891
I33
sg6371
g6625
sS'block_loop.thisIndex'
p6892
g6365
sg38
S'left'
p6893
sg59
g63
sS'trial_loop.thisN'
p6894
I33
sg33
g6629
sg64
g65
sS'trial_loop.thisIndex'
p6895
g60
(g99
S'!\x00\x00\x00'
tRp6896
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6897
I0
sg6380
g6633
sS'block_loop.thisRepN'
p6898
I2
sg6383
g6629
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6899
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p6900
Nsg70
Vy
sS'block_loop.thisTrialN'
p6901
I0
sg39
F0.86656376565224491
sg34
g753
(S'\x07\xdf\x07\x05\r),\x0b\x088'
tRp6902
sa(dp6903
S'trial_loop.thisTrialN'
p6904
I34
sg6371
g6443
sS'block_loop.thisIndex'
p6905
g6365
sg38
S'right'
p6906
sg59
g63
sS'trial_loop.thisN'
p6907
I34
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p6908
g60
(g99
S'"\x00\x00\x00'
tRp6909
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6910
I0
sg6380
g6451
sS'block_loop.thisRepN'
p6911
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6912
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p6913
Nsg70
Vy
sS'block_loop.thisTrialN'
p6914
I0
sg39
F0.86668749775526521
sg34
g753
(S'\x07\xdf\x07\x05\r)2\tu\xe0'
tRp6915
sa(dp6916
S'trial_loop.thisTrialN'
p6917
I35
sg6371
g6674
sS'block_loop.thisIndex'
p6918
g6365
sg38
S'right'
p6919
sg59
g63
sS'trial_loop.thisN'
p6920
I35
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p6921
g60
(g99
S'#\x00\x00\x00'
tRp6922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6923
I0
sg6380
g6682
sS'block_loop.thisRepN'
p6924
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6925
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p6926
Nsg70
Vy
sS'block_loop.thisTrialN'
p6927
I0
sg39
F1.2831965532905087
sg34
g753
(S'\x07\xdf\x07\x05\r)8\x07\xe3\x88'
tRp6928
sa(dp6929
S'trial_loop.thisTrialN'
p6930
I36
sg6371
S'48-twix.png'
p6931
sS'block_loop.thisIndex'
p6932
g6365
sg38
S'left'
p6933
sg59
g63
sS'trial_loop.thisN'
p6934
I36
sg33
S'48-twix.png'
p6935
sg64
g65
sS'trial_loop.thisIndex'
p6936
g60
(g99
S'$\x00\x00\x00'
tRp6937
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6938
I0
sg6380
S'50-polo.png'
p6939
sS'block_loop.thisRepN'
p6940
I2
sg6383
g6935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6941
I2
sg6385
S'50-polo.png'
p6942
sg55
g11
sS'block_loop.thisTrial'
p6943
Nsg70
Vy
sS'block_loop.thisTrialN'
p6944
I0
sg39
F0.84996484753901314
sg34
g753
(S'\x07\xdf\x07\x05\r*\x02\x0c\xbd\xb8'
tRp6945
sa(dp6946
S'trial_loop.thisTrialN'
p6947
I37
sg6371
g6659
sS'block_loop.thisIndex'
p6948
g6365
sg38
S'right'
p6949
sg59
g63
sS'trial_loop.thisN'
p6950
I37
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6951
g60
(g99
S'%\x00\x00\x00'
tRp6952
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6953
I0
sg6380
g6666
sS'block_loop.thisRepN'
p6954
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6955
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6956
Nsg70
Vy
sS'block_loop.thisTrialN'
p6957
I0
sg39
F0.68298980093913997
sg34
g753
(S"\x07\xdf\x07\x05\r*\x08\x0b'x"
tRp6958
sa(dp6959
S'trial_loop.thisTrialN'
p6960
I38
sg6371
S'3-ellas_strawberries_apples.png'
p6961
sS'block_loop.thisIndex'
p6962
g6365
sg38
S'right'
p6963
sg59
g63
sS'trial_loop.thisN'
p6964
I38
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p6965
g60
(g99
S'&\x00\x00\x00'
tRp6966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6967
I0
sg6380
S'13-mccoys_steak_crisps.png'
p6968
sS'block_loop.thisRepN'
p6969
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6970
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p6971
Nsg70
Vy
sS'block_loop.thisTrialN'
p6972
I0
sg39
F0.75002494598811609
sg34
g753
(S'\x07\xdf\x07\x05\r*\x0e\x06\xba\xa8'
tRp6973
sa(dp6974
S'trial_loop.thisTrialN'
p6975
I39
sg6371
g6509
sS'block_loop.thisIndex'
p6976
g6365
sg38
S'left'
p6977
sg59
g63
sS'trial_loop.thisN'
p6978
I39
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p6979
g60
(g99
S"'\x00\x00\x00"
tRp6980
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6981
I0
sg6380
g6517
sS'block_loop.thisRepN'
p6982
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6983
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p6984
Nsg70
Vy
sS'block_loop.thisTrialN'
p6985
I0
sg39
F0.69995079225554946
sg34
g753
(S'\x07\xdf\x07\x05\r*\x14\x03~\x88'
tRp6986
sa(dp6987
S'trial_loop.thisTrialN'
p6988
I40
sg6371
g6460
sS'block_loop.thisIndex'
p6989
g6365
sg38
S'right'
p6990
sg59
g63
sS'trial_loop.thisN'
p6991
I40
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p6992
g60
(g99
S'(\x00\x00\x00'
tRp6993
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6994
I0
sg6380
g6467
sS'block_loop.thisRepN'
p6995
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6996
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6997
Nsg70
Vy
sS'block_loop.thisTrialN'
p6998
I0
sg39
F1.5003757578588193
sg34
g753
(S'\x07\xdf\x07\x05\r*\x19\x0e\x8e\x90'
tRp6999
sa(dp7000
S'trial_loop.thisTrialN'
p7001
I41
sg6371
S'50-polo.png'
p7002
sS'block_loop.thisIndex'
p7003
g6365
sg38
S'right'
p7004
sg59
g63
sS'trial_loop.thisN'
p7005
I41
sg33
g6935
sg64
g65
sS'trial_loop.thisIndex'
p7006
g60
(g99
S')\x00\x00\x00'
tRp7007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7008
I0
sg6380
S'48-twix.png'
p7009
sS'block_loop.thisRepN'
p7010
I2
sg6383
g6935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7011
I2
sg6385
g6942
sg55
g11
sS'block_loop.thisTrial'
p7012
Nsg70
Vy
sS'block_loop.thisTrialN'
p7013
I0
sg39
F0.94987310332089692
sg34
g753
(S'\x07\xdf\x07\x05\r* \x07z\x10'
tRp7014
sa(dp7015
S'trial_loop.thisTrialN'
p7016
I42
sg6371
S'7-olives.png'
p7017
sS'block_loop.thisIndex'
p7018
g6365
sg38
S'left'
p7019
sg59
g63
sS'trial_loop.thisN'
p7020
I42
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p7021
g60
(g99
S'*\x00\x00\x00'
tRp7022
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7023
I0
sg6380
S'22-daim.png'
p7024
sS'block_loop.thisRepN'
p7025
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7026
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p7027
Nsg70
Vy
sS'block_loop.thisTrialN'
p7028
I0
sg39
F0.63329368584254553
sg34
g753
(S'\x07\xdf\x07\x05\r*&\x07V\xe8'
tRp7029
sa(dp7030
S'trial_loop.thisTrialN'
p7031
I43
sg6371
g6372
sS'block_loop.thisIndex'
p7032
g6365
sg38
S'left'
p7033
sg59
g63
sS'trial_loop.thisN'
p7034
I43
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7035
g60
(g99
S'+\x00\x00\x00'
tRp7036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7037
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7038
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7039
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7040
Nsg70
Vy
sS'block_loop.thisTrialN'
p7041
I0
sg39
F1.3333519596717451
sg34
g753
(S'\x07\xdf\x07\x05\r*,\x02.\x98'
tRp7042
sa(dp7043
S'trial_loop.thisTrialN'
p7044
I44
sg6371
g6828
sS'block_loop.thisIndex'
p7045
g6365
sg38
S'left'
p7046
sg59
g63
sS'trial_loop.thisN'
p7047
I44
sg33
g6839
sg64
g65
sS'trial_loop.thisIndex'
p7048
g60
(g99
S',\x00\x00\x00'
tRp7049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7050
I0
sg6380
g6836
sS'block_loop.thisRepN'
p7051
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7052
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p7053
Nsg70
Vy
sS'block_loop.thisTrialN'
p7054
I0
sg39
F0.6499290963738531
sg34
g753
(S'\x07\xdf\x07\x05\r*2\x07\xc0`'
tRp7055
sa(dp7056
S'trial_loop.thisTrialN'
p7057
I45
sg6371
g6706
sS'block_loop.thisIndex'
p7058
g6365
sg38
S'left'
p7059
sg59
g63
sS'trial_loop.thisN'
p7060
I45
sg33
g6486
sg64
g65
sS'trial_loop.thisIndex'
p7061
g60
(g99
S'-\x00\x00\x00'
tRp7062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7063
I0
sg6380
g6713
sS'block_loop.thisRepN'
p7064
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7065
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p7066
Nsg70
Vy
sS'block_loop.thisTrialN'
p7067
I0
sg39
F0.81661077814896998
sg34
g753
(S'\x07\xdf\x07\x05\r*8\x02\xdax'
tRp7068
sa(dp7069
S'trial_loop.thisTrialN'
p7070
I46
sg6371
S'16-skips_prawn.png'
p7071
sS'block_loop.thisIndex'
p7072
g6365
sg38
S'left'
p7073
sg59
g63
sS'trial_loop.thisN'
p7074
I46
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p7075
g60
(g99
S'.\x00\x00\x00'
tRp7076
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7077
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p7078
sS'block_loop.thisRepN'
p7079
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7080
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p7081
Nsg70
Vy
sS'block_loop.thisTrialN'
p7082
I0
sg39
F0.65026636613583833
sg34
g753
(S'\x07\xdf\x07\x05\r+\x02\x00\x90\x88'
tRp7083
sa(dp7084
S'trial_loop.thisTrialN'
p7085
I47
sg6371
S'51-mars.png'
p7086
sS'block_loop.thisIndex'
p7087
g6365
sg38
S'left'
p7088
sg59
g63
sS'trial_loop.thisN'
p7089
I47
sg33
g6879
sg64
g65
sS'trial_loop.thisIndex'
p7090
g60
(g99
S'/\x00\x00\x00'
tRp7091
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7092
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p7093
sS'block_loop.thisRepN'
p7094
I2
sg6383
g6879
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7095
I2
sg6385
g6886
sg55
g11
sS'block_loop.thisTrial'
p7096
Nsg70
Vy
sS'block_loop.thisTrialN'
p7097
I0
sg39
F0.64990771409793524
sg34
g753
(S"\x07\xdf\x07\x05\r+\x07\x0b'x"
tRp7098
sa(dp7099
S'trial_loop.thisTrialN'
p7100
I48
sg6371
g6409
sS'block_loop.thisIndex'
p7101
g6365
sg38
S'left'
p7102
sg59
g63
sS'trial_loop.thisN'
p7103
I48
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p7104
g60
(g99
S'0\x00\x00\x00'
tRp7105
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7106
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7107
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7108
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p7109
Nsg70
Vy
sS'block_loop.thisTrialN'
p7110
I0
sg39
F1.5832739856396074
sg34
g753
(S'\x07\xdf\x07\x05\r+\r\x06=\xa8'
tRp7111
sa(dp7112
S'trial_loop.thisTrialN'
p7113
I49
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p7114
sS'block_loop.thisIndex'
p7115
g6365
sg38
S'left'
p7116
sg59
g63
sS'trial_loop.thisN'
p7117
I49
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p7118
g60
(g99
S'1\x00\x00\x00'
tRp7119
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7120
I0
sg6380
S'36-fig_rolls.png'
p7121
sS'block_loop.thisRepN'
p7122
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7123
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7124
Nsg70
Vy
sS'block_loop.thisTrialN'
p7125
I0
sg39
F0.79990095729863242
sg34
g753
(S'\x07\xdf\x07\x05\r+\x14\x00Y\xd8'
tRp7126
sa(dp7127
S'trial_loop.thisTrialN'
p7128
I50
sg6371
S'18-mms.png'
p7129
sS'block_loop.thisIndex'
p7130
g6365
sg38
S'right'
p7131
sg59
g63
sS'trial_loop.thisN'
p7132
I50
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7133
g60
(g99
S'2\x00\x00\x00'
tRp7134
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7135
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p7136
sS'block_loop.thisRepN'
p7137
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7138
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7139
Nsg70
Vy
sS'block_loop.thisTrialN'
p7140
I0
sg39
F0.84995372875528119
sg34
g753
(S'\x07\xdf\x07\x05\r+\x19\r\x17\x90'
tRp7141
sa(dp7142
S'trial_loop.thisTrialN'
p7143
I51
sg6371
g6811
sS'block_loop.thisIndex'
p7144
g6365
sg38
S'right'
p7145
sg59
g63
sS'trial_loop.thisN'
p7146
I51
sg33
g6815
sg64
g65
sS'trial_loop.thisIndex'
p7147
g60
(g99
S'3\x00\x00\x00'
tRp7148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7149
I0
sg6380
g6819
sS'block_loop.thisRepN'
p7150
I2
sg6383
g6815
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7151
I2
sg6385
g6822
sg55
g11
sS'block_loop.thisTrial'
p7152
Nsg70
Vy
sS'block_loop.thisTrialN'
p7153
I0
sg39
F0.63325605303725752
sg34
g753
(S'\x07\xdf\x07\x05\r+\x1f\x0bF\xb8'
tRp7154
sa(dp7155
S'trial_loop.thisTrialN'
p7156
I52
sg6371
g6492
sS'block_loop.thisIndex'
p7157
g6365
sg38
S'left'
p7158
sg59
g63
sS'trial_loop.thisN'
p7159
I52
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p7160
g60
(g99
S'4\x00\x00\x00'
tRp7161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7162
I0
sg6380
g6500
sS'block_loop.thisRepN'
p7163
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7164
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p7165
Nsg70
Vy
sS'block_loop.thisTrialN'
p7166
I0
sg39
F2.0832725601540005
sg34
g753
(S'\x07\xdf\x07\x05\r+%\x06"P'
tRp7167
sa(dp7168
S'trial_loop.thisTrialN'
p7169
I53
sg6371
g6721
sS'block_loop.thisIndex'
p7170
g6365
sg38
S'right'
p7171
sg59
g63
sS'trial_loop.thisN'
p7172
I53
sg33
g6725
sg64
g65
sS'trial_loop.thisIndex'
p7173
g60
(g99
S'5\x00\x00\x00'
tRp7174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7175
I0
sg6380
g6729
sS'block_loop.thisRepN'
p7176
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7177
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p7178
Nsg70
Vy
sS'block_loop.thisTrialN'
p7179
I0
sg39
F0.91666101224291197
sg34
g753
(S'\x07\xdf\x07\x05\r+,\x08\x1a8'
tRp7180
sa(dp7181
S'trial_loop.thisTrialN'
p7182
I54
sg6371
g6875
sS'block_loop.thisIndex'
p7183
g6365
sg38
S'left'
p7184
sg59
g63
sS'trial_loop.thisN'
p7185
I54
sg33
g6879
sg64
g65
sS'trial_loop.thisIndex'
p7186
g60
(g99
S'6\x00\x00\x00'
tRp7187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7188
I0
sg6380
g6883
sS'block_loop.thisRepN'
p7189
I2
sg6383
g6879
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7190
I2
sg6385
g6886
sg55
g11
sS'block_loop.thisTrial'
p7191
Nsg70
Vy
sS'block_loop.thisTrialN'
p7192
I0
sg39
F0.76661360061007144
sg34
g753
(S'\x07\xdf\x07\x05\r+2\x07?x'
tRp7193
sa(dp7194
S'trial_loop.thisTrialN'
p7195
I55
sg6371
S'25-kitkat.png'
p7196
sS'block_loop.thisIndex'
p7197
g6365
sg38
S'left'
p7198
sg59
g63
sS'trial_loop.thisN'
p7199
I55
sg33
g6725
sg64
g65
sS'trial_loop.thisIndex'
p7200
g60
(g99
S'7\x00\x00\x00'
tRp7201
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7202
I0
sg6380
S'31-hobnobs.png'
p7203
sS'block_loop.thisRepN'
p7204
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7205
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p7206
Nsg70
Vy
sS'block_loop.thisTrialN'
p7207
I0
sg39
F0.94989762166369474
sg34
g753
(S'\x07\xdf\x07\x05\r+8\x04=\xf0'
tRp7208
sa(dp7209
S'trial_loop.thisTrialN'
p7210
I56
sg6371
g7017
sS'block_loop.thisIndex'
p7211
g6365
sg38
S'left'
p7212
sg59
g63
sS'trial_loop.thisN'
p7213
I56
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p7214
g60
(g99
S'8\x00\x00\x00'
tRp7215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7216
I0
sg6380
g7024
sS'block_loop.thisRepN'
p7217
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7218
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p7219
Nsg70
Vy
sS'block_loop.thisTrialN'
p7220
I0
sg39
F0.83329494026929751
sg34
g753
(S'\x07\xdf\x07\x05\r,\x02\x03\xdcH'
tRp7221
sa(dp7222
S'trial_loop.thisTrialN'
p7223
I57
sg6371
g6811
sS'block_loop.thisIndex'
p7224
g6365
sg38
S'right'
p7225
sg59
g63
sS'trial_loop.thisN'
p7226
I57
sg33
g6815
sg64
g65
sS'trial_loop.thisIndex'
p7227
g60
(g99
S'9\x00\x00\x00'
tRp7228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7229
I0
sg6380
g6819
sS'block_loop.thisRepN'
p7230
I2
sg6383
g6815
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7231
I2
sg6385
g6822
sg55
g11
sS'block_loop.thisTrial'
p7232
Nsg70
Vy
sS'block_loop.thisTrialN'
p7233
I0
sg39
F0.6499955239769406
sg34
g753
(S'\x07\xdf\x07\x05\r,\x08\x01\xcc\xf0'
tRp7234
sa(dp7235
S'trial_loop.thisTrialN'
p7236
I58
sg6371
g7071
sS'block_loop.thisIndex'
p7237
g6365
sg38
S'left'
p7238
sg59
g63
sS'trial_loop.thisN'
p7239
I58
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p7240
g60
(g99
S':\x00\x00\x00'
tRp7241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7242
I0
sg6380
g7078
sS'block_loop.thisRepN'
p7243
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7244
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p7245
Nsg70
Vy
sS'block_loop.thisTrialN'
p7246
I0
sg39
F1.3499095387187481
sg34
g753
(S'\x07\xdf\x07\x05\r,\r\x0cc\xe0'
tRp7247
sa(dp7248
S'trial_loop.thisTrialN'
p7249
I59
sg6371
S'33-ambrosia_rice.png'
p7250
sS'block_loop.thisIndex'
p7251
g6365
sg38
S'right'
p7252
sg59
g63
sS'trial_loop.thisN'
p7253
I59
sg33
g6592
sg64
g65
sS'trial_loop.thisIndex'
p7254
g60
(g99
S';\x00\x00\x00'
tRp7255
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7256
I0
sg6380
S'23-crunchie_redo.png'
p7257
sS'block_loop.thisRepN'
p7258
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7259
I2
sg6385
g6586
sg55
g11
sS'block_loop.thisTrial'
p7260
Nsg70
Vy
sS'block_loop.thisTrialN'
p7261
I0
sg39
F0.79989953181302553
sg34
g753
(S'\x07\xdf\x07\x05\r,\x14\x02\xf1\xe8'
tRp7262
sa(dp7263
S'trial_loop.thisTrialN'
p7264
I60
sg6371
g6392
sS'block_loop.thisIndex'
p7265
g6365
sg38
S'left'
p7266
sg59
g63
sS'trial_loop.thisN'
p7267
I60
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7268
g60
(g99
S'<\x00\x00\x00'
tRp7269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7270
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7271
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7272
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7273
Nsg70
Vy
sS'block_loop.thisTrialN'
p7274
I0
sg39
F0.68324011611366586
sg34
g753
(S'\x07\xdf\x07\x05\r,\x1a\x00ix'
tRp7275
sa(dp7276
S'trial_loop.thisTrialN'
p7277
I61
sg6371
g6931
sS'block_loop.thisIndex'
p7278
g6365
sg38
S'left'
p7279
sg59
g63
sS'trial_loop.thisN'
p7280
I61
sg33
g6935
sg64
g65
sS'trial_loop.thisIndex'
p7281
g60
(g99
S'=\x00\x00\x00'
tRp7282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7283
I0
sg6380
g6939
sS'block_loop.thisRepN'
p7284
I2
sg6383
g6935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7285
I2
sg6385
g6942
sg55
g11
sS'block_loop.thisTrial'
p7286
Nsg70
Vy
sS'block_loop.thisTrialN'
p7287
I0
sg39
F0.76662015784131654
sg34
g753
(S'\x07\xdf\x07\x05\r,\x1f\x0b>\xe8'
tRp7288
sa(dp7289
S'trial_loop.thisTrialN'
p7290
I62
sg6371
g6875
sS'block_loop.thisIndex'
p7291
g6365
sg38
S'left'
p7292
sg59
g63
sS'trial_loop.thisN'
p7293
I62
sg33
g6879
sg64
g65
sS'trial_loop.thisIndex'
p7294
g60
(g99
S'>\x00\x00\x00'
tRp7295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7296
I0
sg6380
g6883
sS'block_loop.thisRepN'
p7297
I2
sg6383
g6879
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7298
I2
sg6385
g6886
sg55
g11
sS'block_loop.thisTrial'
p7299
Nsg70
Vy
sS'block_loop.thisTrialN'
p7300
I0
sg39
F0.93324339473019791
sg34
g753
(S'\x07\xdf\x07\x05\r,%\x08=`'
tRp7301
sa(dp7302
S'trial_loop.thisTrialN'
p7303
I63
sg6371
g7196
sS'block_loop.thisIndex'
p7304
g6365
sg38
S'left'
p7305
sg59
g63
sS'trial_loop.thisN'
p7306
I63
sg33
g6725
sg64
g65
sS'trial_loop.thisIndex'
p7307
g60
(g99
S'?\x00\x00\x00'
tRp7308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7309
I0
sg6380
g7203
sS'block_loop.thisRepN'
p7310
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7311
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p7312
Nsg70
Vy
sS'block_loop.thisTrialN'
p7313
I0
sg39
F0.98329303011905722
sg34
g753
(S'\x07\xdf\x07\x05\r,+\x07\x9d8'
tRp7314
sa(dp7315
S'trial_loop.thisTrialN'
p7316
I64
sg6371
g7086
sS'block_loop.thisIndex'
p7317
g6365
sg38
S'right'
p7318
sg59
g63
sS'trial_loop.thisN'
p7319
I64
sg33
g6886
sg64
g65
sS'trial_loop.thisIndex'
p7320
g60
(g99
S'@\x00\x00\x00'
tRp7321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7322
I0
sg6380
g7093
sS'block_loop.thisRepN'
p7323
I2
sg6383
g6879
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7324
I2
sg6385
g6886
sg55
g11
sS'block_loop.thisTrial'
p7325
Nsg70
Vy
sS'block_loop.thisTrialN'
p7326
I0
sg39
F0.91672629945787776
sg34
g753
(S'\x07\xdf\x07\x05\r,1\x07\xf3('
tRp7327
sa(dp7328
S'trial_loop.thisTrialN'
p7329
I65
sg6371
g7017
sS'block_loop.thisIndex'
p7330
g6365
sg38
S'left'
p7331
sg59
g63
sS'trial_loop.thisN'
p7332
I65
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p7333
g60
(g99
S'A\x00\x00\x00'
tRp7334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7335
I0
sg6380
g7024
sS'block_loop.thisRepN'
p7336
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7337
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p7338
Nsg70
Vy
sS'block_loop.thisTrialN'
p7339
I0
sg39
F0.7165251920278024
sg34
g753
(S'\x07\xdf\x07\x05\r,7\x07S\x00'
tRp7340
sa(dp7341
S'trial_loop.thisTrialN'
p7342
I66
sg6371
g6642
sS'block_loop.thisIndex'
p7343
g6365
sg38
S'left'
p7344
sg59
g63
sS'trial_loop.thisN'
p7345
I66
sg33
g6646
sg64
g65
sS'trial_loop.thisIndex'
p7346
g60
(g99
S'B\x00\x00\x00'
tRp7347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7348
I0
sg6380
g6650
sS'block_loop.thisRepN'
p7349
I2
sg6383
g6646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7350
I2
sg6385
g6653
sg55
g11
sS'block_loop.thisTrial'
p7351
Nsg70
Vy
sS'block_loop.thisTrialN'
p7352
I0
sg39
F0.74990634563255298
sg34
g753
(S'\x07\xdf\x07\x05\r-\x01\x03_H'
tRp7353
sa(dp7354
S'trial_loop.thisTrialN'
p7355
I67
sg6371
g6509
sS'block_loop.thisIndex'
p7356
g6365
sg38
S'left'
p7357
sg59
g63
sS'trial_loop.thisN'
p7358
I67
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p7359
g60
(g99
S'C\x00\x00\x00'
tRp7360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7361
I0
sg6380
g6517
sS'block_loop.thisRepN'
p7362
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7363
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p7364
Nsg70
Vy
sS'block_loop.thisTrialN'
p7365
I0
sg39
F0.66660470558326779
sg34
g753
(S'\x07\xdf\x07\x05\r-\x07\x00\x1f@'
tRp7366
sa(dp7367
S'trial_loop.thisTrialN'
p7368
I68
sg6371
g6845
sS'block_loop.thisIndex'
p7369
g6365
sg38
S'right'
p7370
sg59
g63
sS'trial_loop.thisN'
p7371
I68
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p7372
g60
(g99
S'D\x00\x00\x00'
tRp7373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7374
I0
sg6380
g6853
sS'block_loop.thisRepN'
p7375
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7376
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p7377
Nsg70
Vy
sS'block_loop.thisTrialN'
p7378
I0
sg39
F0.75002494598811609
sg34
g753
(S'\x07\xdf\x07\x05\r-\x0c\n\xb60'
tRp7379
sa(dp7380
S'trial_loop.thisTrialN'
p7381
I69
sg6371
g6755
sS'block_loop.thisIndex'
p7382
g6365
sg38
S'right'
p7383
sg59
g63
sS'trial_loop.thisN'
p7384
I69
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p7385
g60
(g99
S'E\x00\x00\x00'
tRp7386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7387
I0
sg6380
g6762
sS'block_loop.thisRepN'
p7388
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7389
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p7390
Nsg70
Vy
sS'block_loop.thisTrialN'
p7391
I0
sg39
F0.78331971520037769
sg34
g753
(S'\x07\xdf\x07\x05\r-\x12\x07z\x10'
tRp7392
sa(dp7393
S'trial_loop.thisTrialN'
p7394
I70
sg6371
S'30-spaghetti_hoops.png'
p7395
sS'block_loop.thisIndex'
p7396
g6365
sg38
S'left'
p7397
sg59
g63
sS'trial_loop.thisN'
p7398
I70
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p7399
g60
(g99
S'F\x00\x00\x00'
tRp7400
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7401
I0
sg6380
S'19-caramello_redo.png'
p7402
sS'block_loop.thisRepN'
p7403
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7404
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p7405
Nsg70
Vy
sS'block_loop.thisTrialN'
p7406
I0
sg39
F0.70038585029305978
sg34
g753
(S'\x07\xdf\x07\x05\r-\x18\x04\xb7\x08'
tRp7407
sa(dp7408
S'trial_loop.thisTrialN'
p7409
I71
sg6371
S'8-liquorice_catherine_wheels.png'
p7410
sS'block_loop.thisIndex'
p7411
g6365
sg38
S'right'
p7412
sg59
g63
sS'trial_loop.thisN'
p7413
I71
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p7414
g60
(g99
S'G\x00\x00\x00'
tRp7415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7416
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p7417
sS'block_loop.thisRepN'
p7418
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7419
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p7420
Nsg70
Vy
sS'block_loop.thisTrialN'
p7421
I0
sg39
F0.68333163225452154
sg34
g753
(S'\x07\xdf\x07\x05\r-\x1e\x00\x84\xd0'
tRp7422
sa(dp7423
S'trial_loop.thisTrialN'
p7424
I72
sg6371
S'5-pineapple.png'
p7425
sS'block_loop.thisIndex'
p7426
g6365
sg38
S'right'
p7427
sg59
g63
sS'trial_loop.thisN'
p7428
I72
sg33
g6646
sg64
g65
sS'trial_loop.thisIndex'
p7429
g60
(g99
S'H\x00\x00\x00'
tRp7430
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7431
I0
sg6380
S'40-sardines.png'
p7432
sS'block_loop.thisRepN'
p7433
I2
sg6383
g6646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7434
I2
sg6385
g6653
sg55
g11
sS'block_loop.thisTrial'
p7435
Nsg70
Vy
sS'block_loop.thisTrialN'
p7436
I0
sg39
F0.83321482800965896
sg34
g753
(S'\x07\xdf\x07\x05\r-#\x0b\x94\xd8'
tRp7437
sa(dp7438
S'trial_loop.thisTrialN'
p7439
I73
sg6371
S'46-pistachios.png'
p7440
sS'block_loop.thisIndex'
p7441
g6365
sg38
S'left'
p7442
sg59
g63
sS'trial_loop.thisN'
p7443
I73
sg33
g6815
sg64
g65
sS'trial_loop.thisIndex'
p7444
g60
(g99
S'I\x00\x00\x00'
tRp7445
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7446
I0
sg6380
S'29-beans.png'
p7447
sS'block_loop.thisRepN'
p7448
I2
sg6383
g6815
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7449
I2
sg6385
g6822
sg55
g11
sS'block_loop.thisTrial'
p7450
Nsg70
Vy
sS'block_loop.thisTrialN'
p7451
I0
sg39
F0.74993656591504987
sg34
g753
(S'\x07\xdf\x07\x05\r-)\t\x89h'
tRp7452
sa(dp7453
S'trial_loop.thisTrialN'
p7454
I74
sg6371
g6392
sS'block_loop.thisIndex'
p7455
g6365
sg38
S'left'
p7456
sg59
g63
sS'trial_loop.thisN'
p7457
I74
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7458
g60
(g99
S'J\x00\x00\x00'
tRp7459
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7460
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7461
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7462
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7463
Nsg70
Vy
sS'block_loop.thisTrialN'
p7464
I0
sg39
F0.83335595103017113
sg34
g753
(S'\x07\xdf\x07\x05\r-/\x06MH'
tRp7465
sa(dp7466
S'trial_loop.thisTrialN'
p7467
I75
sg6371
S'21-nakd_banana_crunch.png'
p7468
sS'block_loop.thisIndex'
p7469
g6365
sg38
S'right'
p7470
sg59
g63
sS'trial_loop.thisN'
p7471
I75
sg33
g6832
sg64
g65
sS'trial_loop.thisIndex'
p7472
g60
(g99
S'K\x00\x00\x00'
tRp7473
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7474
I0
sg6380
S'1-treacle_cookies.png'
p7475
sS'block_loop.thisRepN'
p7476
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7477
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p7478
Nsg70
Vy
sS'block_loop.thisTrialN'
p7479
I0
sg39
F0.96654301059061254
sg34
g753
(S'\x07\xdf\x07\x05\r-5\x04=\xf0'
tRp7480
sa(dp7481
S'trial_loop.thisTrialN'
p7482
I76
sg6371
g6721
sS'block_loop.thisIndex'
p7483
g6365
sg38
S'right'
p7484
sg59
g63
sS'trial_loop.thisN'
p7485
I76
sg33
g6725
sg64
g65
sS'trial_loop.thisIndex'
p7486
g60
(g99
S'L\x00\x00\x00'
tRp7487
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7488
I0
sg6380
g6729
sS'block_loop.thisRepN'
p7489
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7490
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p7491
Nsg70
Vy
sS'block_loop.thisTrialN'
p7492
I0
sg39
F0.74995224625126866
sg34
g753
(S'\x07\xdf\x07\x05\r-;\x04\x1a\xc8'
tRp7493
sa(dp7494
S'trial_loop.thisTrialN'
p7495
I77
sg6371
g6961
sS'block_loop.thisIndex'
p7496
g6365
sg38
S'right'
p7497
sg59
g63
sS'trial_loop.thisN'
p7498
I77
sg33
g6749
sg64
g65
sS'trial_loop.thisIndex'
p7499
g60
(g99
S'M\x00\x00\x00'
tRp7500
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7501
I0
sg6380
g6968
sS'block_loop.thisRepN'
p7502
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7503
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p7504
Nsg70
Vy
sS'block_loop.thisTrialN'
p7505
I0
sg39
F0.6666240921804274
sg34
g753
(S'\x07\xdf\x07\x05\r.\x05\x00\xda\xc0'
tRp7506
sa(dp7507
S'trial_loop.thisTrialN'
p7508
I78
sg6371
g6409
sS'block_loop.thisIndex'
p7509
g6365
sg38
S'right'
p7510
sg59
g63
sS'trial_loop.thisN'
p7511
I78
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p7512
g60
(g99
S'N\x00\x00\x00'
tRp7513
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7514
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7515
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7516
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p7517
Nsg70
Vy
sS'block_loop.thisTrialN'
p7518
I0
sg39
F0.88325020854881586
sg34
g753
(S'\x07\xdf\x07\x05\r.\n\x0bq\xb0'
tRp7519
sa(dp7520
S'trial_loop.thisTrialN'
p7521
I79
sg6371
g6526
sS'block_loop.thisIndex'
p7522
g6365
sg38
S'right'
p7523
sg59
g63
sS'trial_loop.thisN'
p7524
I79
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p7525
g60
(g99
S'O\x00\x00\x00'
tRp7526
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7527
I0
sg6380
g6534
sS'block_loop.thisRepN'
p7528
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7529
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7530
Nsg70
Vy
sS'block_loop.thisTrialN'
p7531
I0
sg39
F1.2833419527669321
sg34
g753
(S'\x07\xdf\x07\x05\r.\x10\nXp'
tRp7532
sa(dp7533
S'trial_loop.thisTrialN'
p7534
I80
sg6371
g6931
sS'block_loop.thisIndex'
p7535
g6365
sg38
S'left'
p7536
sg59
g63
sS'trial_loop.thisN'
p7537
I80
sg33
g6942
sg64
g65
sS'trial_loop.thisIndex'
p7538
g60
(g99
S'P\x00\x00\x00'
tRp7539
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7540
I0
sg6380
g6939
sS'block_loop.thisRepN'
p7541
I2
sg6383
g6935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7542
I2
sg6385
g6942
sg55
g11
sS'block_loop.thisTrial'
p7543
Nsg70
Vy
sS'block_loop.thisTrialN'
p7544
I0
sg39
F0.84994175468091271
sg34
g753
(S'\x07\xdf\x07\x05\r.\x16\x0e\xf8\x08'
tRp7545
sa(dp7546
S'trial_loop.thisTrialN'
p7547
I81
sg6371
g7468
sS'block_loop.thisIndex'
p7548
g6365
sg38
S'right'
p7549
sg59
g63
sS'trial_loop.thisN'
p7550
I81
sg33
g6832
sg64
g65
sS'trial_loop.thisIndex'
p7551
g60
(g99
S'Q\x00\x00\x00'
tRp7552
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7553
I0
sg6380
g7475
sS'block_loop.thisRepN'
p7554
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7555
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p7556
Nsg70
Vy
sS'block_loop.thisTrialN'
p7557
I0
sg39
F0.66672872278195427
sg34
g753
(S'\x07\xdf\x07\x05\r.\x1c\ra\xc8'
tRp7558
sa(dp7559
S'trial_loop.thisTrialN'
p7560
I82
sg6371
g6372
sS'block_loop.thisIndex'
p7561
g6365
sg38
S'left'
p7562
sg59
g63
sS'trial_loop.thisN'
p7563
I82
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p7564
g60
(g99
S'R\x00\x00\x00'
tRp7565
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7566
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7567
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7568
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7569
Nsg70
Vy
sS'block_loop.thisTrialN'
p7570
I0
sg39
F1.599975823773093
sg34
g753
(S'\x07\xdf\x07\x05\r."\x08\xb6x'
tRp7571
sa(dp7572
S'trial_loop.thisTrialN'
p7573
I83
sg6371
g7425
sS'block_loop.thisIndex'
p7574
g6365
sg38
S'right'
p7575
sg59
g63
sS'trial_loop.thisN'
p7576
I83
sg33
g6646
sg64
g65
sS'trial_loop.thisIndex'
p7577
g60
(g99
S'S\x00\x00\x00'
tRp7578
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7579
I0
sg6380
g7432
sS'block_loop.thisRepN'
p7580
I2
sg6383
g6646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7581
I2
sg6385
g6653
sg55
g11
sS'block_loop.thisTrial'
p7582
Nsg70
Vy
sS'block_loop.thisTrialN'
p7583
I0
sg39
F1.9165455479533193
sg34
g753
(S'\x07\xdf\x07\x05\r.)\x03\x11('
tRp7584
sa(dp7585
S'trial_loop.thisTrialN'
p7586
I84
sg6371
g6443
sS'block_loop.thisIndex'
p7587
g6365
sg38
S'right'
p7588
sg59
g63
sS'trial_loop.thisN'
p7589
I84
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p7590
g60
(g99
S'T\x00\x00\x00'
tRp7591
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7592
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7593
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7594
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p7595
Nsg70
Vy
sS'block_loop.thisTrialN'
p7596
I0
sg39
F0.84981688219068019
sg34
g753
(S'\x07\xdf\x07\x05\r.0\x02m\x18'
tRp7597
sa(dp7598
S'trial_loop.thisTrialN'
p7599
I85
sg6371
g6492
sS'block_loop.thisIndex'
p7600
g6365
sg38
S'left'
p7601
sg59
g63
sS'trial_loop.thisN'
p7602
I85
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p7603
g60
(g99
S'U\x00\x00\x00'
tRp7604
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7605
I0
sg6380
g6500
sS'block_loop.thisRepN'
p7606
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7607
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p7608
Nsg70
Vy
sS'block_loop.thisTrialN'
p7609
I0
sg39
F0.94996376416929706
sg34
g753
(S'\x07\xdf\x07\x05\r.6\x00\x9c@'
tRp7610
sa(dp7611
S'trial_loop.thisTrialN'
p7612
I86
sg6371
g7440
sS'block_loop.thisIndex'
p7613
g6365
sg38
S'left'
p7614
sg59
g63
sS'trial_loop.thisN'
p7615
I86
sg33
g6815
sg64
g65
sS'trial_loop.thisIndex'
p7616
g60
(g99
S'V\x00\x00\x00'
tRp7617
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7618
I0
sg6380
g7447
sS'block_loop.thisRepN'
p7619
I2
sg6383
g6815
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7620
I2
sg6385
g6822
sg55
g11
sS'block_loop.thisTrial'
p7621
Nsg70
Vy
sS'block_loop.thisTrialN'
p7622
I0
sg39
F0.73321819215470896
sg34
g753
(S'\x07\xdf\x07\x05\r/\x00\x00:\x98'
tRp7623
sa(dp7624
S'trial_loop.thisTrialN'
p7625
I87
sg6371
g6674
sS'block_loop.thisIndex'
p7626
g6365
sg38
S'right'
p7627
sg59
g63
sS'trial_loop.thisN'
p7628
I87
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p7629
g60
(g99
S'W\x00\x00\x00'
tRp7630
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7631
I0
sg6380
g6682
sS'block_loop.thisRepN'
p7632
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7633
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p7634
Nsg70
Vy
sS'block_loop.thisTrialN'
p7635
I0
sg39
F0.83368295729997044
sg34
g753
(S'\x07\xdf\x07\x05\r/\x05\x0c\x028'
tRp7636
sa(dp7637
S'trial_loop.thisTrialN'
p7638
I88
sg6371
g7440
sS'block_loop.thisIndex'
p7639
g6365
sg38
S'left'
p7640
sg59
g63
sS'trial_loop.thisN'
p7641
I88
sg33
g6815
sg64
g65
sS'trial_loop.thisIndex'
p7642
g60
(g99
S'X\x00\x00\x00'
tRp7643
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7644
I0
sg6380
g7447
sS'block_loop.thisRepN'
p7645
I2
sg6383
g6815
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7646
I2
sg6385
g6822
sg55
g11
sS'block_loop.thisTrial'
p7647
Nsg70
Vy
sS'block_loop.thisTrialN'
p7648
I0
sg39
F0.5832859597130664
sg34
g753
(S'\x07\xdf\x07\x05\r/\x0b\t\xf6\xc8'
tRp7649
sa(dp7650
S'trial_loop.thisTrialN'
p7651
I89
sg6371
g7196
sS'block_loop.thisIndex'
p7652
g6365
sg38
S'left'
p7653
sg59
g63
sS'trial_loop.thisN'
p7654
I89
sg33
g6725
sg64
g65
sS'trial_loop.thisIndex'
p7655
g60
(g99
S'Y\x00\x00\x00'
tRp7656
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7657
I0
sg6380
g7203
sS'block_loop.thisRepN'
p7658
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7659
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p7660
Nsg70
Vy
sS'block_loop.thisTrialN'
p7661
I0
sg39
F0.8333146119630328
sg34
g753
(S'\x07\xdf\x07\x05\r/\x11\x04\x1a\xc8'
tRp7662
sa(dp7663
S'trial_loop.thisTrialN'
p7664
I90
sg6371
g6426
sS'block_loop.thisIndex'
p7665
g6365
sg38
S'left'
p7666
sg59
g63
sS'trial_loop.thisN'
p7667
I90
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7668
g60
(g99
S'Z\x00\x00\x00'
tRp7669
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7670
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7671
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7672
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7673
Nsg70
Vy
sS'block_loop.thisTrialN'
p7674
I0
sg39
F0.73291085757773544
sg34
g753
(S'\x07\xdf\x07\x05\r/\x17\x02\x0bp'
tRp7675
sa(dp7676
S'trial_loop.thisTrialN'
p7677
I91
sg6371
g7002
sS'block_loop.thisIndex'
p7678
g6365
sg38
S'right'
p7679
sg59
g63
sS'trial_loop.thisN'
p7680
I91
sg33
g6942
sg64
g65
sS'trial_loop.thisIndex'
p7681
g60
(g99
S'[\x00\x00\x00'
tRp7682
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7683
I0
sg6380
g7009
sS'block_loop.thisRepN'
p7684
I2
sg6383
g6935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7685
I2
sg6385
g6942
sg55
g11
sS'block_loop.thisTrial'
p7686
Nsg70
Vy
sS'block_loop.thisTrialN'
p7687
I0
sg39
F1.7832835078788776
sg34
g753
(S'\x07\xdf\x07\x05\r/\x1c\r\xd3\x10'
tRp7688
sa(dp7689
S'trial_loop.thisTrialN'
p7690
I92
sg6371
g7425
sS'block_loop.thisIndex'
p7691
g6365
sg38
S'right'
p7692
sg59
g63
sS'trial_loop.thisN'
p7693
I92
sg33
g6653
sg64
g65
sS'trial_loop.thisIndex'
p7694
g60
(g99
S'\\\x00\x00\x00'
tRp7695
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7696
I0
sg6380
g7432
sS'block_loop.thisRepN'
p7697
I2
sg6383
g6646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7698
I2
sg6385
g6653
sg55
g11
sS'block_loop.thisTrial'
p7699
Nsg70
Vy
sS'block_loop.thisTrialN'
p7700
I0
sg39
F0.91696464055894467
sg34
g753
(S'\x07\xdf\x07\x05\r/#\x0b\x0c '
tRp7701
sa(dp7702
S'trial_loop.thisTrialN'
p7703
I93
sg6371
g6691
sS'block_loop.thisIndex'
p7704
g6365
sg38
S'right'
p7705
sg59
g63
sS'trial_loop.thisN'
p7706
I93
sg33
g6636
sg64
g65
sS'trial_loop.thisIndex'
p7707
g60
(g99
S']\x00\x00\x00'
tRp7708
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7709
I0
sg6380
g6698
sS'block_loop.thisRepN'
p7710
I2
sg6383
g6629
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7711
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p7712
Nsg70
Vy
sS'block_loop.thisTrialN'
p7713
I0
sg39
F0.68327404265892255
sg34
g753
(S'\x07\xdf\x07\x05\r/)\n-x'
tRp7714
sa(dp7715
S'trial_loop.thisTrialN'
p7716
I94
sg6371
g6475
sS'block_loop.thisIndex'
p7717
g6365
sg38
S'right'
p7718
sg59
g63
sS'trial_loop.thisN'
p7719
I94
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p7720
g60
(g99
S'^\x00\x00\x00'
tRp7721
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7722
I0
sg6380
g6483
sS'block_loop.thisRepN'
p7723
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7724
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p7725
Nsg70
Vy
sS'block_loop.thisTrialN'
p7726
I0
sg39
F0.74988724413287855
sg34
g753
(S'\x07\xdf\x07\x05\r//\x05\xfb@'
tRp7727
sa(dp7728
S'trial_loop.thisTrialN'
p7729
I95
sg6371
g7071
sS'block_loop.thisIndex'
p7730
g6365
sg38
S'left'
p7731
sg59
g63
sS'trial_loop.thisN'
p7732
I95
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p7733
g60
(g99
S'_\x00\x00\x00'
tRp7734
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7735
I0
sg6380
g7078
sS'block_loop.thisRepN'
p7736
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7737
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p7738
Nsg70
Vy
sS'block_loop.thisTrialN'
p7739
I0
sg39
F0.64983815042796778
sg34
g753
(S'\x07\xdf\x07\x05\r/5\x02\x80\xa0'
tRp7740
sa(dp7741
S'trial_loop.thisTrialN'
p7742
I96
sg6371
g7129
sS'block_loop.thisIndex'
p7743
g6365
sg38
S'right'
p7744
sg59
g63
sS'trial_loop.thisN'
p7745
I96
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7746
g60
(g99
S'`\x00\x00\x00'
tRp7747
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7748
I0
sg6380
g7136
sS'block_loop.thisRepN'
p7749
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7750
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7751
Nsg70
Vy
sS'block_loop.thisTrialN'
p7752
I0
sg39
F0.73335133245836914
sg34
g753
(S'\x07\xdf\x07\x05\r/:\r\x17\x90'
tRp7753
sa(dp7754
S'trial_loop.thisTrialN'
p7755
I97
sg6371
g6828
sS'block_loop.thisIndex'
p7756
g6365
sg38
S'left'
p7757
sg59
g63
sS'trial_loop.thisN'
p7758
I97
sg33
g6839
sg64
g65
sS'trial_loop.thisIndex'
p7759
g60
(g99
S'a\x00\x00\x00'
tRp7760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7761
I0
sg6380
g6836
sS'block_loop.thisRepN'
p7762
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7763
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p7764
Nsg70
Vy
sS'block_loop.thisTrialN'
p7765
I0
sg39
F0.68320362369740906
sg34
g753
(S'\x07\xdf\x07\x05\r0\x04\tbX'
tRp7766
sa(dp7767
S'trial_loop.thisTrialN'
p7768
I98
sg6371
g7410
sS'block_loop.thisIndex'
p7769
g6365
sg38
S'right'
p7770
sg59
g63
sS'trial_loop.thisN'
p7771
I98
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p7772
g60
(g99
S'b\x00\x00\x00'
tRp7773
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7774
I0
sg6380
g7417
sS'block_loop.thisRepN'
p7775
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7776
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p7777
Nsg70
Vy
sS'block_loop.thisTrialN'
p7778
I0
sg39
F0.60000689934804541
sg34
g753
(S'\x07\xdf\x07\x05\r0\n\x050 '
tRp7779
sa(dp7780
S'trial_loop.thisTrialN'
p7781
I99
sg6371
g6582
sS'block_loop.thisIndex'
p7782
g6365
sg38
S'left'
p7783
sg59
g63
sS'trial_loop.thisN'
p7784
I99
sg33
g6592
sg64
g65
sS'trial_loop.thisIndex'
p7785
g60
(g99
S'c\x00\x00\x00'
tRp7786
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7787
I0
sg6380
g6590
sS'block_loop.thisRepN'
p7788
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7789
I2
sg6385
g6586
sg55
g11
sS'block_loop.thisTrial'
p7790
Nsg70
Vy
sS'block_loop.thisTrialN'
p7791
I0
sg39
F0.83332573074676475
sg34
g753
(S'\x07\xdf\x07\x05\r0\x0f\x0e\xd4\xe0'
tRp7792
sa(dp7793
S'trial_loop.thisTrialN'
p7794
I100
sg6371
g6426
sS'block_loop.thisIndex'
p7795
g6365
sg38
S'left'
p7796
sg59
g63
sS'trial_loop.thisN'
p7797
I100
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7798
g60
(g99
S'd\x00\x00\x00'
tRp7799
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7800
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7801
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7802
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7803
Nsg70
Vy
sS'block_loop.thisTrialN'
p7804
I0
sg39
F1.5497916225958761
sg34
g753
(S'\x07\xdf\x07\x05\r0\x15\x0c\xc5\x88'
tRp7805
sa(dp7806
S'trial_loop.thisTrialN'
p7807
I101
sg6371
g6738
sS'block_loop.thisIndex'
p7808
g6365
sg38
S'left'
p7809
sg59
g63
sS'trial_loop.thisN'
p7810
I101
sg33
g6749
sg64
g65
sS'trial_loop.thisIndex'
p7811
g60
(g99
S'e\x00\x00\x00'
tRp7812
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7813
I0
sg6380
g6746
sS'block_loop.thisRepN'
p7814
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7815
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p7816
Nsg70
Vy
sS'block_loop.thisTrialN'
p7817
I0
sg39
F0.6833282110901564
sg34
g753
(S'\x07\xdf\x07\x05\r0\x1c\x06h\xa0'
tRp7818
sa(dp7819
S'trial_loop.thisTrialN'
p7820
I102
sg6371
g6755
sS'block_loop.thisIndex'
p7821
g6365
sg38
S'right'
p7822
sg59
g63
sS'trial_loop.thisN'
p7823
I102
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p7824
g60
(g99
S'f\x00\x00\x00'
tRp7825
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7826
I0
sg6380
g6762
sS'block_loop.thisRepN'
p7827
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7828
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p7829
Nsg70
Vy
sS'block_loop.thisTrialN'
p7830
I0
sg39
F0.75002409069747955
sg34
g753
(S'\x07\xdf\x07\x05\r0"\x01\xfb\xd0'
tRp7831
sa(dp7832
S'trial_loop.thisTrialN'
p7833
I103
sg6371
g6659
sS'block_loop.thisIndex'
p7834
g6365
sg38
S'right'
p7835
sg59
g63
sS'trial_loop.thisN'
p7836
I103
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7837
g60
(g99
S'g\x00\x00\x00'
tRp7838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7839
I0
sg6380
g6666
sS'block_loop.thisRepN'
p7840
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7841
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7842
Nsg70
Vy
sS'block_loop.thisTrialN'
p7843
I0
sg39
F0.6164296275092056
sg34
g753
(S"\x07\xdf\x07\x05\r0'\x0e\x01\xf0"
tRp7844
sa(dp7845
S'trial_loop.thisTrialN'
p7846
I104
sg6371
g6706
sS'block_loop.thisIndex'
p7847
g6365
sg38
S'left'
p7848
sg59
g63
sS'trial_loop.thisN'
p7849
I104
sg33
g6486
sg64
g65
sS'trial_loop.thisIndex'
p7850
g60
(g99
S'h\x00\x00\x00'
tRp7851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7852
I0
sg6380
g6713
sS'block_loop.thisRepN'
p7853
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7854
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p7855
Nsg70
Vy
sS'block_loop.thisTrialN'
p7856
I0
sg39
F1.1503481889776594
sg34
g753
(S'\x07\xdf\x07\x05\r0-\x08\x9f\x08'
tRp7857
sa(dp7858
S'trial_loop.thisTrialN'
p7859
I105
sg6371
g6625
sS'block_loop.thisIndex'
p7860
g6365
sg38
S'left'
p7861
sg59
g63
sS'trial_loop.thisN'
p7862
I105
sg33
g6629
sg64
g65
sS'trial_loop.thisIndex'
p7863
g60
(g99
S'i\x00\x00\x00'
tRp7864
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7865
I0
sg6380
g6633
sS'block_loop.thisRepN'
p7866
I2
sg6383
g6629
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7867
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p7868
Nsg70
Vy
sS'block_loop.thisTrialN'
p7869
I0
sg39
F0.61666084118496656
sg34
g753
(S'\x07\xdf\x07\x05\r03\x0b\x90\xf0'
tRp7870
sa(dp7871
S'trial_loop.thisTrialN'
p7872
I106
sg6371
g6659
sS'block_loop.thisIndex'
p7873
g6365
sg38
S'right'
p7874
sg59
g63
sS'trial_loop.thisN'
p7875
I106
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7876
g60
(g99
S'j\x00\x00\x00'
tRp7877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7878
I0
sg6380
g6666
sS'block_loop.thisRepN'
p7879
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7880
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7881
Nsg70
Vy
sS'block_loop.thisTrialN'
p7882
I0
sg39
F0.64975946365302661
sg34
g753
(S'\x07\xdf\x07\x05\r09\x06.\x08'
tRp7883
sa(dp7884
S'trial_loop.thisTrialN'
p7885
I107
sg6371
g6828
sS'block_loop.thisIndex'
p7886
g6365
sg38
S'left'
p7887
sg59
g63
sS'trial_loop.thisN'
p7888
I107
sg33
g6832
sg64
g65
sS'trial_loop.thisIndex'
p7889
g60
(g99
S'k\x00\x00\x00'
tRp7890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7891
I0
sg6380
g6836
sS'block_loop.thisRepN'
p7892
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7893
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p7894
Nsg70
Vy
sS'block_loop.thisTrialN'
p7895
I0
sg39
F0.616609523722218
sg34
g753
(S'\x07\xdf\x07\x05\r1\x03\x01H '
tRp7896
sa(dp7897
S'trial_loop.thisTrialN'
p7898
I108
sg6371
g6845
sS'block_loop.thisIndex'
p7899
g6365
sg38
S'right'
p7900
sg59
g63
sS'trial_loop.thisN'
p7901
I108
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p7902
g60
(g99
S'l\x00\x00\x00'
tRp7903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7904
I0
sg6380
g6853
sS'block_loop.thisRepN'
p7905
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7906
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p7907
Nsg70
Vy
sS'block_loop.thisTrialN'
p7908
I0
sg39
F0.89998739871225553
sg34
g753
(S"\x07\xdf\x07\x05\r1\x08\x0b'x"
tRp7909
sa(dp7910
S'trial_loop.thisTrialN'
p7911
I109
sg6371
g7468
sS'block_loop.thisIndex'
p7912
g6365
sg38
S'right'
p7913
sg59
g63
sS'trial_loop.thisN'
p7914
I109
sg33
g6832
sg64
g65
sS'trial_loop.thisIndex'
p7915
g60
(g99
S'm\x00\x00\x00'
tRp7916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7917
I0
sg6380
g7475
sS'block_loop.thisRepN'
p7918
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7919
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p7920
Nsg70
Vy
sS'block_loop.thisTrialN'
p7921
I0
sg39
F2.1169496444563265
sg34
g753
(S'\x07\xdf\x07\x05\r1\x0e\nH\xd0'
tRp7922
sa(dp7923
S'trial_loop.thisTrialN'
p7924
I110
sg6371
g7395
sS'block_loop.thisIndex'
p7925
g6365
sg38
S'left'
p7926
sg59
g63
sS'trial_loop.thisN'
p7927
I110
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p7928
g60
(g99
S'n\x00\x00\x00'
tRp7929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7930
I0
sg6380
g7402
sS'block_loop.thisRepN'
p7931
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7932
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p7933
Nsg70
Vy
sS'block_loop.thisTrialN'
p7934
I0
sg39
F0.64995675078353088
sg34
g753
(S'\x07\xdf\x07\x05\r1\x15\x0c\x7f8'
tRp7935
sa(dp7936
S'trial_loop.thisTrialN'
p7937
I111
sg6371
g7410
sS'block_loop.thisIndex'
p7938
g6365
sg38
S'right'
p7939
sg59
g63
sS'trial_loop.thisN'
p7940
I111
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p7941
g60
(g99
S'o\x00\x00\x00'
tRp7942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7943
I0
sg6380
g7417
sS'block_loop.thisRepN'
p7944
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7945
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p7946
Nsg70
Vy
sS'block_loop.thisTrialN'
p7947
I0
sg39
F0.63325206167974102
sg34
g753
(S'\x07\xdf\x07\x05\r1\x1b\x07\x99P'
tRp7948
sa(dp7949
S'trial_loop.thisTrialN'
p7950
I112
sg6371
g6691
sS'block_loop.thisIndex'
p7951
g6365
sg38
S'right'
p7952
sg59
g63
sS'trial_loop.thisN'
p7953
I112
sg33
g6629
sg64
g65
sS'trial_loop.thisIndex'
p7954
g60
(g99
S'p\x00\x00\x00'
tRp7955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7956
I0
sg6380
g6698
sS'block_loop.thisRepN'
p7957
I2
sg6383
g6629
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7958
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p7959
Nsg70
Vy
sS'block_loop.thisTrialN'
p7960
I0
sg39
F1.0166798856653259
sg34
g753
(S'\x07\xdf\x07\x05\r1!\x02\xaf\x80'
tRp7961
sa(dp7962
S'trial_loop.thisTrialN'
p7963
I113
sg6371
g6526
sS'block_loop.thisIndex'
p7964
g6365
sg38
S'right'
p7965
sg59
g63
sS'trial_loop.thisN'
p7966
I113
sg33
g6537
sg64
g65
sS'trial_loop.thisIndex'
p7967
g60
(g99
S'q\x00\x00\x00'
tRp7968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7969
I0
sg6380
g6534
sS'block_loop.thisRepN'
p7970
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7971
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7972
Nsg70
Vy
sS'block_loop.thisTrialN'
p7973
I0
sg39
F1.1333204849615868
sg34
g753
(S"\x07\xdf\x07\x05\r1'\x03@\x08"
tRp7974
sa(dp7975
S'trial_loop.thisTrialN'
p7976
I114
sg6371
g6642
sS'block_loop.thisIndex'
p7977
g6365
sg38
S'left'
p7978
sg59
g63
sS'trial_loop.thisN'
p7979
I114
sg33
g6646
sg64
g65
sS'trial_loop.thisIndex'
p7980
g60
(g99
S'r\x00\x00\x00'
tRp7981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7982
I0
sg6380
g6650
sS'block_loop.thisRepN'
p7983
I2
sg6383
g6646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7984
I2
sg6385
g6653
sg55
g11
sS'block_loop.thisTrial'
p7985
Nsg70
Vy
sS'block_loop.thisTrialN'
p7986
I0
sg39
F0.93335458256387938
sg34
g753
(S'\x07\xdf\x07\x05\r1-\x05\xf7X'
tRp7987
sa(dp7988
S'trial_loop.thisTrialN'
p7989
I115
sg6371
g6845
sS'block_loop.thisIndex'
p7990
g6365
sg38
S'right'
p7991
sg59
g63
sS'trial_loop.thisN'
p7992
I115
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p7993
g60
(g99
S's\x00\x00\x00'
tRp7994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7995
I0
sg6380
g6853
sS'block_loop.thisRepN'
p7996
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7997
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p7998
Nsg70
Vy
sS'block_loop.thisTrialN'
p7999
I0
sg39
F0.8504044671281008
sg34
g753
(S'\x07\xdf\x07\x05\r13\x05W0'
tRp8000
sa(dp8001
S'trial_loop.thisTrialN'
p8002
I116
sg6371
g6811
sS'block_loop.thisIndex'
p8003
g6365
sg38
S'right'
p8004
sg59
g63
sS'trial_loop.thisN'
p8005
I116
sg33
g6815
sg64
g65
sS'trial_loop.thisIndex'
p8006
g60
(g99
S't\x00\x00\x00'
tRp8007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8008
I0
sg6380
g6819
sS'block_loop.thisRepN'
p8009
I2
sg6383
g6815
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8010
I2
sg6385
g6822
sg55
g11
sS'block_loop.thisTrial'
p8011
Nsg70
Vy
sS'block_loop.thisTrialN'
p8012
I0
sg39
F0.63331677870064595
sg34
g753
(S'\x07\xdf\x07\x05\r19\x03\x86X'
tRp8013
sa(dp8014
S'trial_loop.thisTrialN'
p8015
I117
sg6371
g6443
sS'block_loop.thisIndex'
p8016
g6365
sg38
S'right'
p8017
sg59
g63
sS'trial_loop.thisN'
p8018
I117
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8019
g60
(g99
S'u\x00\x00\x00'
tRp8020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8021
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8022
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8023
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p8024
Nsg70
Vy
sS'block_loop.thisTrialN'
p8025
I0
sg39
F0.69968793281350372
sg34
g753
(S'\x07\xdf\x07\x05\r2\x02\r\xe2\xb0'
tRp8026
sa(dp8027
S'trial_loop.thisTrialN'
p8028
I118
sg6371
g6875
sS'block_loop.thisIndex'
p8029
g6365
sg38
S'left'
p8030
sg59
g63
sS'trial_loop.thisN'
p8031
I118
sg33
g6886
sg64
g65
sS'trial_loop.thisIndex'
p8032
g60
(g99
S'v\x00\x00\x00'
tRp8033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8034
I0
sg6380
g6883
sS'block_loop.thisRepN'
p8035
I2
sg6383
g6879
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8036
I2
sg6385
g6886
sg55
g11
sS'block_loop.thisTrial'
p8037
Nsg70
Vy
sS'block_loop.thisTrialN'
p8038
I0
sg39
F0.78332769791541068
sg34
g753
(S'\x07\xdf\x07\x05\r2\x08\t\xb0x'
tRp8039
sa(dp8040
S'trial_loop.thisTrialN'
p8041
I119
sg6371
g7468
sS'block_loop.thisIndex'
p8042
g6365
sg38
S'right'
p8043
sg59
g63
sS'trial_loop.thisN'
p8044
I119
sg33
g6832
sg64
g65
sS'trial_loop.thisIndex'
p8045
g60
(g99
S'w\x00\x00\x00'
tRp8046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8047
I0
sg6380
g7475
sS'block_loop.thisRepN'
p8048
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8049
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p8050
Nsg70
Vy
sS'block_loop.thisTrialN'
p8051
I0
sg39
F1.0499769356520119
sg34
g753
(S'\x07\xdf\x07\x05\r2\x0e\x06\xedp'
tRp8052
sa(dp8053
S'trial_loop.thisTrialN'
p8054
I120
sg6371
g6426
sS'block_loop.thisIndex'
p8055
g6365
sg38
S'left'
p8056
sg59
g63
sS'trial_loop.thisN'
p8057
I120
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8058
g60
(g99
S'x\x00\x00\x00'
tRp8059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8060
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8061
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8062
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8063
Nsg70
Vy
sS'block_loop.thisTrialN'
p8064
I0
sg39
F1.7497697841645277
sg34
g753
(S'\x07\xdf\x07\x05\r2\x14\x085\x90'
tRp8065
sa(dp8066
S'trial_loop.thisTrialN'
p8067
I121
sg6371
g7114
sS'block_loop.thisIndex'
p8068
g6365
sg38
S'right'
p8069
sg59
g63
sS'trial_loop.thisN'
p8070
I121
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p8071
g60
(g99
S'y\x00\x00\x00'
tRp8072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8073
I0
sg6380
g7121
sS'block_loop.thisRepN'
p8074
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8075
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8076
Nsg70
Vy
sS'block_loop.thisTrialN'
p8077
I0
sg39
F0.63327515453693195
sg34
g753
(S'\x07\xdf\x07\x05\r2\x1b\x04\xf1\xa0'
tRp8078
sa(dp8079
S'trial_loop.thisTrialN'
p8080
I122
sg6371
g6409
sS'block_loop.thisIndex'
p8081
g6365
sg38
S'right'
p8082
sg59
g63
sS'trial_loop.thisN'
p8083
I122
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p8084
g60
(g99
S'z\x00\x00\x00'
tRp8085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8086
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8087
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8088
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p8089
Nsg70
Vy
sS'block_loop.thisTrialN'
p8090
I0
sg39
F1.0833312901386307
sg34
g753
(S'\x07\xdf\x07\x05\r2 \x0f\x0fx'
tRp8091
sa(dp8092
S'trial_loop.thisTrialN'
p8093
I123
sg6371
g7071
sS'block_loop.thisIndex'
p8094
g6365
sg38
S'left'
p8095
sg59
g63
sS'trial_loop.thisN'
p8096
I123
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p8097
g60
(g99
S'{\x00\x00\x00'
tRp8098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8099
I0
sg6380
g7078
sS'block_loop.thisRepN'
p8100
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8101
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p8102
Nsg70
Vy
sS'block_loop.thisTrialN'
p8103
I0
sg39
F0.94982606231405953
sg34
g753
(S"\x07\xdf\x07\x05\r2'\x01\x8ep"
tRp8104
sa(dp8105
S'trial_loop.thisTrialN'
p8106
I124
sg6371
g7468
sS'block_loop.thisIndex'
p8107
g6365
sg38
S'right'
p8108
sg59
g63
sS'trial_loop.thisN'
p8109
I124
sg33
g6839
sg64
g65
sS'trial_loop.thisIndex'
p8110
g60
(g99
S'|\x00\x00\x00'
tRp8111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8112
I0
sg6380
g7475
sS'block_loop.thisRepN'
p8113
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8114
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vy
sS'block_loop.thisTrialN'
p8116
I0
sg39
F0.71667714873365185
sg34
g753
(S'\x07\xdf\x07\x05\r2-\x01g`'
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g7196
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'left'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g6725
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g7203
sS'block_loop.thisRepN'
p8126
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8127
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vy
sS'block_loop.thisTrialN'
p8129
I0
sg39
F1.466897386173514
sg34
g753
(S'\x07\xdf\x07\x05\r22\x0c\xb5\xe8'
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g7395
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'left'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g7402
sS'block_loop.thisRepN'
p8139
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8140
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vy
sS'block_loop.thisTrialN'
p8142
I0
sg39
F0.78331030699791881
sg34
g753
(S'\x07\xdf\x07\x05\r29\x05(P'
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g6875
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'left'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g6879
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g6883
sS'block_loop.thisRepN'
p8152
I2
sg6383
g6879
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8153
I2
sg6385
g6886
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vy
sS'block_loop.thisTrialN'
p8155
I0
sg39
F0.94995350067802065
sg34
g753
(S'\x07\xdf\x07\x05\r3\x03\x02eH'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g6582
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'left'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g6586
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g6590
sS'block_loop.thisRepN'
p8165
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8166
I2
sg6385
g6586
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vy
sS'block_loop.thisTrialN'
p8168
I0
sg39
F0.81660308052960318
sg34
g753
(S'\x07\xdf\x07\x05\r3\t\x02\x03\xa0'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g7196
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'left'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g6725
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g7203
sS'block_loop.thisRepN'
p8178
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8179
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vy
sS'block_loop.thisTrialN'
p8181
I0
sg39
F0.74998987905655667
sg34
g753
(S'\x07\xdf\x07\x05\r3\x0e\x0e\xfb\xf0'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g6372
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'left'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8191
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8192
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vy
sS'block_loop.thisTrialN'
p8194
I0
sg39
F2.0501750780740622
sg34
g753
(S'\x07\xdf\x07\x05\r3\x14\x0b\xbf\xd0'
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g7002
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'right'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g6935
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g7009
sS'block_loop.thisRepN'
p8204
I2
sg6383
g6935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8205
I2
sg6385
g6942
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vy
sS'block_loop.thisTrialN'
p8207
I0
sg39
F1.0999299231552868
sg34
g753
(S'\x07\xdf\x07\x05\r3\x1b\r\x00 '
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g7017
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'left'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g7024
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8218
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vy
sS'block_loop.thisTrialN'
p8220
I0
sg39
F0.58327113466839364
sg34
g753
(S'\x07\xdf\x07\x05\r3!\x0e\xff\xd8'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g6931
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'left'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6935
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g6939
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8231
I2
sg6385
g6942
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vy
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.68331965818015306
sg34
g753
(S"\x07\xdf\x07\x05\r3'\t#\xd8"
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g6460
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'right'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g6467
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8244
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vy
sS'block_loop.thisTrialN'
p8246
I0
sg39
F0.98321006688911439
sg34
g753
(S'\x07\xdf\x07\x05\r3-\x04\xf1\xa0'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g7086
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'right'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6879
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g7093
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6879
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6385
g6886
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vy
sS'block_loop.thisTrialN'
p8259
I0
sg39
F1.0998332752687929
sg34
g753
(S'\x07\xdf\x07\x05\r33\x05\t\x10'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g7002
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'right'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6935
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g7009
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6385
g6942
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vy
sS'block_loop.thisTrialN'
p8272
I0
sg39
F0.90032780454203021
sg34
g753
(S'\x07\xdf\x07\x05\r39\x07\x08\xc8'
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g6642
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'left'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6646
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g6650
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6385
g6653
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vy
sS'block_loop.thisTrialN'
p8285
I0
sg39
F1.2166033086077732
sg34
g753
(S'\x07\xdf\x07\x05\r4\x03\x06* '
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g7071
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'left'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g7078
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vy
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.7164992481984882
sg34
g753
(S'\x07\xdf\x07\x05\r4\t\t\xd3\xa0'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g6828
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'left'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6839
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g6836
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vy
sS'block_loop.thisTrialN'
p8311
I0
sg39
F0.61663888871498784
sg34
g753
(S'\x07\xdf\x07\x05\r4\x0f\x06\x1eh'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g6961
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'right'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g6968
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vy
sS'block_loop.thisTrialN'
p8324
I0
sg39
F0.63329026467818039
sg34
g753
(S'\x07\xdf\x07\x05\r4\x15\x00\xbb\x80'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6475
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'right'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6483
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vy
sS'block_loop.thisTrialN'
p8337
I0
sg39
F0.7166152826821417
sg34
g753
(S'\x07\xdf\x07\x05\r4\x1a\n\xd9X'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g7395
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'left'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g7402
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vy
sS'block_loop.thisTrialN'
p8350
I0
sg39
F1.6003225017375371
sg34
g753
(S'\x07\xdf\x07\x05\r4 \x07 8'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g6770
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'left'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g6777
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vy
sS'block_loop.thisTrialN'
p8363
I0
sg39
F0.9333517315935751
sg34
g753
(S"\x07\xdf\x07\x05\r4'\x01z\xe8"
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g6674
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'right'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g6682
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vy
sS'block_loop.thisTrialN'
p8376
I0
sg39
F1.2499334298481699
sg34
g753
(S'\x07\xdf\x07\x05\r4-\x01\x19@'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g7114
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'left'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g7121
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vy
sS'block_loop.thisTrialN'
p8389
I0
sg39
F0.78325870443950407
sg34
g753
(S'\x07\xdf\x07\x05\r43\x05zX'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g6659
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'right'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g6666
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vy
sS'block_loop.thisTrialN'
p8402
I0
sg39
F0.84966207451361697
sg34
g753
(S'\x07\xdf\x07\x05\r49\x02x\xd0'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g7250
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'right'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6592
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g7257
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6385
g6586
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vy
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.79999047775982035
sg34
g753
(S'\x07\xdf\x07\x05\r5\x03\x00\xa7\xf8'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g7395
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'left'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g7402
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vy
sS'block_loop.thisTrialN'
p8428
I0
sg39
F1.1503336490304719
sg34
g753
(S'\x07\xdf\x07\x05\r5\x08\re\xb0'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g7250
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'right'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6592
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g7257
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6385
g6586
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vy
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.63329682190942549
sg34
g753
(S'\x07\xdf\x07\x05\r5\x0f\x01\x15X'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6509
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'left'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6517
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vy
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.71664692845024547
sg34
g753
(S'\x07\xdf\x07\x05\r5\x14\x0b30'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g6738
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'left'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g6746
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vy
sS'block_loop.thisTrialN'
p8467
I0
sg39
F0.68333220244858239
sg34
g753
(S'\x07\xdf\x07\x05\r5\x1a\x07z\x10'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g6409
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'right'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vy
sS'block_loop.thisTrialN'
p8480
I0
sg39
F1.0165627107935507
sg34
g753
(S'\x07\xdf\x07\x05\r5 \x03\r@'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g7129
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'right'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g7136
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vy
sS'block_loop.thisTrialN'
p8493
I0
sg39
F1.1666488956198009
sg34
g753
(S'\x07\xdf\x07\x05\r5&\x03\xdcH'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g7425
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'right'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6646
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g7432
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6385
g6653
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vy
sS'block_loop.thisTrialN'
p8506
I0
sg39
F0.93334374887763261
sg34
g753
(S'\x07\xdf\x07\x05\r5,\x06\xce0'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g7440
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'left'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6815
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g7447
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6815
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6385
g6822
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vy
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.66675609209596587
sg34
g753
(S'\x07\xdf\x07\x05\r52\x06l\x88'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g6392
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'left'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vy
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.74983279060415953
sg34
g753
(S'\x07\xdf\x07\x05\r58\x01\xc18'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g7410
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'right'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g7417
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vy
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.6003301993569039
sg34
g753
(S'\x07\xdf\x07\x05\r6\x01\r\xc3p'
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g6721
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'right'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6732
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g6729
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vy
sS'block_loop.thisTrialN'
p8558
I0
sg39
F1.3832168521985295
sg34
g753
(S'\x07\xdf\x07\x05\r6\x07\x08%\xf0'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g7250
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'right'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6586
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g7257
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6385
g6586
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vy
sS'block_loop.thisTrialN'
p8571
I0
sg39
F1.3498502385409665
sg34
g753
(S'\x07\xdf\x07\x05\r6\r\x0ekh'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g7129
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'right'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g7136
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vy
sS'block_loop.thisTrialN'
p8584
I0
sg39
F0.88331549576378166
sg34
g753
(S'\x07\xdf\x07\x05\r6\x14\x054\x08'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g6961
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'right'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6749
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g6968
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vy
sS'block_loop.thisTrialN'
p8597
I0
sg39
F1.1499439214185259
sg34
g753
(S'\x07\xdf\x07\x05\r6\x1a\x03\xe00'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g6691
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'right'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6636
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g6698
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6629
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vy
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.79972362695843913
sg34
g753
(S'\x07\xdf\x07\x05\r6 \x06\x93\x98'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g7002
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'right'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6935
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g7009
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6385
g6942
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vy
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.80006203710945556
sg34
g753
(S'\x07\xdf\x07\x05\r6&\x04\x0f\x10'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g7425
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'right'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6646
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g7432
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6385
g6653
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vy
sS'block_loop.thisTrialN'
p8636
I0
sg39
F0.99988567609943857
sg34
g753
(S'\x07\xdf\x07\x05\r6,\x01\x86\xa0'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g7114
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'left'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g7121
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vy
sS'block_loop.thisTrialN'
p8649
I0
sg39
F1.3002855531658497
sg34
g753
(S'\x07\xdf\x07\x05\r62\x02\x17('
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6738
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'left'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g6746
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vy
sS'block_loop.thisTrialN'
p8662
I0
sg39
F0.74999643628689228
sg34
g753
(S'\x07\xdf\x07\x05\r68\x07/\xd8'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g6426
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'left'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vy
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.63291536211090715
sg34
g753
(S'\x07\xdf\x07\x05\r7\x02\x03\xb58'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g6755
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'right'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g6762
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vy
sS'block_loop.thisTrialN'
p8688
I0
sg39
F0.76661502609476884
sg34
g753
(S'\x07\xdf\x07\x05\r7\x07\x0e\x11\x90'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g7250
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'right'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6592
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g7257
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6385
g6586
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vy
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.84997026438122703
sg34
g753
(S'\x07\xdf\x07\x05\r7\r\n\xd1\x88'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g6674
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'right'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g6682
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vy
sS'block_loop.thisTrialN'
p8714
I0
sg39
F1.0331650500720571
sg34
g753
(S'\x07\xdf\x07\x05\r7\x13\t?0'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6691
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'right'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6629
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6698
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6629
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vy
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.55036837384704995
sg34
g753
(S'\x07\xdf\x07\x05\r7\x19\n\x0e8'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g7114
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'left'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g7121
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vy
sS'block_loop.thisTrialN'
p8740
I0
sg39
F0.74994055727347586
sg34
g753
(S'\x07\xdf\x07\x05\r7\x1f\x03\xb9 '
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g6706
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'left'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g6713
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vy
sS'block_loop.thisTrialN'
p8753
I0
sg39
F0.76670625713813934
sg34
g753
(S'\x07\xdf\x07\x05\r7%\x00y\x18'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g6755
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'right'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g6762
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vy
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.66669508133509225
sg34
g753
(S'\x07\xdf\x07\x05\r7*\x0c\xb9\xd0'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g6845
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'right'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g6853
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vy
sS'block_loop.thisTrialN'
p8779
I0
sg39
F0.74993941688535415
sg34
g753
(S'\x07\xdf\x07\x05\r70\x08\x0e\x80'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6492
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'left'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6500
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vy
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.58333898775799753
sg34
g753
(S'\x07\xdf\x07\x05\r76\x04\xd2`'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g7440
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'left'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6822
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g7447
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6815
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6385
g6822
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vy
sS'block_loop.thisTrialN'
p8805
I0
sg39
F0.58358331589533918
sg34
g753
(S'\x07\xdf\x07\x05\r7;\x0e8\xa0'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6625
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'left'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6629
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6633
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6629
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vy
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.90002075506254187
sg34
g753
(S'\x07\xdf\x07\x05\r8\x05\x08\\\xa0'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g7129
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'right'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g7136
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vy
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.81666893793953932
sg34
g753
(S'\x07\xdf\x07\x05\r8\x0b\x07C`'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g7410
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'right'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g7417
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vy
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.66653172074893519
sg34
g753
(S'\x07\xdf\x07\x05\r8\x11\x04\xf9p'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6475
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'right'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6483
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vy
sS'block_loop.thisTrialN'
p8857
I0
sg39
F0.78331515364789084
sg34
g753
(S'\x07\xdf\x07\x05\r8\x17\x00\x8c\xa0'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g6642
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'right'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6646
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g6650
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6385
g6653
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vy
sS'block_loop.thisTrialN'
p8870
I0
sg39
F0.68324752863645699
sg34
g753
(S'\x07\xdf\x07\x05\r8\x1c\r\x07\xf0'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g7017
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'left'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g7024
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vy
sS'block_loop.thisTrialN'
p8883
I0
sg39
F0.81701247983619396
sg34
g753
(S'\x07\xdf\x07\x05\r8"\x08\x9b '
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g6625
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'left'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6629
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g6633
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6629
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vy
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.81656972417931684
sg34
g753
(S'\x07\xdf\x07\x05\r8(\x06Q0'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6706
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'left'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6713
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vy
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.79989668084363075
sg34
g753
(S'\x07\xdf\x07\x05\r8.\x04\x07@'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g6526
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'right'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6537
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g6534
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vy
sS'block_loop.thisTrialN'
p8922
I0
sg39
F0.74993599572098901
sg34
g753
(S'\x07\xdf\x07\x05\r84\x01~\xd0'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g6372
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'left'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vy
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.69996248123334226
sg34
g753
(S'\x07\xdf\x07\x05\r89\r\x84\xf0'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g6582
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'left'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6592
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g6590
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6385
g6586
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vy
sS'block_loop.thisTrialN'
p8948
I0
sg39
F0.99994469117973495
sg34
g753
(S'\x07\xdf\x07\x05\r9\x03\tR\xb8'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g6721
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'left'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6725
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g6729
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vy
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.63369139617134351
sg34
g753
(S'\x07\xdf\x07\x05\r9\t\t\xe7('
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g6475
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'right'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g6483
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vy
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.90000421943568654
sg34
g753
(S'\x07\xdf\x07\x05\r9\x0f\x04\xbe\xd8'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g6582
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'left'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6592
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g6590
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6385
g6586
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vy
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.81661733538021508
sg34
g753
(S'\x07\xdf\x07\x05\r9\x15\x03\xe4\x18'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6770
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'left'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6777
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vy
sS'block_loop.thisTrialN'
p9000
I0
sg39
F1.0665721475043028
sg34
g753
(S'\x07\xdf\x07\x05\r9\x1b\x01\x9a('
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g7086
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'right'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6879
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g7093
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6879
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6385
g6886
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vy
sS'block_loop.thisTrialN'
p9013
I0
sg39
F0.79998392052857525
sg34
g753
(S'\x07\xdf\x07\x05\r9!\x03 \xc8'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g6811
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'right'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6822
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g6819
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6815
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6385
g6822
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vy
sS'block_loop.thisTrialN'
p9026
I0
sg39
F0.63322155629884946
sg34
g753
(S"\x07\xdf\x07\x05\r9'\x00\x98X"
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g6961
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'right'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g6968
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vy
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.76704067593072978
sg34
g753
(S'\x07\xdf\x07\x05\r9,\n\xb60'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g7086
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'right'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6879
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g7093
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6879
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6385
g6886
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vy
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.7332880409212521
sg34
g753
(S'\x07\xdf\x07\x05\r92\x07\xb4\xa8'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g6931
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'left'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6942
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g6939
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6385
g6942
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vy
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.73333964348057634
sg34
g753
(S'\x07\xdf\x07\x05\r98\x03\xfb\x88'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g6492
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'left'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g6500
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vy
sS'block_loop.thisTrialN'
p9078
I0
sg39
F1.3832550551969689
sg34
g753
(S'\x07\xdf\x07\x05\r:\x02\x00\x80\xe8'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6770
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'left'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6777
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vy
sS'block_loop.thisTrialN'
p9091
I0
sg39
F1.0832246638565266
sg34
g753
(S'\x07\xdf\x07\x05\r:\x08\x06\xcaH'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vy
sa(dp9099
g64
g65
sg43
I114
sg56
g57
sg58
Vn
sg42
I486
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp9100
g64
g65
sg43
I114
sg55
g11
sg56
g57
sg45
F1.8600000000000001
sg42
I486
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I00
sg48
I25
sg47
g534
sg51
F29.859999999999999
sg46
F1.6999999999999997
sg66
g67
sg68
g69
sg50
I0
sg70
Vy
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I83497296
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\\\x8fB?\xecQ\xb8>\x8f\xc2u>\x9a\x99\x99>\x9a\x99\x99>\xcd\xccL?\xecQ\x18@\\\x8f\xc2>\xe1z\x94?R\xb8\x9e?\x00\x00\xc0?\x14\xae\xc7?{\x14\x0e@\xc3\xf5(?)\\\x8f>q=\xca?\x8f\xc2u?\xcd\xcc\x8c?\x8f\xc2u?\xcd\xccL?\x1f\x85\xeb>\x9a\x99\x99>\xaeGa>\xcd\xcc\x0c@\x14\xae\x87?33\xf3?\xaeG\x01@\x9a\x99\xd9?\xcd\xcc\x8c?\x8f\xc2u>\n\xd7\xe3?\x00\x00\xc0?\xcd\xcc\xcc=\x85\xebQ?\\\x8f\x82?\xaeG\x01@\x00\x00\x80?333?\n\xd7#?\xaeGa?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'\xdb\xf9\x1e@\xdb\xf9\x1e@\x87\x16\x11@P\x8dg@\xfc\xa9\x19@\x87\x16\xa9@\x10X\xf5@b\x10 @\x87\x16a@\x96C#@B`e@b\x100@T\xe3\x9d@\xc9v6@\xaa\xf1\xae@T\xe3\xbd@B`%@\x0e-B@/\xdd,@\x0e-\x82@B`e@!\xb0\x92@T\xe3\x95@d;\x83@\xaa\xf1\xa6@b\x10`@\xaa\xf1\xa6@\x98n\x8e@\x96Cs@/\xddl@\x98n\xae@1\x08\xd8@\xdb\xf9>@\xee|\x87@\x98n\xae@\xaa\xf1\xde@\x0e-\xc2?\xdd$rAB`\x15@\x0e-b@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x000A\x00\x00\x18B\x00\x00\x14B\x00\x00\xa0A\x00\x00\x04B\x00\x00\x00A\x00\x00\xf8A\x00\x00\x0cB\x00\x00\xf0A\x00\x00\xc0A\x00\x00\x88A\x00\x00\xe0A\x00\x00\xa8A\x00\x00\x98A\x00\x00\x80?\x00\x00\x10B\x00\x00\x00B\x00\x00@A\x00\x00\xd0A\x00\x00\x80@\x00\x00\xd8A\x00\x00\xc8A\x00\x00@@\x00\x00\xb0A\x00\x00pA\x00\x00\x90A\x00\x00\x1cB\x00\x00 A\x00\x00\x00@\x00\x00\xa0@\x00\x00\x80A\x00\x00\xc0@\x00\x00\x10A\x00\x00PA\x00\x00`A\x00\x00\xe0@\x00\x00\x08B\x00\x00\x00\x00\x00\x00\xe8A\x00\x00\xb8A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'33\xf3?33\xf3?33\xb3?\x9a\x99\xd9?33\xb3?\xcd\xcc\xcc?ff\xa6?33\xf3?\x00\x00\xc0?\xcd\xcc\x8c?ff\xe6?\x9a\x99\xd9?33\xf3?ff\xa6?\xcd\xcc\xcc?\xcd\xcc\x8c?\x9a\x99\x99?\xcd\xcc\x8c?\x00\x00\xc0?ff\xe6?ff\xa6?ff\xa6?\x9a\x99\x99?\x9a\x99\x99?\x00\x00\xc0?ff\xe6?\xcd\xcc\x8c?33\xf3?ff\xa6?\xcd\xcc\x8c?\x00\x00\xc0?\x9a\x99\xd9?ff\xe6?\xcd\xcc\xcc?33\xb3?\x9a\x99\xd9?\x00\x00\x80?33\xb3?ff\xe6?\x9a\x99\x99?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'%\x00\x00\x00\x0e\x00\x00\x00\x1c\x00\x00\x00\x16\x00\x00\x00\x13\x00\x00\x00\x1d\x00\x00\x00\x1f\x00\x00\x00#\x00\x00\x00\x05\x00\x00\x00 \x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00!\x00\x00\x00"\x00\x00\x00\x18\x00\x00\x00\x1e\x00\x00\x00\n\x00\x00\x00\x19\x00\x00\x00\r\x00\x00\x00\x03\x00\x00\x00\x0c\x00\x00\x00\x17\x00\x00\x00\'\x00\x00\x00\t\x00\x00\x00\x15\x00\x00\x00\x12\x00\x00\x00\x14\x00\x00\x00\x0b\x00\x00\x00&\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00\x10\x00\x00\x00\x04\x00\x00\x00$\x00\x00\x00\x07\x00\x00\x00\x0f\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x1a\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g180
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g369
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g362
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g243
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g334
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g159
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g320
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g348
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g313
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g271
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g222
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g299
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g250
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g236
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g110
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g355
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g327
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g187
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g285
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g131
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g292
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g278
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g124
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g257
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g208
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g229
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g376
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g173
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g117
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g138
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g215
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g145
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g166
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g194
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g201
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g152
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g341
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g103
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g306
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g264
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I83497296
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'ff\x96@\x00\x00\x00@\x00\x00\xc0@\x00\x00\xc0@33\xa3@\x00\x00\xc0@\x9a\x99\x19@ff\x86@\x9a\x99\x19@33\x93@\x00\x00\x90@ff\xa6@fff@\xcd\xcc\x9c@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@fff@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\x00@\x00\x00 @\x00\x00\xc0@\xcd\xccL@\x00\x00\xc0@\x00\x00\xc0@\xcd\xcc\x9c@333@\x00\x00\xc0@\x00\x00\xc0@\xcd\xccl@ffF@\x00\x00\xc0@\x00\x00\xa0@\x00\x00\xa0@33\xa3@ff\x86@\x00\x00\xc0@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'!\x00 @\x0f\x9a\xf9?6\xf0\xce?O\xbe\x1b@\xbe\xad\xaa?O$\xa2?]\xaa\xaa@\xd5Z\xd5?2\xe0M@)\x8f\x88?q \x02@\xa9J\xa4?=\x9a\x81@\xff\xcf\x8c?\xe2U\xc4?d4\x93?\xb9}\xb7?\xbb"\x12@\x95\x16\xf1?IJ\xa4?M\x0f\x91?\xcdy\'@i\xbak@\x14\x11\x99@\x0e\xf4\xae?\xa1V\xd5?4\xb7{?\xe533@Ki\xe6?k\x80\xd7?\x19\xeb]?\xa5F\x84?lR\xf5?"\xcf\x0c@G@s?w\x12\x01@\xaf\xc7{?\xab#\x82?t+\xb3?\x83\x84w?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80@333@\x00\x00\x80@33S@\x00\x00@@33\x83@\x9a\x99\x89@\xcd\xccL@\x9a\x99Y@\xcd\xccl@\x9a\x99y@\x00\x00@@\xcd\xcc,@\x00\x00@@\x9a\x99Y@\x9a\x999@\x00\x00`@ff\x86@\x9a\x99\x89@\x00\x00\x80@ffF@fff@\x00\x00@@\x00\x00`@\x9a\x999@\xcd\xccL@33\x83@33S@ffF@fff@\x00\x00@@\x9a\x999@ffF@ffF@33S@\xcd\xccl@33\x83@\x00\x00@@ff\x86@33s@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\x80\x1bk\r\xa0\xe9\xf7\x0c\x80\xe0\xf7\x0c`\xbd\xf9\x0c\xe0\xbb\xf9\x0c\x00\xbc\xf9\x0c\x80\xb3\xf9\x0c\x00\xbd\xf9\x0c\x80\xb6\xf9\x0c\x00H\xb9\x04\xa0\xea\xf7\x0c\x00\xeb\xf7\x0c\xe0\xe5\xf7\x0c`\xea\xf7\x0c\xa0\xb6\xf9\x0c`\xb8\xf9\x0c\xe0\xb7\xf9\x0c\x80\xb7\xf9\x0c\xc0\xe5\xf6\x0c`\xb6\xf9\x0c`\xeb\xf7\x0c\xe0\xb5\xf9\x0c@\x15k\r\x00\x19k\r\xc0\x1ak\r\xe0\x14k\r`K\xb9\x04\xe0\x1ak\r\x00\x16k\r\xe0\x17k\r \x16k\r@\x18k\r\xa0\x1bk\r\xc0\x19k\r \x15k\r@\x10k\r \x10k\r`\x17k\r`\x16k\r\xe0\x18k\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'w\xbe\xcb@\x96CC@/\xdd<@\x0e-\xa2?\xc5 \xe0?u\x93\x88?\x0e-2@B`\x15@\xee|\x07@\x91\xed\xcc?+\x87\xa6?\x83\xc0\xca?u\x93\xc8?\xb6\xf3\x9d?P\x8d\x97?+\x87\xa6?\x83\xc0\x8a?u\x93\x18@\xe9&\xf1?^\xba\xf9?B`\x95?\xc9v\x06@\xbaI\x04@\x83\xc0\xaa?\x0e-\xa2?B`\xd5?\x0e-\x02@\xe9&\xb1?\x83\xc0j?u\x93\x08@\xf8S\x93?B`\x05@\xee|g@\x1dZ\xe4?\xdb\xf9\x8e?\x87\x16\x01@\x0e-\x82?\xbaI$@\x89A@?\xe9&\x91?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I83497296
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'\xe0f\x85\rh\xbd\x94\r\x90\xbd\x94\r\x80f\x85\r\xb8\xbd\x94\r\xe0\xbd\x94\r\xe0f\x85\rhZ\x94\r\x80f\x85\r\xb0f\x85\r\xe0\xbd\x94\r0\xbe\x94\rh\xbd\x94\r\xb8\xbd\x94\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S' \x10\xe6\x04\xe0\x19\xe6\x04\xe0\x1c\xe6\x04\xd8\x15\xe6\x04h\x16\xe6\x048\x10\xe6\x04h\x19\xe6\x040\xcb\x03\x05\x18\xc5\x03\x05P\xc0\x03\x05 \xc6\x03\x05\xe0\xc3\x03\x05\x10\xc4\x03\x05`\xc5\x03\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g778
sg83
g779
sg84
g783
sg85
g784
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g789
sg83
g790
sg84
g794
sg85
g795
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g800
sg83
g801
sg84
g805
sg85
g806
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g744
sg83
g811
sg84
g749
sg85
g815
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g820
sg83
g821
sg84
g825
sg85
g826
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g778
sg83
g831
sg84
g783
sg85
g835
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g820
sg83
g840
sg84
g825
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g800
sg83
g849
sg84
g805
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g767
sg83
g858
sg84
g772
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g756
sg83
g867
sg84
g761
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g789
sg83
g876
sg84
g794
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I83497296
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I83497296
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'P\xd6\x96\r\xc8\xcc\x96\rp\xd7\x96\rpo\x96\r\x80\xd6\x96\r\xa8o\x96\r\xf0\xcc\x96\r\xb0\xd6\x96\r\x18\xcd\x96\r@\xcd\x96\r\x00\xd8\x96\r \xf0\x96\r\xf0\xcc\x96\r\x80\xf0i\r\xa0\xd7\x96\r\x00\xf3i\rX\xf0\x96\r \xcf\x96\r\x00\xf3i\r\x00\xd8\x96\r8o\x96\r\x18\xcd\x96\r\x90\xcd\x96\rX\xf0\x96\r\xb0\xd6\x96\rP\xd6\x96\r\xc8\xcc\x96\r\x80\xf0i\r\x10\xd7\x96\r\x18\xcd\x96\r \xf0\x96\r\x80\xf0i\r\xc8\xcc\x96\r\xe0\xd6\x96\r\x80\xd6\x96\r`\xd8\x96\r\xb0\xd6\x96\rpo\x96\r\x18\xcd\x96\r\xc8\xcc\x96\r\x80\xf0i\r\xf0\xcc\x96\r\xe0\xcd\x96\r\xe0\xd6\x96\r\xf0\xcc\x96\r \xf0\x96\r\x90\xcd\x96\r@\xcd\x96\rh\xcd\x96\r\x00\xf3i\r\xa8\xce\x96\r\x18\xcd\x96\r \xf0\x96\rp\xd7\x96\r\xd0\xd7\x96\r\x80\xf0i\r\xe0\xd6\x96\r\x10\xd7\x96\r\xb8\xcd\x96\rpo\x96\r \x17k\rh\xcd\x96\r\xe0\xcd\x96\rP\xd6\x96\r\x90\xcd\x96\r\xd0\xd7\x96\r\xd0\xce\x96\rX\xf0\x96\rX\xce\x96\r\x90\xcd\x96\r\x80\xf0i\rX\xf0\x96\r\x80\xd6\x96\r\xb0\xd6\x96\r\x00\xf3i\r\x10\xd7\x96\r\x90\xf0\x96\rX\xf0\x96\rpo\x96\r\x80\xf0i\r0\xce\x96\r@\xd7\x96\r\x80\xce\x96\r \xf0\x96\r\x80\xd6\x96\rpo\x96\r\xe0\xcd\x96\r\xc8\xcc\x96\r\xc8\xf0\x96\r\x80\xce\x96\r\x18\xcd\x96\r\x80\xce\x96\r\xf0\xcc\x96\r\xd0\xd7\x96\r\x00\xf3i\r@\xcd\x96\r\x10\xd7\x96\r\x00\xf3i\r8o\x96\rh\xcd\x96\r\xc8\xcc\x96\r\xe0\xcd\x96\r\xb0\xd6\x96\r\xf0\xcc\x96\r\x90\xcd\x96\r\x10\xd7\x96\r \xf0\x96\rh\xcd\x96\r\xf0\xcc\x96\r\x90\xcd\x96\rX\xf0\x96\r\xe0\xd6\x96\r\xb8\xcd\x96\r\xa8o\x96\rh\xcd\x96\r@\xcd\x96\r\x10\xd7\x96\rX\xf0\x96\r\x10\xd7\x96\r\xb8\xcd\x96\r\xe0\xd6\x96\r \xcf\x96\r\xb8\xcd\x96\r\xe0\xcd\x96\r \x17k\r\x80\xd6\x96\r\x18\xcd\x96\r\x80\x17k\rp\xd7\x96\rP\xd6\x96\r\x10\xd7\x96\r\xa0\xd7\x96\r\xe0\xcd\x96\rpo\x96\rh\xcd\x96\r\xe0\xcd\x96\rpo\x96\r\x00\xf3i\r\xb0\xd6\x96\rh\xcd\x96\r8o\x96\r\x10\xd7\x96\r\x90\xcd\x96\rX\xf0\x96\r8o\x96\r\x80\xce\x96\r\xc8\xcc\x96\r\xa8o\x96\r\xe0\xcd\x96\r\xe0\xd6\x96\r@\xcd\x96\rP\xd6\x96\r\x80\xd6\x96\r\x18\xcd\x96\rP\xd6\x96\rh\xcd\x96\r\x80\x16k\r\xb0\xd6\x96\r\xb8\xcd\x96\r\xa8o\x96\r8o\x96\r\xf8\xce\x96\r\xb8\xcd\x96\r\xe0\xd6\x96\r\xb8\xcd\x96\r\x18\xcd\x96\r \xf0\x96\r\x90\xcd\x96\r\x80\xd6\x96\r \xf0\x96\r`\xd8\x96\r\xc8\xcc\x96\rP\xd6\x96\r\xf0\xcc\x96\r\xe0\xcd\x96\r8o\x96\rX\xf0\x96\r@\xf4i\r\x80\x17k\r@\xcd\x96\rp\xd7\x96\r\xe0\xd6\x96\rpo\x96\r\xf0\xcc\x96\r\x00\xf3i\r@\xd7\x96\rpo\x96\rP\xd6\x96\r@\xcd\x96\r\x10\xd7\x96\r\x80\xd6\x96\r\xa8o\x96\r\x80\xd6\x96\r\x00\xf3i\r\xb0\xd6\x96\r\xb8\xcd\x96\r@\xf4i\r\xc8\xcc\x96\r\x80\x17k\r\xa8o\x96\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'\x00\xf8\x85\r \xfb\x85\r\x00\xfb\x85\r \xf8\x85\r`\xfb\x85\r@\xdbh\r\xa00\xfa\x0c\xa0\xf8\x85\r \xfa\x85\r`\xfa\x85\r@\xfb\x85\r\xc0\xf9\x85\r\xa0\xfa\x85\r\xe0\xfa\x85\r \xf9\x85\r\x00\xfa\x85\r`\xf8\x85\r\x80\xfb\x85\r\xc0\xfb\x85\r\xe0\xfb\x85\r \xfc\x85\r\x00\xfc\x85\r\xe0\xf8\x85\r\x80\xfc\x85\r`\xfc\x85\r\xc0\xfa\x85\r\xa0\xfc\x85\r\xc0\xfc\x85\r\xe0\xfc\x85\r\x80\xd1h\r@\xfd\x85\r@0\xfa\x0c@\xdch\r\xc0Oj\r\x00Oj\r\xe0Nj\r`Mj\r\xa0Oj\r`\xd0h\r\xc0\xaak\r\xc0\xabk\r@\xack\r\x00\xaek\r\x00\xabk\r\xc0\xack\r@\xaek\r\x00\xack\r\x00\xadk\r`\xa7k\r \xa7k\r\x80\xadk\r\x00\xa6k\r\xe0\xa6k\r@\xafk\r@\xa6k\r`\xa5k\r\xc0\xa5k\r\x80\xaek\r\xc0\xa9k\r\x00\xa8k\r\xc0\xaek\r\x00\xafk\r@\xa8k\r\x00\xa9k\r@\xa9k\r\x80\xa8k\r@\xadk\r@\xabk\r\xc0\xa8k\r \xa0k\r\xa0\xa0k\r\xe0\xa0k\r\xa0\xa6k\r\xc0\xadk\r\x80\xa9k\r`\xa0k\r@\xaak\r\x80\xa6k\r\x00\xaak\r\x00\xa1k\r\x80\xabk\r \xa1k\r\xc0\xa0k\r\x80\xa0k\r\x80\xack\r@\xa0k\r\xa0\x01l\r\x80\xaak\r \x12k\r\xa0\x12k\r@\x1ek\r \x1ek\r\xc0\x1ek\r\x00\x1fk\r \x1fk\r`\x15k\r@\x1fk\r`\x1fk\r\x80\x1fk\r\xa0\x1fk\r`\x10k\r\xe0\x1fk\r \x11k\r\x00\x11k\r`\x11k\r`\x1ek\r\xa0\x11k\r\xc0\x11k\r`\x12k\r \x13k\r\x00\x12k\r\x80\x12k\r\x00\x13k\r`\x13k\r\xe0\x1ek\r@\x11k\r\xc0\xb6\xf9\x0c\xa0\x1ek\r@\x13k\r\xc0\x1fk\r\xa0C\xb9\x04\xc0\xa7k\r\x80\x13k\r@\x12k\r\xa0\x13k\r \x14k\r\x80\x1ck\r@\x1bk\r\xe0\x13k\r\xe0\x11k\r\x00\x14k\r\xc0\x13k\r\x00L\xb9\x04\x80\x11k\r@B\xb8\x04\x80\x1ek\r@\xfc\x85\r@\xfa\x85\r`\xfd\x85\r\xc0\xfd\x85\r\xe0\xf9\x85\r\xe0\xf7\x85\r\x00\xfd\x85\r@\xf8\x85\r\x80\xfe\x85\r\xa0\xfe\x85\r\x00K\xb9\x04\xa0\xfb\x85\r\x00\xfe\x85\r\xc0\xfe\x85\r \xfe\x85\r`\xfe\x85\r \xff\x85\r\xe0\xfe\x85\r\x80\xff\x85\r\xc0\xff\x85\r\x80\xfd\x85\r\x80\xfa\x85\r\xa0\xff\x85\r@\xfe\x85\r \xfd\x85\r\xe0\xfd\x85\r`\xff\x85\r\xa0\xf9\x85\r\xe0\x12k\r\xa0\xfd\x85\r\xe0\xff\x85\r\x00\xff\x85\r  \xbe\x1e@"\xbe\x1e\x80 \xbe\x1e\x80!\xbe\x1e !\xbe\x1e@ \xbe\x1e\xe0!\xbe\x1e@!\xbe\x1e\xc0"\xbe\x1e\x80"\xbe\x1e\xa0"\xbe\x1e "\xbe\x1e\x00#\xbe\x1e\xe0"\xbe\x1e\xc0 \xbe\x1e`#\xbe\x1e@#\xbe\x1e\xa0!\xbe\x1e\xc0#\xbe\x1e\xa0#\xbe\x1e\x00$\xbe\x1e\xe0#\xbe\x1e@$\xbe\x1e`$\xbe\x1e\x00"\xbe\x1e\xa0$\xbe\x1e\x80$\xbe\x1e\x80#\xbe\x1e`Ej\r\x80\xf5\x85\r`\xf9\x85\r\xa0\xf0\x85\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'#\xba\x8b@E\xbb\x0b@\x08v\xb7?z\xc6\x8c?W\xb5\xaa?\xa4\xa9\n@Z\x9a\x99?\xdde\xa6? \x85\xa8?\x1d\xb3\xbb?\xcc\x85\xa8?\xf8\xb9;@\xf8\xa7\xaa?6\xa9\xea?e-\x82?A\xfc\xff?u\n\xb1?Q\xa7\xaa?\x1b\xb9\x9b?\xc1A\xe4?\n\xef>@\xb2\xcb\x8c@\x8f\xa9\xaa?u7\x13@\\\xd9\xbd?M\xc8\xcc?\xac\xbb\x1b@\xf1\x84\x88?\xbfs\xa6?\x05Wf?\xd4\xec\x8e?$\xfd\x7f?\xfa\xdb\xbd?\xe1\xd3\xec?\xb1d\x86?P\x87\x88?\x07n7?\x12\x97Y?\x08\xfc??\x11ED??DD?\xeb!\xa2?\xc4c6@R\xd8]?\x9e`\x95?\x17D\xa4?\xa6cf?\x89\xc1\x8c?\xd3\xeb\xae?A3\xb3?oB\x84?8w\xb7?\xd9\xcaL?\xd9 \x02@\xfb\xf6\x9f?\xd4bf?\xa61s?\xd5\x98\xb9?_\xec\x8e?\xe6u\xd7?\xc7\x95\xb9?\x7f\xeen?C\xdc\x9d?r\x98\x99?,\xb7Y?\x91\x81Y?\xce%b?]\xb8\xbb?\x1c\x1e\x82?2\xba{?\x1c\x0f\xb1?\x8b\x12Q?\x0bMU?\xec\x1f\x82?o\x89H?L!\x82?\xe52\x93?P=D?DSU?q+\x93?\xe6\xa9\x8a?|\xa2j?\xe8\x87\x08@\x18\x00\x80?}\xd8]?\x0bOU?C@\xe4?(MU?\x8a#s?\xd1T\xd5?\'@D?\x95T5@}\xba\x9b?\xc6\xb7L?\xe3\xc0\x0b@\xb0?\x14@?\x86\xa8?L=D?\xd0\xc7\x8c?\xf8d\xa6?<\xcd\xac?\xed\x18\x82?\x07\xecn?\xcb\xaa*?\xb7\x98Y?\x8f\xb8;?\x832\x93?\xc7v\xd7?7\xba\xbb?* Q?\xc5R5@MB\x84?\x9d\xb9{?WQU?\x9fx7?\x07\xdbn?_<\x84?\x04RU?-\xcc\x8c?\x8a]f?\xe1\xfd\x0f@\xfa\xca,@waf?\xa8\xf8\x7f?\xaet7?\x1f\xd9]?hf&?z\xed.?\xc5S\x95?\xf1\x04\xc0?\xde\xccL?\x98;D?B\x96\x19@\xc1\x89H?1x7?\xc9\x8bY?\xdb\x1f\xc2?(B\xa4?\x94\x93Y?\x1bt\x86?l\x85\xa8?\xb8uW@\xe2ww?\xe7*s?\x81\xbb{?%\x0f1@\xcd\x01Q?Ed\x86?\x9a=\x84?$A\xe4?w\xc7]?\xcf/\xb3?\xa5\xb3;?\xc0\nQ?\x90\x12\x91?\x96A\xe4?\x1b\xa7\x8a?#\xba{?Y\xa8\x8a?\xf7\xd1l@\x83\xb6{?\xf6A\xa4?\xd3\xbb\xdb?\x12,3?\x01Gs?\x9ax7?K\rQ?\xb4xw?i\xba;?\xae\xa7\xaa?\xf0\xc6{?\x18\x0eQ?}T\x15@\xa5\xb8{?~b\xa6?\x11VU?h\x95\xb9?Y\xfd\x7f?5\xab\x8a?\xc3\xcf]?\x10\xe7L?\x05\r\xd1?\xe7d\xe6?"\xe8.?QHU?\xa4ff?\x10`f?\xe9\x1e\xa2?\x9b9\x84?\tC\xa4?\xe3\xf4]?\x19\x9cY?\x89\xfc??C\xebn?Zef?"\xb4;?-\x1a\x82?\xbf\x0f\xb1?X\xce\x8c?;\xb9;?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'\xb8\xca\x03\x058\xcc\x03\x05\xb0\x16\xe5\x04\xd0\x14\xe5\x04\x10\x1d\xe5\x04\xe0\x19\xe5\x04\xd0\x11\xe5\x04\xf0\x12\xe5\x04 \x1f\xe5\x04p\x1a\xe5\x04x\x12\xe5\x04\xb0\x1c\xe5\x04\x80\x10\xe5\x04\xc8\x10\xe5\x04\xe8\x17\xe5\x04\xe0\x1c\xe5\x04h\x19\xe5\x04\xd8\x1b\xe5\x04\x18\x12\xe5\x04\x88\x11\xe5\x04\x98\x10\xe5\x04H\x1e\xe5\x04\x00\x18\xe5\x04x\x18\xe5\x04@\x11\xe5\x04\xc0\x12\xe5\x04P\x1f\xe5\x04`\x1b\xe5\x04\xf0\x18\xe5\x04\x80\x13\xe5\x04\x80\x1f\xe5\x04\xf0\x15\xe5\x04\x90\x1b\xe5\x04\xa8\x12\xe5\x04\x10\x17\xe5\x04P\x16\xe5\x04@\x1a\xe5\x04\x98\x1f\xe5\x04\x88\x1a\xe5\x04h\x10\xe5\x04\xb8\x1d\xe5\x04\xa8\x1e\xe5\x04\xf8\x16\xe5\x04\xe0\x16\xe5\x04\xe0\x13\xe5\x04\xb8\x1a\xe5\x04\x00\x1e\xe5\x04\xc0\x1e\xe5\x04\xa0\x11\xe5\x04`\x18\xe5\x04\xc8\x19\xe5\x04X\x1a\xe5\x04 \x16\xe5\x04(\x1d\xe5\x04\xf8\x13\xe5\x04\xd8\x12\xe5\x04\xd8\x1e\xe5\x04\x80\x16\xe5\x04\x88\x1d\xe5\x04\xa0\x14\xe5\x04\xd0\x1d\xe5\x04h\x16\xe5\x04 \x10\xe5\x048\x16\xe5\x04x\x1b\xe5\x04\x08\x1f\xe5\x04\xb0\x19\xe5\x04\xe8\x1d\xe5\x04p\x17\xe5\x04@\x17\xe5\x04(\x11\xe5\x04\xd8\x15\xe5\x040\x12\xe5\x04\xe8\x1a\xe5\x04x\x15\xe5\x04@\x14\xe5\x048\x1f\xe5\x04P\x19\xe5\x04\xd0\x17\xe5\x048\x10\xe5\x04\xc8\x16\xe5\x040\x1b\xe5\x04\x98\x1c\xe5\x04\xa0\x1d\xe5\x04\xc8\x1f\xe5\x040\x1e\xe5\x04\x90\x12\xe5\x04p\x14\xe5\x04\x10\x11\xe5\x04\x90\x1e\xe5\x04 \x19\xe5\x04X\x17\xe5\x04\x00\x1b\xe5\x04\x80\x1c\xe5\x04\xe8\x14\xe5\x04\x18\x1b\xe5\x04\xa8\x1b\xe5\x04\x80\x19\xe5\x04\xa0\x17\xe5\x04\xb0\x1f\xe5\x040\x18\xe5\x04`\x1e\xe5\x04\xd0\x1a\xe5\x04\xc8\x1c\xe5\x04X\x1d\xe5\x04\xe8DT\x02X\xf7\\\x03 \xfc\\\x03\xe87\x02\x05`;\x02\x05\xf0>\x02\x05h?\x02\x05\x00;\x02\x05P9\x02\x05\x18;\x02\x05\x80?\x02\x05\xe06\x02\x058?\x02\x05\xc8<\x02\x05\x005\x02\x05\x90\x15\xe6\x04`\x1b\xe6\x04x\x1b\xe6\x04P\x13\xe6\x04\x00\x1e\xe6\x04\xd8\x1b\xe6\x04\x80\x16\xe6\x04\x88\x17\xe6\x04(\x14\xe6\x04\xa8\x18\xe6\x04h\x13\xe6\x04\x80\x13\xe6\x04\xa0\x11\xe6\x04x\x12\xe6\x04\xf8\x1c\xe6\x04p\x1a\xe6\x04\xf0\x15\xe6\x04\x90\x12\xe6\x04\x18>\xee\x04H;\xee\x04\x185\xee\x04\xa07\xee\x04h\x1c\xe5\x04p\x1d\xe5\x04 \x1c\xe5\x04\xb8\x14\xe5\x04p\x11\xe5\x04\xa8\x15\xe5\x04\xe8\x11\xe5\x04 \x13\xe5\x04\x08\x16\xe5\x04P\x10\xe5\x04\x10\x14\xe5\x048\x13\xe5\x04\x98\x13\xe5\x04\xf0\x1b\xe5\x04\xb0\x10\xe5\x040\x15\xe5\x04H\x15\xe5\x04H\x12\xe5\x04\xc8\x13\xe5\x04h\x13\xe5\x04H\x18\xe5\x04\xb8\x17\xe5\x04\xa0\x1a\xe5\x04\xf8\x1c\xe5\x04\xd8\x18\xe5\x04\x00\x12\xe5\x04\xe0\x10\xe5\x04\x88\x14\xe5\x04P\x13\xe5\x04\x18\x15\xe5\x04\x08\x19\xe5\x04\xc0\x18\xe5\x04\xb8\x11\xe5\x048\x19\xe5\x04\xc0\x15\xe5\x04`\x15\xe5\x04\x08\x1c\xe5\x04\xf8\x19\xe5\x04(\x14\xe5\x04\x98\x16\xe5\x04(\x17\xe5\x04X\x14\xe5\x04\x88\x17\xe5\x04(\x1a\xe5\x04\x98\x19\xe5\x04\xb0\x13\xe5\x04h\x1f\xe5\x04H\x1b\xe5\x04\x08\x13\xe5\x04\x18\x1e\xe5\x04\xf0\x1e\xe5\x048\x1c\xe5\x04\xa8\x18\xe5\x04\x90\x15\xe5\x04\xc0\x1b\xe5\x04\xb8\x1a\xe6\x04x\x18\xe6\x04`\x12\xe6\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g943
sg895
g933
sg909
g937
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1056
sg895
g1052
sg909
g1063
sg904
g1060
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1079
sg895
g1069
sg909
g1073
sg904
g1077
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1090
sg895
g1086
sg909
g1097
sg904
g1094
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g1005
sg895
g1103
sg909
g1012
sg904
g1110
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1122
sg895
g1118
sg909
g1129
sg904
g1126
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g1022
sg895
g1135
sg909
g1029
sg904
g1142
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1154
sg895
g1150
sg909
g1161
sg904
g1158
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g1171
sg895
g1167
sg909
g1178
sg904
g1175
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1194
sg895
g1184
sg909
g1188
sg904
g1192
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1154
sg895
g1150
sg909
g1161
sg904
g1158
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1079
sg895
g1214
sg909
g1073
sg904
g1221
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g943
sg895
g1229
sg909
g937
sg904
g1236
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g1261
sg895
g1257
sg909
g1268
sg904
g1265
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1171
sg895
g1167
sg909
g1178
sg904
g1175
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g900
sg895
g1300
sg909
g910
sg904
g1307
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1122
sg895
g1118
sg909
g1129
sg904
g1126
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1345
sg895
g1341
sg909
g1352
sg904
g1349
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g1039
sg895
g1358
sg909
g1046
sg904
g1365
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1090
sg895
g1086
sg909
g1097
sg904
g1094
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1122
sg895
g1118
sg909
g1129
sg904
g1126
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g920
sg895
g1399
sg909
g927
sg904
g1406
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1079
sg895
g1214
sg909
g1073
sg904
g1221
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1450
sg895
g1440
sg909
g1444
sg904
g1448
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g954
sg895
g1470
sg909
g961
sg904
g1477
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g1122
sg895
g1118
sg909
g1129
sg904
g1126
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1541
sg895
g1537
sg909
g1548
sg904
g1545
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g1079
sg895
g1214
sg909
g1073
sg904
g1221
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1090
sg895
g1580
sg909
g1097
sg904
g1587
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g1261
sg895
g1257
sg909
g1268
sg904
g1265
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1056
sg895
g1608
sg909
g1063
sg904
g1615
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1194
sg895
g1623
sg909
g1188
sg904
g1630
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1154
sg895
g1150
sg909
g1161
sg904
g1158
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1039
sg895
g1358
sg909
g1046
sg904
g1365
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g1090
sg895
g1086
sg909
g1097
sg904
g1094
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g943
sg895
g933
sg909
g937
sg904
g941
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g1056
sg895
g1608
sg909
g1063
sg904
g1615
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1122
sg895
g1716
sg909
g1129
sg904
g1723
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g1079
sg895
g1069
sg909
g1073
sg904
g1077
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g1345
sg895
g1744
sg909
g1352
sg904
g1751
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1450
sg895
g1759
sg909
g1444
sg904
g1766
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1261
sg895
g1787
sg909
g1268
sg904
g1794
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1194
sg895
g1623
sg909
g1188
sg904
g1630
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g1541
sg895
g1815
sg909
g1548
sg904
g1822
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g900
sg895
g1300
sg909
g910
sg904
g1307
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1261
sg895
g1257
sg909
g1268
sg904
g1265
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g1056
sg895
g1052
sg909
g1063
sg904
g1060
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1171
sg895
g1167
sg909
g1178
sg904
g1175
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g971
sg895
g1895
sg909
g978
sg904
g1902
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1261
sg895
g1257
sg909
g1268
sg904
g1265
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1122
sg895
g1716
sg909
g1129
sg904
g1723
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1171
sg895
g1167
sg909
g1178
sg904
g1175
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g971
sg895
g1895
sg909
g978
sg904
g1902
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1022
sg895
g1135
sg909
g1029
sg904
g1142
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1154
sg895
g1150
sg909
g1161
sg904
g1158
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1345
sg895
g1744
sg909
g1352
sg904
g1751
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g954
sg895
g1470
sg909
g961
sg904
g1477
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1171
sg895
g2014
sg909
g1178
sg904
g2021
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g954
sg895
g1470
sg909
g961
sg904
g1477
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1122
sg895
g1716
sg909
g1129
sg904
g1723
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g988
sg895
g2081
sg909
g995
sg904
g2088
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1090
sg895
g1086
sg909
g1097
sg904
g1094
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g971
sg895
g1895
sg909
g978
sg904
g1902
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g954
sg895
g1470
sg909
g961
sg904
g1477
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1541
sg895
g1815
sg909
g1548
sg904
g1822
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g920
sg895
g1399
sg909
g927
sg904
g1406
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1541
sg895
g1537
sg909
g1548
sg904
g1545
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g988
sg895
g2081
sg909
g995
sg904
g2088
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g988
sg895
g2081
sg909
g995
sg904
g2088
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g1005
sg895
g1103
sg909
g1012
sg904
g1110
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g1056
sg895
g1608
sg909
g1063
sg904
g1615
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g1154
sg895
g2239
sg909
g1161
sg904
g2246
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1056
sg895
g1052
sg909
g1063
sg904
g1060
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1345
sg895
g1744
sg909
g1352
sg904
g1751
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1154
sg895
g2239
sg909
g1161
sg904
g2246
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g943
sg895
g933
sg909
g937
sg904
g941
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1194
sg895
g1623
sg909
g1188
sg904
g1630
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g920
sg895
g1399
sg909
g927
sg904
g1406
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g1541
sg895
g1537
sg909
g1548
sg904
g1545
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1022
sg895
g1135
sg909
g1029
sg904
g1142
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1005
sg895
g1103
sg909
g1012
sg904
g1110
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g1261
sg895
g1787
sg909
g1268
sg904
g1794
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g1345
sg895
g1341
sg909
g1352
sg904
g1349
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1090
sg895
g1580
sg909
g1097
sg904
g1587
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1194
sg895
g1184
sg909
g1188
sg904
g1192
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1005
sg895
g1103
sg909
g1012
sg904
g1110
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1261
sg895
g1787
sg909
g1268
sg904
g1794
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1171
sg895
g2014
sg909
g1178
sg904
g2021
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g1079
sg895
g1214
sg909
g1073
sg904
g1221
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1450
sg895
g1759
sg909
g1444
sg904
g1766
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g1194
sg895
g1184
sg909
g1188
sg904
g1192
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g1056
sg895
g1608
sg909
g1063
sg904
g1615
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1345
sg895
g1744
sg909
g1352
sg904
g1751
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g1171
sg895
g2014
sg909
g1178
sg904
g2021
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1345
sg895
g1341
sg909
g1352
sg904
g1349
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1450
sg895
g1440
sg909
g1444
sg904
g1448
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g1079
sg895
g1214
sg909
g1073
sg904
g1221
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1194
sg895
g1623
sg909
g1188
sg904
g1630
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1450
sg895
g1759
sg909
g1444
sg904
g1766
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1541
sg895
g1815
sg909
g1548
sg904
g1822
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1261
sg895
g1257
sg909
g1268
sg904
g1265
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g1039
sg895
g1358
sg909
g1046
sg904
g1365
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1122
sg895
g1716
sg909
g1129
sg904
g1723
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g943
sg895
g1229
sg909
g937
sg904
g1236
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g900
sg895
g1300
sg909
g910
sg904
g1307
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1345
sg895
g1744
sg909
g1352
sg904
g1751
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1541
sg895
g1537
sg909
g1548
sg904
g1545
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1194
sg895
g1184
sg909
g1188
sg904
g1192
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1541
sg895
g1815
sg909
g1548
sg904
g1822
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g1154
sg895
g1150
sg909
g1161
sg904
g1158
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1022
sg895
g1135
sg909
g1029
sg904
g1142
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1194
sg895
g1184
sg909
g1188
sg904
g1192
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g943
sg895
g1229
sg909
g937
sg904
g1236
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1345
sg895
g1341
sg909
g1352
sg904
g1349
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1261
sg895
g1787
sg909
g1268
sg904
g1794
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1171
sg895
g2014
sg909
g1178
sg904
g2021
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g943
sg895
g1229
sg909
g937
sg904
g1236
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1541
sg895
g1815
sg909
g1548
sg904
g1822
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g1079
sg895
g1069
sg909
g1073
sg904
g1077
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g1056
sg895
g1608
sg909
g1063
sg904
g1615
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g1039
sg895
g1358
sg909
g1046
sg904
g1365
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1194
sg895
g1623
sg909
g1188
sg904
g1630
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1171
sg895
g2014
sg909
g1178
sg904
g2021
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1450
sg895
g1440
sg909
g1444
sg904
g1448
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g988
sg895
g2081
sg909
g995
sg904
g2088
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g943
sg895
g933
sg909
g937
sg904
g941
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1154
sg895
g2239
sg909
g1161
sg904
g2246
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1450
sg895
g1440
sg909
g1444
sg904
g1448
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g1079
sg895
g1069
sg909
g1073
sg904
g1077
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1450
sg895
g1759
sg909
g1444
sg904
g1766
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g1039
sg895
g1358
sg909
g1046
sg904
g1365
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1090
sg895
g1580
sg909
g1097
sg904
g1587
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g1261
sg895
g1787
sg909
g1268
sg904
g1794
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g971
sg895
g1895
sg909
g978
sg904
g1902
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1090
sg895
g1086
sg909
g1097
sg904
g1094
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1450
sg895
g1759
sg909
g1444
sg904
g1766
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g920
sg895
g1399
sg909
g927
sg904
g1406
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g900
sg895
g1300
sg909
g910
sg904
g1307
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1005
sg895
g1103
sg909
g1012
sg904
g1110
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g1541
sg895
g1537
sg909
g1548
sg904
g1545
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g943
sg895
g1229
sg909
g937
sg904
g1236
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g1171
sg895
g1167
sg909
g1178
sg904
g1175
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1090
sg895
g1580
sg909
g1097
sg904
g1587
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1122
sg895
g1716
sg909
g1129
sg904
g1723
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1056
sg895
g1052
sg909
g1063
sg904
g1060
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g943
sg895
g933
sg909
g937
sg904
g941
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1079
sg895
g1069
sg909
g1073
sg904
g1077
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g1154
sg895
g2239
sg909
g1161
sg904
g2246
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g954
sg895
g1470
sg909
g961
sg904
g1477
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g900
sg895
g1300
sg909
g910
sg904
g1307
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1056
sg895
g1052
sg909
g1063
sg904
g1060
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1345
sg895
g1341
sg909
g1352
sg904
g1349
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g971
sg895
g1895
sg909
g978
sg904
g1902
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g1154
sg895
g2239
sg909
g1161
sg904
g2246
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g1022
sg895
g1135
sg909
g1029
sg904
g1142
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g1450
sg895
g1440
sg909
g1444
sg904
g1448
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1090
sg895
g1580
sg909
g1097
sg904
g1587
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g920
sg895
g1399
sg909
g927
sg904
g1406
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g1122
sg895
g1118
sg909
g1129
sg904
g1126
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g988
sg895
g2081
sg909
g995
sg904
g2088
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I83497296
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'hj\xf9\x0c0E\xf9\x0c\x98\xcf\xf8\x0c\xa0j\xf9\x0cp\xcf\xf8\x0c@D\xf9\x0c\xd8j\xf9\x0cH\xcf\xf8\x0chj\xf9\x0cpD\xf9\x0c\x90E\xf9\x0c\xc0E\xf9\x0c\xd0D\xf9\x0c@D\xf9\x0cH\xcf\xf8\x0c`}\x0f\r\xa0D\xf9\x0chj\xf9\x0c F\xf9\x0chj\xf9\x0cH\xcf\xf8\x0c\xf8\xce\xf8\x0c\x10k\xf9\x0c\x98\xcf\xf8\x0cp\xcf\xf8\x0c\x00E\xf9\x0c`}\x0f\r\xd0\xce\xf8\x0c\xa8\xce\xf8\x0c \xcf\xf8\x0cHk\xf9\x0c\x00E\xf9\x0c\xa8\xce\xf8\x0c }\x0f\r\x00E\xf9\x0cH\xcf\xf8\x0c\xe0\xcd\xf8\x0c\x80k\xf9\x0chj\xf9\x0cpD\xf9\x0c@D\xf9\x0c\xa8\xce\xf8\x0chj\xf9\x0c\xc0E\xf9\x0chj\xf9\x0c\xd8j\xf9\x0c\xf8\xce\xf8\x0c\xd8j\xf9\x0c\x80\xce\xf8\x0c@D\xf9\x0c \xcf\xf8\x0c\xa0D\xf9\x0c\x80\xce\xf8\x0c\xc0}\x0f\rpD\xf9\x0cHk\xf9\x0c0E\xf9\x0c\xc0E\xf9\x0c\xd0D\xf9\x0c\x80v\x0f\r\xa0D\xf9\x0c\xa8\xce\xf8\x0c \xcf\xf8\x0c\xd0D\xf9\x0c\x80v\x0f\r0E\xf9\x0cH\xcf\xf8\x0c\x00E\xf9\x0c\x10k\xf9\x0c\x80\xce\xf8\x0c\x98\xcf\xf8\x0c\xa0j\xf9\x0c\xd0\xce\xf8\x0c \xcf\xf8\x0c\x80v\x0f\r\x00E\xf9\x0c\x80\xce\xf8\x0chj\xf9\x0c\xc0}\x0f\r \xcf\xf8\x0c\xf0E\xf9\x0c\x00E\xf9\x0c\xa0D\xf9\x0c\xf8\xce\xf8\x0c`}\x0f\r\xd0D\xf9\x0c\x98\xcf\xf8\x0c\xf8\xce\xf8\x0c\x80v\x0f\r\xd0D\xf9\x0c\xa0D\xf9\x0cp\xcf\xf8\x0c\xd8j\xf9\x0cHk\xf9\x0c\xa0j\xf9\x0c\x80\xce\xf8\x0c\xd0\xce\xf8\x0c\xf8\xce\xf8\x0cH\xcf\xf8\x0cHk\xf9\x0c\xd0\xce\xf8\x0c\xd8j\xf9\x0c\xa8\xce\xf8\x0c\x98\xcf\xf8\x0c@D\xf9\x0c\x80v\x0f\r\xf8\xce\xf8\x0cpD\xf9\x0c\xb8\xcd\xf8\x0cPF\xf9\x0c\xa0D\xf9\x0chj\xf9\x0c\xd8j\xf9\x0c\xb8k\xf9\x0c0E\xf9\x0c@x\x0f\r\xa0j\xf9\x0cpD\xf9\x0c\xa0D\xf9\x0c`}\x0f\rHk\xf9\x0c\x80v\x0f\r\xb8k\xf9\x0c\xd8j\xf9\x0ch\xcd\xf8\x0c\xc0E\xf9\x0c\xf0E\xf9\x0c\x10k\xf9\x0c\x00E\xf9\x0c`}\x0f\r \xcf\xf8\x0c\x80\xce\xf8\x0c\xa8\xce\xf8\x0c\x10k\xf9\x0c\x98\xcf\xf8\x0c\x08\xce\xf8\x0c\x98\xcf\xf8\x0c\x80\xce\xf8\x0c\x00E\xf9\x0cH\xcf\xf8\x0cp\xcf\xf8\x0c\x80y\x0f\r\x00E\xf9\x0cpD\xf9\x0c\x90E\xf9\x0c\xa8\xce\xf8\x0c\x80v\x0f\r\xb8k\xf9\x0c`}\x0f\r\xf8\xce\xf8\x0chj\xf9\x0cp\xcf\xf8\x0c\xd0D\xf9\x0cHk\xf9\x0c\x10k\xf9\x0c\xa0j\xf9\x0c`}\x0f\r0E\xf9\x0c\x80k\xf9\x0cpD\xf9\x0c\x10k\xf9\x0c\xd8j\xf9\x0cp\xcf\xf8\x0c\x10k\xf9\x0cpD\xf9\x0c\x80v\x0f\r`}\x0f\r\x90E\xf9\x0cH\xcf\xf8\x0cpD\xf9\x0c\xd0\xce\xf8\x0c\x00E\xf9\x0c\x80k\xf9\x0c\xf8\xce\xf8\x0cHk\xf9\x0c\xa8\xce\xf8\x0c\xd0\xce\xf8\x0c\xc0}\x0f\r\x10k\xf9\x0c\xd0D\xf9\x0c\x98\xcf\xf8\x0c\xf8\xce\xf8\x0c\x80\xce\xf8\x0c\xe0\xcd\xf8\x0c\x10k\xf9\x0cp\xcf\xf8\x0c }\x0f\r\xd0D\xf9\x0c\xa8\xce\xf8\x0ch\xcd\xf8\x0c@x\x0f\r\xd0\xce\xf8\x0c\x80y\x0f\r@\xcd\xf8\x0c\xa0j\xf9\x0ch\xcd\xf8\x0c\xa0j\xf9\x0c\x80\xce\xf8\x0cH\xcf\xf8\x0c`E\xf9\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S"\xe0\xf0\x85\r (\xbe\x1e@&\xbe\x1e\x00'\xbe\x1e\x80'\xbe\x1e\x80&\xbe\x1e`'\xbe\x1e\xe0&\xbe\x1e\xe0'\xbe\x1e\x00(\xbe\x1e\x80(\xbe\x1e\xc0(\xbe\x1e '\xbe\x1e@(\xbe\x1e\x80\xf6\x85\r@\xf1\x85\r`)\xbe\x1e@'\xbe\x1e\xa0)\xbe\x1e\xc0'\xbe\x1e\x80\xf0\x85\r\xc0&\xbe\x1e\xa0(\xbe\x1e\xe0)\xbe\x1e\xe0(\xbe\x1e`*\xbe\x1e )\xbe\x1e`&\xbe\x1e@)\xbe\x1e@+\xbe\x1e\xe0*\xbe\x1e\x00*\xbe\x1e\xc0*\xbe\x1e\xa0+\xbe\x1e`(\xbe\x1e\xa0&\xbe\x1e ,\xbe\x1e\x00)\xbe\x1e`+\xbe\x1e@*\xbe\x1e@,\xbe\x1e\xa0'\xbe\x1e\xc0,\xbe\x1e\x00,\xbe\x1e\xa0*\xbe\x1e -\xbe\x1e \xf5\x85\r +\xbe\x1e`-\xbe\x1e\x80-\xbe\x1e\xa0-\xbe\x1e\x80*\xbe\x1e *\xbe\x1e@.\xbe\x1e\x80,\xbe\x1e\xe0-\xbe\x1e\xa0.\xbe\x1e\xe0.\xbe\x1e\x80)\xbe\x1e`.\xbe\x1e /\xbe\x1e\x00-\xbe\x1e\x80/\xbe\x1e\xc0)\xbe\x1e\xa0,\xbe\x1e\xc0+\xbe\x1e@-\xbe\x1e\x00+\xbe\x1e\x00.\xbe\x1e .\xbe\x1e\x80+\xbe\x1e\xc0-\xbe\x1e\xa0/\xbe\x1e\xe0,\xbe\x1e\xe0/\xbe\x1e\x00/\xbe\x1e\xc0/\xbe\x1e\x80.\xbe\x1e`,\xbe\x1e\x00\xf1\x85\r\xc0.\xbe\x1e@/\xbe\x1e@2\xe7\x1e 2\xe7\x1e\xc00\xe7\x1e@1\xe7\x1e\x002\xe7\x1e\xe00\xe7\x1e`0\xe7\x1e\xa02\xe7\x1e`2\xe7\x1e 0\xe7\x1e@0\xe7\x1e\xa00\xe7\x1e`1\xe7\x1e\xe02\xe7\x1e\x003\xe7\x1e`3\xe7\x1e@3\xe7\x1e\xa01\xe7\x1e\x803\xe7\x1e\xe03\xe7\x1e\xc03\xe7\x1e 4\xe7\x1e\x004\xe7\x1e`4\xe7\x1e\x804\xe7\x1e 1\xe7\x1e\xc04\xe7\x1e\xa04\xe7\x1e\xe01\xe7\x1e\xc02\xe7\x1e\x800\xe7\x1e\x805\xe7\x1e\xc01\xe7\x1e\x801\xe7\x1e\x005\xe7\x1e@6\xe7\x1e\x802\xe7\x1e\xc05\xe7\x1e 6\xe7\x1e 5\xe7\x1e\x006\xe7\x1e\xa06\xe7\x1e\x806\xe7\x1e 3\xe7\x1e\xc06\xe7\x1e\xe06\xe7\x1e\x007\xe7\x1e 7\xe7\x1e\x807\xe7\x1e`7\xe7\x1e`5\xe7\x1e\xe07\xe7\x1e\xc07\xe7\x1e 8\xe7\x1e\x008\xe7\x1e`8\xe7\x1e@8\xe7\x1e\xa08\xe7\x1e\x808\xe7\x1e`6\xe7\x1e\xc08\xe7\x1e 9\xe7\x1e\x009\xe7\x1e\xe04\xe7\x1e@9\xe7\x1e`9\xe7\x1e\x809\xe7\x1e\xe09\xe7\x1e\xc09\xe7\x1e :\xe7\x1e\x00:\xe7\x1e`:\xe7\x1e\x80:\xe7\x1e\xa0:\xe7\x1e\xc0:\xe7\x1e\xe0+\xbe\x1e\xa07\xe7\x1e@7\xe7\x1e@:\xe7\x1e\x80;\xe7\x1e@5\xe7\x1e\xc0;\xe7\x1e\xe05\xe7\x1e\xa03\xe7\x1e <\xe7\x1e\x80<\xe7\x1e\xa0;\xe7\x1e\xe0<\xe7\x1e@;\xe7\x1e`;\xe7\x1e`<\xe7\x1e\xc0<\xe7\x1e\xa09\xe7\x1e\x001\xe7\x1e\xa05\xe7\x1e\xe08\xe7\x1e`=\xe7\x1e =\xe7\x1e >\xe7\x1e\x00=\xe7\x1e@=\xe7\x1e@4\xe7\x1e`>\xe7\x1e\xc0>\xe7\x1e ;\xe7\x1e\xa0=\xe7\x1e\xc0=\xe7\x1e\x00<\xe7\x1e ?\xe7\x1e\xe0;\xe7\x1e`?\xe7\x1e\x00;\xe7\x1e@?\xe7\x1e\xe0>\xe7\x1e\xa0<\xe7\x1e\x00>\xe7\x1e\xe0?\xe7\x1e\xc0?\xe7\x1e"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'/\xe2n?\x0cS\xb5?cPU?\xdc\xc9\x8c?\x89\x1c\xe2?\xba\xd7;?\xea\xa8j?V""?\xb7\x99\x19?\x0b\xee\x8e?\xbe\x86H?\xdd\xedP?\xaf\x84\xa8?f\x08Q?\n\xdb\x9d?>f\x86?\xbb4s?\x85\x9e\x19?\xd8\x10Q?\x9b\x99\x19?\xd7\x12b?S\xa8*?\xd2\xbe*?\xa2\xa7*?\x81lw?\x952\xf3?s[f?\x8d\xadY?\x9eS5@\x86V&?\xcd\x03@?\xa9qw?\x10\xf6]?\x15\xa4*?\x7f\xfa??\x89\xf9\x7f?&\xcc\x8c?\xd7\x1a\x82?|\xb6\x8a?\x0e!\x82?^23?\x05\xb7{?&\xde]?i\xdd.?\xa7\xf1n?:x7?\xb9b7??x7?<\xa5j?W\x1db?\x0e\x8bj?SQU?f,s?&\xb5{?~,s?\xc3;D?\x8c\xac*?\xd2\xb0\xdb?\x8d1#@["\xe2?&\x0e\xf1?\xf6\x18\x91?\x87vH?{ b?\xd5\x84\xa8?\x7f\xd8\x1d?L\x03@?\xa6>\x93?\x8c\x89H?\xfb\xcaL?\x01\xf3??\x86\x0eQ?\xbcSU?\xa1\xab;?\xa0\xbb;?-\xa3j?b"b?\xb2\xa8\x8a?\x93\x88H?M\x94)@\x0e\xde]?jx7?Zz\xa8?h?D?\xe8\xee\xae?X\xabj?B\xbc;?>73?$\x00@?\xe6w\x97?\xb1\x01@?\xdb\x91\xb9?\x82\x0cQ?\xb5s7?\xe3\xb5;?\x0c\x0fQ?\xcb\xf6]?\x99\xdf\x1d?\x10`f?L\x01@?\xdf\x0bQ?6\x85H?\x1f;b?\x1c9D?\x06r7?\x8e\xa6\x8a?yp7?\xca\xab\xea?\x94\xbc;?\xdf@\x84?Gvw?F!\xe2?\xcc\x98\t@-p7?\xc6\xb9;?\xc7\xean?\xcd;D?\xbd\x13Q?\xd8<\x93?_P\xd5?\x111\xb3?\xd7?\xe4?@\x96Y?\xb5\xbe*?\x96\xdd]?\x0f\xb0\xbb?PB\x84?\x18\x12Q?\xaf\x1f"?T\xda\x9d?#\xb7L?\xa3\x0cQ?\xc8NU?\x93\x88H?\x1a\xf2]?k"\x02@?g&?\'\xeb\xae?\xac\x83\x88?s\x10Q?\xde(s?n\x12Q?\x02\xdb]?\x1f\xdf\x9d?\x12\xd7\x8c?\x10\xbc\xbb?\xedU\x05@\x98\x99Y?\xf0\xba\x1b@\x13q&?y\x87\x88?\xa2\xf2??A\x11\x91?\x81\xfd??" "?w\x97H?\x88\xb9;?\xd9\xda.?\x9a_\x86?>\xa8\xea?\xa2\xaa\xaa?\x96\x1e\x82?\xc8\x0c\xb1?/rw?\xd2 \x12@\xba\x1c\x91?pd\x16@\xab1\x83@\xbauG@\x87f\xa6?\xa2\x96\xd9?\xf61S@\x94\xa2j?[\x0e\x91?@\xe1]?\xa4 \x02@+\xcdL?Xqw?\x8f\xdd\x9d?\x90)Q?\xfcu7?\x9b\xed.?\xb3\xb5;?\xc3\xbe;?hu7?<9b?\xf4\xdc]?\xf9\xee.?\xcds7?\n\xea.?\xabS\x95?\x99\x07\xb1?\x80c\xa6?\x90T\xd5?\x16\xfc??(\x98Y?\xb863?\xa2\xf0.?g\xecn?jU\x95?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'\xa0\x17\xe6\x04\x10\x11\xe6\x04H\xce\x03\x05H\xc2\x03\x05X\xc7\x03\x05 \xc3\x03\x05\xb0\xc3\x03\x05x\xc5\x03\x05\x18\xc8\x03\x05\xf8\xc0\x03\x05H\xc5\x03\x05\x18\xc2\x03\x05\xc8\xc3\x03\x05p\xc4\x03\x05\x88\xc4\x03\x050\xc5\x03\x05\x10\xc1\x03\x05\xe0\xc9\x03\x05\xb8\xc1\x03\x05@\xc7\x03\x05\x08\xc9\x03\x058\xc6\x03\x05x\xce\x03\x05\xa0\xc4\x03\x058\xc3\x03\x05\x10\xc7\x03\x05\x80\xc6\x03\x05h\xc9\x03\x05\xd0\xca\x03\x05\xc8\xc9\x03\x05\x80\xc0\x03\x05\x98\xc6\x03\x05p\xc1\x03\x05\xf0\xc8\x03\x05\xa0\xc1\x03\x05\xe8\xc1\x03\x05(\xc7\x03\x05\xd8\xcb\x03\x05X\xc4\x03\x05@\xc4\x03\x05`\xc2\x03\x05\x10\xca\x03\x05\xb8\xc7\x03\x05\x00\xc8\x03\x05\xc8\xcf\x03\x05\xc8\xc0\x03\x05\xe0\xcf\x03\x05\xe8\xc7\x03\x05X\xcd\x03\x05\xe0\xc0\x03\x05\x00\xce\x03\x05\xc8\xc6\x03\x05\xf8\xcc\x03\x05\x88\xcd\x03\x05\x80\xc3\x03\x05\xd0\xc7\x03\x05\xd8\xc2\x03\x05\xd0\xc1\x03\x05(\xcd\x03\x05\xb0\xc6\x03\x050\xc8\x03\x05\xd0\x17\xe6\x04h9\xee\x040>\xee\x0405\xee\x04p4\xee\x04\xc08\xee\x04\xc0>\xee\x04x;\xee\x04`>\xee\x04\x908\xee\x04\xe0<\xee\x04\x086\xee\x04\xb0<\xee\x04X1\xee\x04\xa0:\xee\x04(=\xee\x04\xf83\xee\x04\xa04\xee\x04\x188\xee\x04\xf05\xee\x04\x986\xee\x04x8\xee\x04\xa85\xee\x04\xb03\xee\x04\x809\xee\x04p:\xee\x04 9\xee\x04@7\xee\x04\xf0;\xee\x04\xb09\xee\x04\x00>\xee\x04\xd07\xee\x04\x806\xee\x04\xd0:\xee\x04\x182\xee\x04\xf0>\xee\x04\x884\xee\x04\xe8=\xee\x04P9\xee\x04\xf8<\xee\x04\x101\xee\x04(4\xee\x04\x18;\xee\x04@4\xee\x04\xa82\xee\x04 6\xee\x04\x80<\xee\x04\xc83\xee\x04\xb87\xee\x04\x90;\xee\x04H8\xee\x04\x989\xee\x04\x107\xee\x04\xc05\xee\x0489\xee\x04 3\xee\x04\x10=\xee\x04\xd8;\xee\x04P?\xee\x04X7\xee\x04\x005\xee\x04\x90>\xee\x0408\xee\x04\xb0?\xee\x04\x98?\xee\x04\xd85\xee\x04h0\xee\x04@1\xee\x04\xe87\xee\x04`8\xee\x04(:\xee\x04\xd0=\xee\x04P<\xee\x04\xe09\xee\x04H>\xee\x04\x887\xee\x04p=\xee\x04\xf89\xee\x04\xb0\xcf\x03\x05x\xcb\x03\x05\x90\xc8\x03\x05\x80\xcf\x03\x05\xc8\xcc\x03\x05P\xc9\x03\x05 \xc0\x03\x05P\xcf\x03\x05\xf8\xc9\x03\x05\xb8\xcd\x03\x058\xcf\x03\x05\x98\xcc\x03\x05\xf8\xc6\x03\x058\xc9\x03\x05\xf0\xc5\x03\x05\x00\xc5\x03\x05h\xcc\x03\x05\xc0\xc8\x03\x05\xb0\xcc\x03\x058\xc0\x03\x05@\xc1\x03\x05 \xc9\x03\x05\x18\xcb\x03\x05@\xca\x03\x05\xf0\xc2\x03\x05\xc0\xcb\x03\x05\xe0\xcc\x03\x05@\xcd\x03\x05(\xca\x03\x05\xc0\xc2\x03\x05\xb8\xc4\x03\x05h\xc0\x03\x05x\xc8\x03\x05\x00\xcb\x03\x05P\xc6\x03\x05\x90\xcb\x03\x05\xe8\xcd\x03\x05(\xc1\x03\x05\x98\xc9\x03\x05\xe8\xca\x03\x05\xa8\xc8\x03\x05`\xce\x03\x05`\xcb\x03\x05H\xcb\x03\x05\xd0\xcd\x03\x05\x90\xc5\x03\x05(\xc4\x03\x05\x88\xc7\x03\x05\xa8\xcb\x03\x05\x18\xce\x03\x05\xa0\xcd\x03\x050\xce\x03\x05 \xcc\x03\x05\x90\xce\x03\x05\x98\xc3\x03\x05\xf0\xcb\x03\x05\xa0\xca\x03\x05\xd8\xc8\x03\x05\xb0\xc9\x03\x05`\xc8\x03\x05p\xca\x03\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3664
sg3633
g3654
sg3647
g3658
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3664
sg3633
g3722
sg3647
g3658
sg3642
g3729
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3638
sg3633
g3771
sg3647
g3648
sg3642
g3778
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3813
sg3633
g3803
sg3647
g3807
sg3642
g3811
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3830
sg3633
g3820
sg3647
g3824
sg3642
g3828
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3841
sg3633
g3837
sg3647
g3848
sg3642
g3845
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3664
sg3633
g3722
sg3647
g3658
sg3642
g3729
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3813
sg3633
g3803
sg3647
g3807
sg3642
g3811
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3638
sg3633
g3771
sg3647
g3648
sg3642
g3778
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3933
sg3633
g3923
sg3647
g3927
sg3642
g3931
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3638
sg3633
g3771
sg3647
g3648
sg3642
g3778
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3970
sg3633
g3966
sg3647
g3977
sg3642
g3974
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3933
sg3633
g3923
sg3647
g3927
sg3642
g3931
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g3675
sg3633
g3996
sg3647
g3682
sg3642
g4003
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3709
sg3633
g4011
sg3647
g3716
sg3642
g4018
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g4030
sg3633
g4026
sg3647
g4037
sg3642
g4034
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g4060
sg3633
g4056
sg3647
g4067
sg3642
g4064
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g4077
sg3633
g4073
sg3647
g4084
sg3642
g4081
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3830
sg3633
g3820
sg3647
g3824
sg3642
g3828
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g4107
sg3633
g4103
sg3647
g4114
sg3642
g4111
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g4030
sg3633
g4120
sg3647
g4037
sg3642
g4127
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g4077
sg3633
g4135
sg3647
g4084
sg3642
g4142
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g4030
sg3633
g4120
sg3647
g4037
sg3642
g4127
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g3758
sg3633
g4176
sg3647
g3765
sg3642
g4183
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3709
sg3633
g4011
sg3647
g3716
sg3642
g4018
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g3638
sg3633
g3771
sg3647
g3648
sg3642
g3778
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g3790
sg3633
g4230
sg3647
g3797
sg3642
g4237
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g3664
sg3633
g3654
sg3647
g3658
sg3642
g3662
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g4077
sg3633
g4135
sg3647
g4084
sg3642
g4142
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3830
sg3633
g4284
sg3647
g3824
sg3642
g4291
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g3970
sg3633
g4325
sg3647
g3977
sg3642
g4332
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g4357
sg3633
g4353
sg3647
g4364
sg3642
g4361
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g3664
sg3633
g3722
sg3647
g3658
sg3642
g3729
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3830
sg3633
g3820
sg3647
g3824
sg3642
g3828
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3813
sg3633
g4396
sg3647
g3807
sg3642
g4403
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g4357
sg3633
g4411
sg3647
g4364
sg3642
g4418
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g3790
sg3633
g4230
sg3647
g3797
sg3642
g4237
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g4107
sg3633
g4103
sg3647
g4114
sg3642
g4111
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g3664
sg3633
g3722
sg3647
g3658
sg3642
g3729
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3830
sg3633
g4284
sg3647
g3824
sg3642
g4291
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3841
sg3633
g4491
sg3647
g3848
sg3642
g4498
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g4510
sg3633
g4506
sg3647
g4517
sg3642
g4514
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3813
sg3633
g3803
sg3647
g3807
sg3642
g3811
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g4077
sg3633
g4073
sg3647
g4084
sg3642
g4081
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g3830
sg3633
g4284
sg3647
g3824
sg3642
g4291
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g3841
sg3633
g4491
sg3647
g3848
sg3642
g4498
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g4510
sg3633
g4575
sg3647
g4517
sg3642
g4582
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3664
sg3633
g3654
sg3647
g3658
sg3642
g3662
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g3758
sg3633
g4176
sg3647
g3765
sg3642
g4183
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g4030
sg3633
g4120
sg3647
g4037
sg3642
g4127
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3933
sg3633
g3923
sg3647
g3927
sg3642
g3931
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g4357
sg3633
g4411
sg3647
g4364
sg3642
g4418
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g3675
sg3633
g3996
sg3647
g3682
sg3642
g4003
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g4060
sg3633
g4681
sg3647
g4067
sg3642
g4688
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g3830
sg3633
g4284
sg3647
g3824
sg3642
g4291
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g4510
sg3633
g4506
sg3647
g4517
sg3642
g4514
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g4030
sg3633
g4120
sg3647
g4037
sg3642
g4127
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g4357
sg3633
g4353
sg3647
g4364
sg3642
g4361
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3638
sg3633
g3771
sg3647
g3648
sg3642
g3778
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3692
sg3633
g4761
sg3647
g3699
sg3642
g4768
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g3830
sg3633
g4284
sg3647
g3824
sg3642
g4291
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g3841
sg3633
g4491
sg3647
g3848
sg3642
g4498
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g4030
sg3633
g4026
sg3647
g4037
sg3642
g4034
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3813
sg3633
g4396
sg3647
g3807
sg3642
g4403
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3970
sg3633
g4325
sg3647
g3977
sg3642
g4332
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g3841
sg3633
g4491
sg3647
g3848
sg3642
g4498
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g3675
sg3633
g3996
sg3647
g3682
sg3642
g4003
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g3970
sg3633
g3966
sg3647
g3977
sg3642
g3974
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g4510
sg3633
g4506
sg3647
g4517
sg3642
g4514
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g3841
sg3633
g3837
sg3647
g3848
sg3642
g3845
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3813
sg3633
g3803
sg3647
g3807
sg3642
g3811
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g3741
sg3633
g4945
sg3647
g3748
sg3642
g4952
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g4107
sg3633
g4960
sg3647
g4114
sg3642
g4967
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g3692
sg3633
g4761
sg3647
g3699
sg3642
g4768
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g4357
sg3633
g4353
sg3647
g4364
sg3642
g4361
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g4060
sg3633
g4056
sg3647
g4067
sg3642
g4064
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3970
sg3633
g4325
sg3647
g3977
sg3642
g4332
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g4107
sg3633
g4103
sg3647
g4114
sg3642
g4111
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g4060
sg3633
g4681
sg3647
g4067
sg3642
g4688
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g3741
sg3633
g4945
sg3647
g3748
sg3642
g4952
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g4077
sg3633
g4073
sg3647
g4084
sg3642
g4081
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3664
sg3633
g3722
sg3647
g3658
sg3642
g3729
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g4510
sg3633
g4506
sg3647
g4517
sg3642
g4514
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g3970
sg3633
g3966
sg3647
g3977
sg3642
g3974
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3790
sg3633
g4230
sg3647
g3797
sg3642
g4237
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g3970
sg3633
g3966
sg3647
g3977
sg3642
g3974
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g4357
sg3633
g4353
sg3647
g4364
sg3642
g4361
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g3813
sg3633
g3803
sg3647
g3807
sg3642
g3811
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g3741
sg3633
g4945
sg3647
g3748
sg3642
g4952
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g4107
sg3633
g4103
sg3647
g4114
sg3642
g4111
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3664
sg3633
g3654
sg3647
g3658
sg3642
g3662
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g4510
sg3633
g4575
sg3647
g4517
sg3642
g4582
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3692
sg3633
g4761
sg3647
g3699
sg3642
g4768
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3813
sg3633
g4396
sg3647
g3807
sg3642
g4403
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g4107
sg3633
g4960
sg3647
g4114
sg3642
g4967
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g4510
sg3633
g4575
sg3647
g4517
sg3642
g4582
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g4107
sg3633
g4960
sg3647
g4114
sg3642
g4967
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g4060
sg3633
g4681
sg3647
g4067
sg3642
g4688
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3830
sg3633
g3820
sg3647
g3824
sg3642
g3828
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g3841
sg3633
g3837
sg3647
g3848
sg3642
g3845
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3933
sg3633
g5404
sg3647
g3927
sg3642
g5411
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g4030
sg3633
g4026
sg3647
g4037
sg3642
g4034
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g3884
sg3633
g5432
sg3647
g3891
sg3642
g5439
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3830
sg3633
g3820
sg3647
g3824
sg3642
g3828
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g4357
sg3633
g4411
sg3647
g4364
sg3642
g4418
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g4077
sg3633
g4135
sg3647
g4084
sg3642
g4142
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g3933
sg3633
g5404
sg3647
g3927
sg3642
g5411
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3675
sg3633
g3996
sg3647
g3682
sg3642
g4003
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3758
sg3633
g4176
sg3647
g3765
sg3642
g4183
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g4357
sg3633
g4411
sg3647
g4364
sg3642
g4418
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g4030
sg3633
g4120
sg3647
g4037
sg3642
g4127
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3758
sg3633
g4176
sg3647
g3765
sg3642
g4183
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3709
sg3633
g4011
sg3647
g3716
sg3642
g4018
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3675
sg3633
g3996
sg3647
g3682
sg3642
g4003
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g4030
sg3633
g4026
sg3647
g4037
sg3642
g4034
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3813
sg3633
g4396
sg3647
g3807
sg3642
g4403
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g4077
sg3633
g4073
sg3647
g4084
sg3642
g4081
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g4510
sg3633
g4575
sg3647
g4517
sg3642
g4582
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g4107
sg3633
g4103
sg3647
g4114
sg3642
g4111
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g3884
sg3633
g5432
sg3647
g3891
sg3642
g5439
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g3970
sg3633
g4325
sg3647
g3977
sg3642
g4332
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3709
sg3633
g4011
sg3647
g3716
sg3642
g4018
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3841
sg3633
g3837
sg3647
g3848
sg3642
g3845
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g4107
sg3633
g4960
sg3647
g4114
sg3642
g4967
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3933
sg3633
g3923
sg3647
g3927
sg3642
g3931
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3692
sg3633
g4761
sg3647
g3699
sg3642
g4768
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g3884
sg3633
g5432
sg3647
g3891
sg3642
g5439
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g3664
sg3633
g3654
sg3647
g3658
sg3642
g3662
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3933
sg3633
g5404
sg3647
g3927
sg3642
g5411
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g3741
sg3633
g4945
sg3647
g3748
sg3642
g4952
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3933
sg3633
g3923
sg3647
g3927
sg3642
g3931
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g4510
sg3633
g4575
sg3647
g4517
sg3642
g4582
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3884
sg3633
g5432
sg3647
g3891
sg3642
g5439
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g3813
sg3633
g4396
sg3647
g3807
sg3642
g4403
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3790
sg3633
g4230
sg3647
g3797
sg3642
g4237
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g4060
sg3633
g4681
sg3647
g4067
sg3642
g4688
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g4030
sg3633
g4026
sg3647
g4037
sg3642
g4034
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3970
sg3633
g3966
sg3647
g3977
sg3642
g3974
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g4107
sg3633
g4960
sg3647
g4114
sg3642
g4967
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g4077
sg3633
g4073
sg3647
g4084
sg3642
g4081
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g4060
sg3633
g4056
sg3647
g4067
sg3642
g4064
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g3933
sg3633
g5404
sg3647
g3927
sg3642
g5411
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3841
sg3633
g4491
sg3647
g3848
sg3642
g4498
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g3970
sg3633
g4325
sg3647
g3977
sg3642
g4332
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g4357
sg3633
g4353
sg3647
g4364
sg3642
g4361
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g3884
sg3633
g5432
sg3647
g3891
sg3642
g5439
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3933
sg3633
g5404
sg3647
g3927
sg3642
g5411
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3709
sg3633
g4011
sg3647
g3716
sg3642
g4018
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3741
sg3633
g4945
sg3647
g3748
sg3642
g4952
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g3841
sg3633
g3837
sg3647
g3848
sg3642
g3845
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g4077
sg3633
g4135
sg3647
g4084
sg3642
g4142
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g4060
sg3633
g4056
sg3647
g4067
sg3642
g4064
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g4510
sg3633
g4506
sg3647
g4517
sg3642
g4514
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g4060
sg3633
g4681
sg3647
g4067
sg3642
g4688
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g4077
sg3633
g4135
sg3647
g4084
sg3642
g4142
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3692
sg3633
g4761
sg3647
g3699
sg3642
g4768
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g4060
sg3633
g4056
sg3647
g4067
sg3642
g4064
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g4357
sg3633
g4411
sg3647
g4364
sg3642
g4418
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g3758
sg3633
g4176
sg3647
g3765
sg3642
g4183
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g3790
sg3633
g4230
sg3647
g3797
sg3642
g4237
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I83497296
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'`q\x0c\x1f\x00\x81\x0c\x1f\x80\x8c\x0b\x1f\xe0=\x0c\x1f\x18\x82\x0c\x1f`q\x0c\x1f0>\x0c\x1fX>\x0c\x1f8\x81\x0c\x1fp\x81\x0c\x1f\x08>\x0c\x1f`q\x0c\x1f8\x81\x0c\x1f\x10\x8d\x0b\x1f`q\x0c\x1f\x00\x81\x0c\x1f\xf0\x8b\x0b\x1f\x80>\x0c\x1f\xe0=\x0c\x1f@\x8d\x0b\x1f\xf0\x8b\x0b\x1f0>\x0c\x1f\xa8>\x0c\x1f\xa8\x81\x0c\x1fX>\x0c\x1f\x90\x8b\x0b\x1fp\x81\x0c\x1f\xa8\x81\x0c\x1f\xd0>\x0c\x1fP\x8c\x0b\x1f\xf8>\x0c\x1f\x90\x8b\x0b\x1f\xe0\x81\x0c\x1f\xf0\x8b\x0b\x1f\x08>\x0c\x1f \x8c\x0b\x1f\x80q\x0c\x1f\xe0=\x0c\x1f\xa8\x81\x0c\x1f8\x81\x0c\x1fH?\x0c\x1f\x80q\x0c\x1f\xf8>\x0c\x1f`q\x0c\x1f\xa0\x8d\x0b\x1fp?\x0c\x1f\x08>\x0c\x1f\xe0\x81\x0c\x1f\x90\x8b\x0b\x1fp\x81\x0c\x1f\x00\x81\x0c\x1f\xd0>\x0c\x1fX>\x0c\x1f\xa8>\x0c\x1f\xe0\x81\x0c\x1f\xa8>\x0c\x1f\xf8>\x0c\x1f\xd0>\x0c\x1f\x08>\x0c\x1f\xc0\x8b\x0b\x1f\x00\x81\x0c\x1f\x80q\x0c\x1f\xe0\x81\x0c\x1f\xa8>\x0c\x1f\xe0q\x0c\x1f\xf8>\x0c\x1f\x80>\x0c\x1f8\x81\x0c\x1f\xf8>\x0c\x1fX>\x0c\x1f \x8c\x0b\x1f8\x81\x0c\x1f\x80>\x0c\x1f\xd0>\x0c\x1f\x00\x81\x0c\x1fP\x8c\x0b\x1f\xa8>\x0c\x1fp\x8d\x0b\x1f\x90\x8b\x0b\x1fp\x81\x0c\x1f\x00r\x0c\x1fP\x8c\x0b\x1fH?\x0c\x1f\x80>\x0c\x1f\x08>\x0c\x1fX>\x0c\x1f\xd0>\x0c\x1f \x8c\x0b\x1f\xd0>\x0c\x1f\xa8>\x0c\x1f\xe0=\x0c\x1f\x00r\x0c\x1f \x90\x0c\x1f\xc0?\x0c\x1f0>\x0c\x1f\x08>\x0c\x1f\x00\x81\x0c\x1f\xa0\x8d\x0b\x1f8\x81\x0c\x1f\xc0\x8b\x0b\x1f\xe0=\x0c\x1fp\x8d\x0b\x1fX>\x0c\x1f\xe0=\x0c\x1fp?\x0c\x1f\xf0\x8b\x0b\x1f\xe0=\x0c\x1fP\x8c\x0b\x1f\xf8>\x0c\x1fP\x8c\x0b\x1f \x8c\x0b\x1f8\x81\x0c\x1f\xf0\x8b\x0b\x1f\x98?\x0c\x1f\x80>\x0c\x1f\xf8>\x0c\x1f\xd0>\x0c\x1f\x18\x82\x0c\x1f\xe0q\x0c\x1fP\x8c\x0b\x1f\xb0\x8c\x0b\x1fp\x81\x0c\x1f\x90\x8b\x0b\x1f\x08>\x0c\x1f\xa0\x8d\x0b\x1f\xa8>\x0c\x1f \x8c\x0b\x1f\xe0\x81\x0c\x1f\x10\x8d\x0b\x1f\xa8>\x0c\x1f`q\x0c\x1f\x80q\x0c\x1f\xf8>\x0c\x1f\x80q\x0c\x1f`q\x0c\x1f\xe0\x81\x0c\x1f\x80q\x0c\x1f\x80>\x0c\x1f\x18\x82\x0c\x1f\xa0\x8d\x0b\x1f\xa8\x81\x0c\x1f0>\x0c\x1f \x8c\x0b\x1f\x90\x8b\x0b\x1f \x8c\x0b\x1fp\x81\x0c\x1f\xe0=\x0c\x1f\xc0\x8b\x0b\x1f \x8c\x0b\x1f\xc0\x8b\x0b\x1f8\x81\x0c\x1f\xa8\x81\x0c\x1f\x90\x8b\x0b\x1f\x00\x81\x0c\x1f\x80>\x0c\x1f\xd0>\x0c\x1f\x00\x81\x0c\x1f8\x81\x0c\x1fH\x90\x0c\x1f\x10\x8d\x0b\x1f\x00\x81\x0c\x1fp\x8d\x0b\x1f\xc0?\x0c\x1f\x80q\x0c\x1f\x80>\x0c\x1fp\x81\x0c\x1f\xa8\x81\x0c\x1f\xe0=\x0c\x1fX>\x0c\x1f\xc0\x8b\x0b\x1f \x8c\x0b\x1f\xf0\x8b\x0b\x1fp\x81\x0c\x1f0>\x0c\x1fX>\x0c\x1f\xf8>\x0c\x1fX>\x0c\x1fp\x90\x0c\x1f\xf0\x8b\x0b\x1f\xa0q\x0c\x1f8\x81\x0c\x1f0>\x0c\x1f\x80>\x0c\x1f\xf8>\x0c\x1f\xf0\x8b\x0b\x1f0>\x0c\x1f\x98?\x0c\x1f`q\x0c\x1f\xc0\x8b\x0b\x1f\xa8>\x0c\x1f0>\x0c\x1f\xc0\x8b\x0b\x1f\x90\x8b\x0b\x1f\xe0\x81\x0c\x1fp\x90\x0c\x1f\xa8\x81\x0c\x1f\xe0\x81\x0c\x1f\x00r\x0c\x1fX>\x0c\x1f\x80\x8c\x0b\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'\xe0=\xe7\x1e\xa0r\x0c\x1f\xa0s\x0c\x1f`s\x0c\x1f\xe0s\x0c\x1f@s\x0c\x1f t\x0c\x1f\xc0r\x0c\x1f\xe0r\x0c\x1f\x80t\x0c\x1f@t\x0c\x1f`t\x0c\x1f\xe0t\x0c\x1f\x00u\x0c\x1f s\x0c\x1f@u\x0c\x1f u\x0c\x1f\x80s\x0c\x1f`u\x0c\x1f\xc0u\x0c\x1f\xa0u\x0c\x1f\xa0t\x0c\x1f\xe0u\x0c\x1f\x00v\x0c\x1f v\x0c\x1f@v\x0c\x1f`v\x0c\x1f`/\xbe\x1e\xc0v\x0c\x1f\x80v\x0c\x1f\x80r\x0c\x1f\x00w\x0c\x1f\xe0w\x0c\x1f\xc0t\x0c\x1f@r\x0c\x1f@w\x0c\x1f\xc0s\x0c\x1f\x80x\x0c\x1f w\x0c\x1f x\x0c\x1f`x\x0c\x1f\xa0x\x0c\x1f\x00s\x0c\x1f@y\x0c\x1f r\x0c\x1f\xc0w\x0c\x1f\x80u\x0c\x1f\xc0y\x0c\x1f\x00y\x0c\x1f\x80y\x0c\x1f y\x0c\x1f`r\x0c\x1f\xe0v\x0c\x1f`z\x0c\x1f\x80z\x0c\x1f\x00x\x0c\x1f\xe0z\x0c\x1f\xe0x\x0c\x1f\xc0x\x0c\x1f`w\x0c\x1f\x00t\x0c\x1f\xa0w\x0c\x1f\xa0z\x0c\x1f z\x0c\x1f\xa0y\x0c\x1f@z\x0c\x1f\x80{\x0c\x1f@{\x0c\x1f\x00z\x0c\x1f |\x0c\x1f\x80w\x0c\x1f@x\x0c\x1f\xc0|\x0c\x1f\xc0z\x0c\x1f\x00{\x0c\x1f\xe0|\x0c\x1f`y\x0c\x1f\xa0|\x0c\x1f\x80|\x0c\x1f\x00|\x0c\x1f\x80}\x0c\x1f`{\x0c\x1f`}\x0c\x1f {\x0c\x1f\xa0}\x0c\x1f\x00~\x0c\x1f\xc0{\x0c\x1f\xe0{\x0c\x1f`~\x0c\x1f\xa0{\x0c\x1f@~\x0c\x1f@}\x0c\x1f\xe0~\x0c\x1f\x80\x7f\x0c\x1f@|\x0c\x1f\xa0\x7f\x0c\x1f\xe0\x7f\x0c\x1f\xe0}\x0c\x1f\xa0~\x0c\x1f\xc0}\x0c\x1f \x7f\x0c\x1f\xe0y\x0c\x1f\xa0v\x0c\x1f`\x7f\x0c\x1f\x00}\x0c\x1f\xc0~\x0c\x1f\x80~\x0c\x1f@\x7f\x0c\x1f\x00\x7f\x0c\x1f ~\x0c\x1f\x80=\xe7\x1e`|\x0c\x1f\x80\x006\x1f@\x026\x1f \x026\x1f\x00\x026\x1f`\x016\x1f`\xf1\x85\r\xe0\x016\x1f\xc0\x006\x1f@\x006\x1f\x80\x016\x1f`\x026\x1f@\x016\x1f\x80\x036\x1f\xa0\x016\x1f\xc0\x016\x1f\xc0\x026\x1f\xe0\x006\x1f\xe0\x026\x1f \x006\x1f \x036\x1f\xe0\x036\x1f`\x036\x1f\xc0\x046\x1f\xa0\x006\x1f\x80\x046\x1f`\x006\x1f`\x046\x1f\x00\x056\x1f\xa0\x046\x1f \x056\x1f\xc0\x056\x1f\xa0\x036\x1f\x00\x016\x1f\xe0\x046\x1f@\x056\x1f`\x066\x1f\x00\x036\x1f@\x066\x1f\x00\x066\x1f\xc0\x066\x1f@\x046\x1f\x80\x056\x1f\xe0\x066\x1f \x046\x1f\x80\x066\x1f`\x056\x1f\x80\x026\x1f \x016\x1f`\x076\x1f\xc0\x076\x1f \x076\x1f@\x086\x1f\x00\x076\x1f\xa0\x086\x1f \x066\x1f\xa0\x026\x1f@\x036\x1f\xc0\x036\x1f`\t6\x1f\xe0\x056\x1f\xc0\t6\x1f\x00\t6\x1f\x00\x046\x1f\xe0\x086\x1f`\x086\x1f\x00\n6\x1f@\t6\x1f@\n6\x1f\xa0\x066\x1f\xa0\x076\x1f\xa0\x056\x1f\xe0\x076\x1f\xe0\t6\x1f \t6\x1f\x80\x076\x1f\x80\n6\x1f\x80\t6\x1f\x80\x0b6\x1f\xc0\n6\x1f\xe0\x0b6\x1f \x0b6\x1f@\x076\x1f\xa0\n6\x1f`\n6\x1f@\x0b6\x1f \x086\x1f\xc0\x0c6\x1f@\x0c6\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'Y\xd3]?a\xb8\x9b?\xd5\xfa??\xf0c7?\x8d\x9fj?\xda\rQ?V\x0b\xb1?V\xc9L?\xd9r7?X\xceL?\xa3~H?cU\x95?\xf5\nQ?TCD?\x1f^f?\x80b&?7\x93\x19?K{&?\xd7\x18\xc2?+T\xb5?\xb9\xed\x8e?\xbab&?\x02\x08/?\xb7c&?#\x89H?\xaf\xf8??\xdbxw?\x12\xe1.?\xe5\xb1\x19?\x05\xfb??P.3?\x1bC\xc4?\x0c\xfe??\x1f\xd7]?;\xdf]?\xc9?\xa4?L\x97Y?k\xd8.?\xa3\x01@?\xfa/3?P\x0c\xc0?\xe2*s?\x89\x1f"?G\xab\xaa?\xc1a&?g\rQ?\xdbw&?Z`&?\xb9\xa8\xca?O\xc6L?\x91\x96Y?\x12\x1d"?VT\x05@L\xaaj?\xca@D?~,s?\xd1RU?\x1bf&?\xd6\xc9\xac?7\xc6L?\xd3\xe8.?8AD?\n\xe9n?\x18\xb9{?\x93\xaej?2n7?\xdd\xf9??\x9b\xa6*?\xa3\x01@?\xa4\x87H?}L3?\xd2\xee.?\x91MU?\xd8\xfb??\xd1VU?]ow?\xdf\xfc??\xe0\xa7*?\xb0\x1cb?\x8dD\xa4?\xc8\x95Y?\xbc\xae*?\x02\xcc\xcc?]Q\xf5?\x99\x8dY?\xd30s?0\xb4;??lU?;R\x15?\x1bTU?\x0c\xa0;?\xa2B\xe4?2\xbej?\x0c\xeb.?\x9c\xf8??\xcb[&?\xea\xbc;?o\xe6.?\r\x9a\x19?\xd6TU?\x92_\xc6?\x99\xee.?\x94\x01@?U\xce\x1d?\x9c>\x93?|\xdd\x1d?\xa3V&?\x1f\xda\x1d?\x93ef?\x1a|\x07@\x91c&?\xcf\x1c"?\x91"\x82?\xa5\x10\x91?S\xf0n?\x1b\xb4Y?\x0c!"?\xc0\x1e3?*\x88H?\xa5e\x86?u\xf8\xdf?R\x1e"?\x9a\xaa\x8a?\xcd\'s?\'x7?K\xc3\xbb?\x06\x87H?\'0s?\xe6\x0cQ?V\xff??\x126\x03@\x81\xca\x8c?BQ\x15?\n\xee.?\xa8\xb3{?V\xc7\x8c?\xe2{f?\xa8\xb9\x9b?\x7fl7?\x0c\xdc\x1d?P\x1f"?\x19t7?^\xd7\xcc?$\xf0n?\xd2\xfd\x9f?\xa4\x83H?t\x83Y?-\xccL?">\x93?\xbe\x1f"?,v7?\xdc\xee.?\xba\x1e\x82?\xc0T\x95?\x9e\xefn?\x87\xb0*?\x0b\xf5??=\xaf\x19?@\r\xb1?\xe5\xc7\xac?\xf7 b?]1\x93?\xb0\xbaL?\xde\xd0L?\x82\xf8\x7f?\xc2o\xa6?\xc4\xff??\xbe\x06"?\xe2@D?\xa7\x97Y?\xc1>\x84?\xf1\xe4\x0c?\x1b\xfc??\xdcFD?\x87\xac*?\x08\xfc??\xb4U\x15?\xb7e\x15?\xc3gf?7\x11Q?\xd3\xa1*?X\x87H?O\xe9.?\xbb\'Q?\xb7\nQ?\x07\xc6L?\xce\xfb??\xbe03?`\xfc\x7f?\x999"?\xadff?\xd5\rQ?p\x85\x88?\xbf\xcbL?\xcf\x1a"?\xc7\\D?\xc4\xb8;?&\xbc;?\x80\x0e\xb1?\x1b\xa7\x8a?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'p7\xee\x04\xe8:\xee\x04\xd8\xf5\x14\r \xf9\x14\rP\xff\x14\r\xa0\xfa\x14\rP\xf3\x14\rH\xf8\x14\r\xb0\xfc\x14\r\xc0\xfb\x14\r\xb0\xff\x14\rX\xfd\x14\r\x80\xfc\x14\r\xf8\xf6\x14\r\xa0\xf1\x14\r\xb0\xf6\x14\r\x00\xfe\x14\r\x88\xfa\x14\r\xe0\xf9\x14\r(\xfa\x14\r\xe0\xff\x14\r\x10\xf7\x14\r\x18\xf2\x14\r8\xf9\xed\x04\xa0\xfa\xed\x04\x00\xfb\xed\x04\xa8\xf5\xed\x04\xa0\xf7\xed\x04\xb8\xf4\xed\x04\x88\xf4\xed\x04(\xf7\xed\x04 \xf0\xed\x04@\xfa\xed\x04\xc0\xf2\xed\x04\x80\xf0\xed\x04\xb0\xf0\xed\x04\x98\xf3\xed\x04`\xf2\xed\x04x\xf2\xed\x040\xf8\xed\x04`\xf5\xed\x04\xe0\xf6\xed\x04\xe8\xf1\xed\x04\xa8\xf8\xed\x04P\xf0\xed\x04\xd0\xf1\xed\x04\xb0\xf3\xed\x04\xa8\xf2\xed\x04@\xf7\xed\x04\xa0\xfd\xed\x04H\xfe\xed\x04\xc8\xf3\xed\x040\xfe\xed\x04\xa0\xf4\xed\x04\xc8\xf0\xed\x04p\xf1\xed\x04p\xf7\xed\x04\xd8\xfb\xed\x04\x80\xfc\xed\x04@\xf4\xed\x04\x00\xf2\xed\x04\x10\xf4\xed\x04\x18\xf5\xed\x04X\xf4\xed\x04@\xfd\xed\x04\xe0\xfc\xed\x04\xb8\xf7\xed\x04\x88\xfa\xed\x048\xfc\xed\x04\xf0\xf2\xed\x04\x18\xf8\xed\x04X\xf1\xed\x04\xd8\xf8\xed\x04p\xfa\xed\x04\xb0\xf9\xed\x04\xe8\xf4\xed\x04\x98\xf6\xed\x04x\xfe\xed\x04\x98\xfc\xed\x04\xe0\xf3\xed\x04H\xf5\xed\x04\x08\xf6\xed\x04\xe8\xf7\xed\x04\x90\xf8\xed\x04(\xf4\xed\x04\xe8\xfd\xed\x04\xd0\xfd\xed\x04\xc0\xf5\xed\x04(\xf1\xed\x04\xb0\xfc\xed\x04\x88\xfd\xed\x04\xa0\xf1\xed\x04\x08\xf3\xed\x04\x18\xfe\xed\x04\xf8\xfc\xed\x048\xff\xed\x04\xd8\xfe\xed\x04\x08\xf9\xed\x04\xd0\xf7\xed\x04H\xfb\xed\x04\xe0\xff\xed\x04\x18\xfb\xed\x04h\xff\xed\x04H\xf8\xed\x04\xc8\xf9\xed\x04X\xfa\xed\x04@\xf1\xed\x04x\xfb\xed\x04P\xff\xed\x04\x00\xf5\xed\x04\xb8\xfa\xed\x04\xf0\xfe\xed\x04\x10\xf7\xed\x04\xb0\xf6\xed\x04\x10\xf1\xed\x04\xd8\xf5\xed\x04h\xfc\xed\x04p\xfd\xed\x04\x08\xff\xed\x04\xf8\xf6\xed\x04\xf0\xf5\xed\x04\xd8\xf2\xed\x04\xb8\xf1\xed\x04\xa8\xfe\xed\x04\xb0\xff\xed\x04\xe0\xf0\xed\x04\x88\xf7\xed\x040\xf2\xed\x04\xf0\xf8\xed\x04X\xfd\xed\x04(\xfd\xed\x04`\xf8\xed\x04\xc8\xff\xed\x04\x18\xf2\xed\x04\x80\xf3\xed\x04`\xfb\xed\x04\x80\xf6\xed\x04H\xf2\xed\x04\xe8\xfa\xed\x04P\xf3\xed\x04\xc0\xfe\xed\x04\xc0\xfb\xed\x048\xf6\xed\x04\x98\xf9\xed\x04`\xfe\xed\x04x\xf5\xed\x04P\xfc\xed\x04\x80\xf9\xed\x04\x88\xf1\xed\x04 \xf9\xed\x040\xfb\xed\x04x\xf8\xed\x048\xf3\xed\x04 \xfc\xed\x04X\xf7\xed\x04\x80\xff\xed\x04\x10\xfd\xed\x04\x90\xf5\xed\x04\x10\xfa\xed\x04\xa8\xfb\xed\x04\xc8\xf6\xed\x04\x90\xfe\xed\x040\xf5\xed\x04(\xfa\xed\x04\x98\xf0\xed\x04\xf0\xfb\xed\x04\xf8\xf3\xed\x04h\xf9\xed\x04h\xf3\xed\x04\x90\xfb\xed\x04\x98\xff\xed\x04\x08\xfc\xed\x04\xc8\xfc\xed\x04 \xf3\xed\x04 \xff\xed\x04 \xf6\xed\x04\xb8\xfd\xed\x04\xc0\xf8\xed\x04P\xf6\xed\x04\x18\x18\xe5\x04@\x1d\xe5\x04\x00\x15\xe5\x04X\x11\xe5\x04\xa0=\x02\x05X=\x02\x05H2\x02\x05\xc83\x02\x050>\x02\x05\xc8?\x02\x05\x18>\x02\x05\xd04\x02\x05H;\x02\x05@7\x02\x05\xb0<\x02\x05\x800\x02\x05@1\x02\x05h9\x02\x05\xa88\x02\x05\xe8:\x02\x05\xd8>\x02\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6419
sg6371
g6409
sg6385
g6413
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6453
sg6371
g6443
sg6385
g6447
sg6380
g6451
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6376
sg6371
g6460
sg6385
g6386
sg6380
g6467
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6513
sg6371
g6509
sg6385
g6520
sg6380
g6517
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6453
sg6371
g6443
sg6385
g6447
sg6380
g6451
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6376
sg6371
g6460
sg6385
g6386
sg6380
g6467
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6513
sg6371
g6509
sg6385
g6520
sg6380
g6517
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6592
sg6371
g6582
sg6385
g6586
sg6380
g6590
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6376
sg6371
g6460
sg6385
g6386
sg6380
g6467
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6629
sg6371
g6625
sg6385
g6636
sg6380
g6633
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6646
sg6371
g6642
sg6385
g6653
sg6380
g6650
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6430
sg6371
g6659
sg6385
g6437
sg6380
g6666
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6684
sg6371
g6674
sg6385
g6678
sg6380
g6682
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6629
sg6371
g6691
sg6385
g6636
sg6380
g6698
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6479
sg6371
g6706
sg6385
g6486
sg6380
g6713
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6725
sg6371
g6721
sg6385
g6732
sg6380
g6729
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6742
sg6371
g6738
sg6385
g6749
sg6380
g6746
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6496
sg6371
g6755
sg6385
g6503
sg6380
g6762
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6419
sg6371
g6770
sg6385
g6413
sg6380
g6777
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6742
sg6371
g6738
sg6385
g6749
sg6380
g6746
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6815
sg6371
g6811
sg6385
g6822
sg6380
g6819
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6832
sg6371
g6828
sg6385
g6839
sg6380
g6836
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6849
sg6371
g6845
sg6385
g6856
sg6380
g6853
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6419
sg6371
g6770
sg6385
g6413
sg6380
g6777
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6879
sg6371
g6875
sg6385
g6886
sg6380
g6883
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6629
sg6371
g6625
sg6385
g6636
sg6380
g6633
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6453
sg6371
g6443
sg6385
g6447
sg6380
g6451
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6684
sg6371
g6674
sg6385
g6678
sg6380
g6682
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6935
sg6371
g6931
sg6385
g6942
sg6380
g6939
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6430
sg6371
g6659
sg6385
g6437
sg6380
g6666
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6742
sg6371
g6961
sg6385
g6749
sg6380
g6968
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6513
sg6371
g6509
sg6385
g6520
sg6380
g6517
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6376
sg6371
g6460
sg6385
g6386
sg6380
g6467
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6935
sg6371
g7002
sg6385
g6942
sg6380
g7009
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6849
sg6371
g7017
sg6385
g6856
sg6380
g7024
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6832
sg6371
g6828
sg6385
g6839
sg6380
g6836
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6479
sg6371
g6706
sg6385
g6486
sg6380
g6713
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6453
sg6371
g7071
sg6385
g6447
sg6380
g7078
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6879
sg6371
g7086
sg6385
g6886
sg6380
g7093
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6419
sg6371
g6409
sg6385
g6413
sg6380
g6417
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6530
sg6371
g7114
sg6385
g6537
sg6380
g7121
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6396
sg6371
g7129
sg6385
g6403
sg6380
g7136
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6815
sg6371
g6811
sg6385
g6822
sg6380
g6819
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6725
sg6371
g6721
sg6385
g6732
sg6380
g6729
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6879
sg6371
g6875
sg6385
g6886
sg6380
g6883
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6725
sg6371
g7196
sg6385
g6732
sg6380
g7203
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6849
sg6371
g7017
sg6385
g6856
sg6380
g7024
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6815
sg6371
g6811
sg6385
g6822
sg6380
g6819
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6453
sg6371
g7071
sg6385
g6447
sg6380
g7078
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6592
sg6371
g7250
sg6385
g6586
sg6380
g7257
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6935
sg6371
g6931
sg6385
g6942
sg6380
g6939
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6879
sg6371
g6875
sg6385
g6886
sg6380
g6883
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6725
sg6371
g7196
sg6385
g6732
sg6380
g7203
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6879
sg6371
g7086
sg6385
g6886
sg6380
g7093
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6849
sg6371
g7017
sg6385
g6856
sg6380
g7024
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6646
sg6371
g6642
sg6385
g6653
sg6380
g6650
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6513
sg6371
g6509
sg6385
g6520
sg6380
g6517
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6849
sg6371
g6845
sg6385
g6856
sg6380
g6853
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6496
sg6371
g6755
sg6385
g6503
sg6380
g6762
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6684
sg6371
g7395
sg6385
g6678
sg6380
g7402
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6513
sg6371
g7410
sg6385
g6520
sg6380
g7417
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6646
sg6371
g7425
sg6385
g6653
sg6380
g7432
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6815
sg6371
g7440
sg6385
g6822
sg6380
g7447
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6832
sg6371
g7468
sg6385
g6839
sg6380
g7475
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6725
sg6371
g6721
sg6385
g6732
sg6380
g6729
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6742
sg6371
g6961
sg6385
g6749
sg6380
g6968
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6419
sg6371
g6409
sg6385
g6413
sg6380
g6417
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6935
sg6371
g6931
sg6385
g6942
sg6380
g6939
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6832
sg6371
g7468
sg6385
g6839
sg6380
g7475
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6646
sg6371
g7425
sg6385
g6653
sg6380
g7432
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6453
sg6371
g6443
sg6385
g6447
sg6380
g6451
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6815
sg6371
g7440
sg6385
g6822
sg6380
g7447
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6684
sg6371
g6674
sg6385
g6678
sg6380
g6682
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6815
sg6371
g7440
sg6385
g6822
sg6380
g7447
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6725
sg6371
g7196
sg6385
g6732
sg6380
g7203
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6935
sg6371
g7002
sg6385
g6942
sg6380
g7009
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6646
sg6371
g7425
sg6385
g6653
sg6380
g7432
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6629
sg6371
g6691
sg6385
g6636
sg6380
g6698
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6453
sg6371
g7071
sg6385
g6447
sg6380
g7078
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6396
sg6371
g7129
sg6385
g6403
sg6380
g7136
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6832
sg6371
g6828
sg6385
g6839
sg6380
g6836
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6513
sg6371
g7410
sg6385
g6520
sg6380
g7417
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6592
sg6371
g6582
sg6385
g6586
sg6380
g6590
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6742
sg6371
g6738
sg6385
g6749
sg6380
g6746
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6496
sg6371
g6755
sg6385
g6503
sg6380
g6762
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6430
sg6371
g6659
sg6385
g6437
sg6380
g6666
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6479
sg6371
g6706
sg6385
g6486
sg6380
g6713
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6629
sg6371
g6625
sg6385
g6636
sg6380
g6633
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6430
sg6371
g6659
sg6385
g6437
sg6380
g6666
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6832
sg6371
g6828
sg6385
g6839
sg6380
g6836
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6849
sg6371
g6845
sg6385
g6856
sg6380
g6853
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6832
sg6371
g7468
sg6385
g6839
sg6380
g7475
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6684
sg6371
g7395
sg6385
g6678
sg6380
g7402
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6513
sg6371
g7410
sg6385
g6520
sg6380
g7417
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6629
sg6371
g6691
sg6385
g6636
sg6380
g6698
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6646
sg6371
g6642
sg6385
g6653
sg6380
g6650
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6849
sg6371
g6845
sg6385
g6856
sg6380
g6853
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6815
sg6371
g6811
sg6385
g6822
sg6380
g6819
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6453
sg6371
g6443
sg6385
g6447
sg6380
g6451
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6879
sg6371
g6875
sg6385
g6886
sg6380
g6883
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6832
sg6371
g7468
sg6385
g6839
sg6380
g7475
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6530
sg6371
g7114
sg6385
g6537
sg6380
g7121
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6419
sg6371
g6409
sg6385
g6413
sg6380
g6417
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6453
sg6371
g7071
sg6385
g6447
sg6380
g7078
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6832
sg6371
g7468
sg6385
g6839
sg6380
g7475
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6725
sg6371
g7196
sg6385
g6732
sg6380
g7203
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6684
sg6371
g7395
sg6385
g6678
sg6380
g7402
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6879
sg6371
g6875
sg6385
g6886
sg6380
g6883
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6592
sg6371
g6582
sg6385
g6586
sg6380
g6590
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6725
sg6371
g7196
sg6385
g6732
sg6380
g7203
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6935
sg6371
g7002
sg6385
g6942
sg6380
g7009
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6849
sg6371
g7017
sg6385
g6856
sg6380
g7024
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6935
sg6371
g6931
sg6385
g6942
sg6380
g6939
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6376
sg6371
g6460
sg6385
g6386
sg6380
g6467
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6879
sg6371
g7086
sg6385
g6886
sg6380
g7093
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6935
sg6371
g7002
sg6385
g6942
sg6380
g7009
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6646
sg6371
g6642
sg6385
g6653
sg6380
g6650
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6453
sg6371
g7071
sg6385
g6447
sg6380
g7078
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6832
sg6371
g6828
sg6385
g6839
sg6380
g6836
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6742
sg6371
g6961
sg6385
g6749
sg6380
g6968
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6684
sg6371
g7395
sg6385
g6678
sg6380
g7402
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6419
sg6371
g6770
sg6385
g6413
sg6380
g6777
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6684
sg6371
g6674
sg6385
g6678
sg6380
g6682
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6530
sg6371
g7114
sg6385
g6537
sg6380
g7121
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6430
sg6371
g6659
sg6385
g6437
sg6380
g6666
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6592
sg6371
g7250
sg6385
g6586
sg6380
g7257
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6684
sg6371
g7395
sg6385
g6678
sg6380
g7402
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6592
sg6371
g7250
sg6385
g6586
sg6380
g7257
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6513
sg6371
g6509
sg6385
g6520
sg6380
g6517
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6742
sg6371
g6738
sg6385
g6749
sg6380
g6746
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6419
sg6371
g6409
sg6385
g6413
sg6380
g6417
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6396
sg6371
g7129
sg6385
g6403
sg6380
g7136
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6646
sg6371
g7425
sg6385
g6653
sg6380
g7432
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6815
sg6371
g7440
sg6385
g6822
sg6380
g7447
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6513
sg6371
g7410
sg6385
g6520
sg6380
g7417
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6725
sg6371
g6721
sg6385
g6732
sg6380
g6729
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6592
sg6371
g7250
sg6385
g6586
sg6380
g7257
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6396
sg6371
g7129
sg6385
g6403
sg6380
g7136
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6742
sg6371
g6961
sg6385
g6749
sg6380
g6968
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6629
sg6371
g6691
sg6385
g6636
sg6380
g6698
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6935
sg6371
g7002
sg6385
g6942
sg6380
g7009
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6646
sg6371
g7425
sg6385
g6653
sg6380
g7432
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6530
sg6371
g7114
sg6385
g6537
sg6380
g7121
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6742
sg6371
g6738
sg6385
g6749
sg6380
g6746
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6496
sg6371
g6755
sg6385
g6503
sg6380
g6762
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6592
sg6371
g7250
sg6385
g6586
sg6380
g7257
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6684
sg6371
g6674
sg6385
g6678
sg6380
g6682
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6629
sg6371
g6691
sg6385
g6636
sg6380
g6698
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6530
sg6371
g7114
sg6385
g6537
sg6380
g7121
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6479
sg6371
g6706
sg6385
g6486
sg6380
g6713
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6496
sg6371
g6755
sg6385
g6503
sg6380
g6762
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6849
sg6371
g6845
sg6385
g6856
sg6380
g6853
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6815
sg6371
g7440
sg6385
g6822
sg6380
g7447
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6629
sg6371
g6625
sg6385
g6636
sg6380
g6633
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6396
sg6371
g7129
sg6385
g6403
sg6380
g7136
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6513
sg6371
g7410
sg6385
g6520
sg6380
g7417
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6646
sg6371
g6642
sg6385
g6653
sg6380
g6650
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6849
sg6371
g7017
sg6385
g6856
sg6380
g7024
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6629
sg6371
g6625
sg6385
g6636
sg6380
g6633
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6479
sg6371
g6706
sg6385
g6486
sg6380
g6713
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6592
sg6371
g6582
sg6385
g6586
sg6380
g6590
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6725
sg6371
g6721
sg6385
g6732
sg6380
g6729
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6592
sg6371
g6582
sg6385
g6586
sg6380
g6590
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6419
sg6371
g6770
sg6385
g6413
sg6380
g6777
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6879
sg6371
g7086
sg6385
g6886
sg6380
g7093
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6815
sg6371
g6811
sg6385
g6822
sg6380
g6819
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6742
sg6371
g6961
sg6385
g6749
sg6380
g6968
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6879
sg6371
g7086
sg6385
g6886
sg6380
g7093
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6935
sg6371
g6931
sg6385
g6942
sg6380
g6939
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6419
sg6371
g6770
sg6385
g6413
sg6380
g6777
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.